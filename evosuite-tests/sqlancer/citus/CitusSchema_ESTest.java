/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 10 15:57:38 GMT 2025
 */

package sqlancer.citus;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import sqlancer.SQLConnection;
import sqlancer.citus.CitusSchema;
import sqlancer.postgres.PostgresSchema;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CitusSchema_ESTest extends CitusSchema_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<CitusSchema.CitusTable> linkedList0 = new LinkedList<CitusSchema.CitusTable>();
      linkedList0.add((CitusSchema.CitusTable) null);
      CitusSchema citusSchema0 = new CitusSchema(linkedList0, "\"kL>]I,");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet1).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0, resultSet1).when(preparedStatement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      Statement statement0 = sQLConnection0.prepareStatement("\"kL>]I,");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, statement0, (Statement) null).when(connection1).createStatement();
      SQLConnection sQLConnection1 = new SQLConnection(connection1);
      CitusSchema.fromConnection(sQLConnection1, "\"kL>]I,");
      // Undeclared exception!
      try { 
        CitusSchema.fromConnection(sQLConnection1, "\"kL>]I,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.postgres.PostgresSchema", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<CitusSchema.CitusTable> linkedList0 = new LinkedList<CitusSchema.CitusTable>();
      CitusSchema citusSchema0 = new CitusSchema(linkedList0, "\"kL>]I,");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((-1649304245), (-1649304245), (-1649304245)).when(resultSet1).getInt(anyString());
      doReturn("-a:WfFgdRheBG@^ 1", "\"kL>]I,", "sqlancer.h2.H2Provider$Action", "sqlancer.h2.H2Provider$Action", ".").when(resultSet1).getString(anyString());
      doReturn(true, true, true, false).when(resultSet1).next();
      doReturn(false, false, true).when(resultSet1).wasNull();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0, resultSet1).when(preparedStatement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      Statement statement0 = sQLConnection0.prepareStatement("\"kL>]I,");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, statement0, (Statement) null).when(connection1).createStatement();
      SQLConnection sQLConnection1 = new SQLConnection(connection1);
      CitusSchema.fromConnection(sQLConnection1, "\"kL>]I,");
      // Undeclared exception!
      try { 
        CitusSchema.fromConnection(sQLConnection1, "\"kL>]I,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.postgres.PostgresSchema", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CitusSchema citusSchema0 = null;
      try {
        citusSchema0 = new CitusSchema((List<CitusSchema.CitusTable>) null, "?\"tRsRMS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      Statement statement0 = sQLConnection0.prepareStatement("\"kL>]I,");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, (Statement) null).when(connection1).createStatement();
      SQLConnection sQLConnection1 = new SQLConnection(connection1);
      // Undeclared exception!
      try { 
        CitusSchema.fromConnection(sQLConnection1, "\"kL>]I,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.citus.CitusSchema", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0, (ResultSet) null).when(preparedStatement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      Statement statement0 = sQLConnection0.prepareStatement("\"kL>]I,");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, statement0).when(connection1).createStatement();
      SQLConnection sQLConnection1 = new SQLConnection(connection1);
      // Undeclared exception!
      try { 
        CitusSchema.fromConnection(sQLConnection1, "\"kL>]I,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.citus.CitusSchema", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(27).when(resultSet1).getInt(anyString());
      doReturn("evURqMT_!|4", "<+", "citus_tables").when(resultSet1).getString(anyString());
      doReturn(true, true, false).when(resultSet1).next();
      doReturn(false).when(resultSet1).wasNull();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0, resultSet1).when(preparedStatement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      Statement statement0 = sQLConnection0.prepareStatement("\"kL>]I,");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, statement0).when(connection1).createStatement();
      SQLConnection sQLConnection1 = new SQLConnection(connection1);
      CitusSchema citusSchema0 = CitusSchema.fromConnection(sQLConnection1, "\"kL>]I,");
      assertEquals("\"kL>]I,", citusSchema0.getDatabaseName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<PostgresSchema.PostgresColumn> linkedList0 = new LinkedList<PostgresSchema.PostgresColumn>();
      LinkedList<PostgresSchema.PostgresIndex> linkedList1 = new LinkedList<PostgresSchema.PostgresIndex>();
      PostgresSchema.PostgresTable.TableType postgresSchema_PostgresTable_TableType0 = PostgresSchema.PostgresTable.TableType.TEMPORARY;
      LinkedList<PostgresSchema.PostgresStatisticsObject> linkedList2 = new LinkedList<PostgresSchema.PostgresStatisticsObject>();
      PostgresSchema.PostgresTable postgresSchema_PostgresTable0 = new PostgresSchema.PostgresTable("k<K,yBc&>@G[$aU05", linkedList0, linkedList1, postgresSchema_PostgresTable_TableType0, linkedList2, false, false);
      PostgresSchema.PostgresDataType postgresSchema_PostgresDataType0 = PostgresSchema.PostgresDataType.BOOLEAN;
      PostgresSchema.PostgresColumn postgresSchema_PostgresColumn0 = new PostgresSchema.PostgresColumn("k<K,yBc&>@G[$aU05", postgresSchema_PostgresDataType0);
      CitusSchema.CitusTable citusSchema_CitusTable0 = new CitusSchema.CitusTable(postgresSchema_PostgresTable0, postgresSchema_PostgresColumn0, (Integer) null);
      citusSchema_CitusTable0.setDistributionColumn(postgresSchema_PostgresColumn0);
      assertEquals("k<K,yBc&>@G[$aU05", postgresSchema_PostgresColumn0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<PostgresSchema.PostgresColumn> linkedList0 = new LinkedList<PostgresSchema.PostgresColumn>();
      LinkedList<PostgresSchema.PostgresIndex> linkedList1 = new LinkedList<PostgresSchema.PostgresIndex>();
      PostgresSchema.PostgresTable.TableType postgresSchema_PostgresTable_TableType0 = PostgresSchema.PostgresTable.TableType.TEMPORARY;
      LinkedList<PostgresSchema.PostgresStatisticsObject> linkedList2 = new LinkedList<PostgresSchema.PostgresStatisticsObject>();
      Integer integer0 = new Integer(0);
      CitusSchema.CitusTable citusSchema_CitusTable0 = new CitusSchema.CitusTable("citus_tables", linkedList0, linkedList1, postgresSchema_PostgresTable_TableType0, linkedList2, true, true, (PostgresSchema.PostgresColumn) null, integer0);
      Integer integer1 = citusSchema_CitusTable0.getColocationId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<PostgresSchema.PostgresIndex> linkedList0 = new LinkedList<PostgresSchema.PostgresIndex>();
      PostgresSchema.PostgresTable.TableType postgresSchema_PostgresTable_TableType0 = PostgresSchema.PostgresTable.TableType.TEMPORARY;
      LinkedList<PostgresSchema.PostgresStatisticsObject> linkedList1 = new LinkedList<PostgresSchema.PostgresStatisticsObject>();
      PostgresSchema.PostgresColumn postgresSchema_PostgresColumn0 = PostgresSchema.PostgresColumn.createDummy("sqlancer.citus.CitusSchema$CitusTable");
      Integer integer0 = new Integer(1081);
      List<PostgresSchema.PostgresColumn> list0 = List.of(postgresSchema_PostgresColumn0, postgresSchema_PostgresColumn0, postgresSchema_PostgresColumn0, postgresSchema_PostgresColumn0, postgresSchema_PostgresColumn0, postgresSchema_PostgresColumn0);
      CitusSchema.CitusTable citusSchema_CitusTable0 = new CitusSchema.CitusTable("sqlancer.citus.CitusSchema$CitusTable", list0, linkedList0, postgresSchema_PostgresTable_TableType0, linkedList1, false, false, postgresSchema_PostgresColumn0, integer0);
      PostgresSchema.PostgresColumn postgresSchema_PostgresColumn1 = citusSchema_CitusTable0.getDistributionColumn();
      assertSame(postgresSchema_PostgresColumn1, postgresSchema_PostgresColumn0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<PostgresSchema.PostgresColumn> linkedList0 = new LinkedList<PostgresSchema.PostgresColumn>();
      LinkedList<PostgresSchema.PostgresIndex> linkedList1 = new LinkedList<PostgresSchema.PostgresIndex>();
      PostgresSchema.PostgresTable.TableType postgresSchema_PostgresTable_TableType0 = PostgresSchema.PostgresTable.TableType.TEMPORARY;
      LinkedList<PostgresSchema.PostgresStatisticsObject> linkedList2 = new LinkedList<PostgresSchema.PostgresStatisticsObject>();
      Integer integer0 = new Integer(0);
      CitusSchema.CitusTable citusSchema_CitusTable0 = new CitusSchema.CitusTable("citus_tables", linkedList0, linkedList1, postgresSchema_PostgresTable_TableType0, linkedList2, true, true, (PostgresSchema.PostgresColumn) null, integer0);
      citusSchema_CitusTable0.setColocationId(integer0);
      assertTrue(citusSchema_CitusTable0.isInsertable());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<CitusSchema.CitusTable> linkedList0 = new LinkedList<CitusSchema.CitusTable>();
      CitusSchema citusSchema0 = new CitusSchema(linkedList0, "\"kL>]I,");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSet1).getInt(anyString());
      doReturn("evURqMT_!|4", "<+", (String) null).when(resultSet1).getString(anyString());
      doReturn(true, true).when(resultSet1).next();
      doReturn(false).when(resultSet1).wasNull();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0, resultSet1).when(preparedStatement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      Statement statement0 = sQLConnection0.prepareStatement("\"kL>]I,");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, statement0).when(connection1).createStatement();
      SQLConnection sQLConnection1 = new SQLConnection(connection1);
      // Undeclared exception!
      try { 
        CitusSchema.fromConnection(sQLConnection1, "\"kL>]I,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
