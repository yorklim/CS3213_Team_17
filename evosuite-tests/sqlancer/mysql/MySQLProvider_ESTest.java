/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 11:53:47 GMT 2025
 */

package sqlancer.mysql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.common.query.SQLQueryAdapter;
import sqlancer.mysql.MySQLGlobalState;
import sqlancer.mysql.MySQLProvider;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MySQLProvider_ESTest extends MySQLProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
      MySQLProvider.Action mySQLProvider_Action0 = MySQLProvider.Action.SHOW_TABLES;
      SQLQueryAdapter sQLQueryAdapter0 = mySQLProvider_Action0.getQuery(mySQLGlobalState0);
      assertEquals("SHOW TABLES;", sQLQueryAdapter0.getQueryString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MySQLProvider mySQLProvider0 = new MySQLProvider();
      try { 
        mySQLProvider0.generateDatabase((MySQLGlobalState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.mysql.MySQLProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MySQLProvider mySQLProvider0 = new MySQLProvider();
      MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
      // Undeclared exception!
      try { 
        mySQLProvider0.generateDatabase(mySQLGlobalState0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MySQLProvider mySQLProvider0 = new MySQLProvider();
      MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
      // Undeclared exception!
      try { 
        mySQLProvider0.createDatabase(mySQLGlobalState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.mysql.MySQLProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MySQLProvider mySQLProvider0 = new MySQLProvider();
      try { 
        mySQLProvider0.addRowsToAllTables((MySQLGlobalState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.mysql.MySQLProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MySQLProvider mySQLProvider0 = new MySQLProvider();
      MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
      // Undeclared exception!
      try { 
        mySQLProvider0.addRowsToAllTables(mySQLGlobalState0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MySQLGlobalState mySQLGlobalState0 = new MySQLGlobalState();
      MySQLProvider.Action mySQLProvider_Action0 = MySQLProvider.Action.SELECT_INFO;
      SQLQueryAdapter sQLQueryAdapter0 = mySQLProvider_Action0.getQuery(mySQLGlobalState0);
      assertEquals("select TABLE_NAME, ENGINE from information_schema.TABLES where table_schema = 'null';", sQLQueryAdapter0.getQueryString());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MySQLProvider mySQLProvider0 = new MySQLProvider();
      String string0 = mySQLProvider0.getDBMSName();
      assertEquals("mysql", string0);
  }
}
