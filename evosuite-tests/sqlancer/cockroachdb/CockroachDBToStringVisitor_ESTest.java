/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 05:40:18 GMT 2025
 */

package sqlancer.cockroachdb;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import sqlancer.Randomly;
import sqlancer.cockroachdb.CockroachDBProvider;
import sqlancer.cockroachdb.CockroachDBSchema;
import sqlancer.cockroachdb.CockroachDBToStringVisitor;
import sqlancer.cockroachdb.ast.CockroachDBAggregate;
import sqlancer.cockroachdb.ast.CockroachDBBetweenOperation;
import sqlancer.cockroachdb.ast.CockroachDBBinaryComparisonOperator;
import sqlancer.cockroachdb.ast.CockroachDBCaseOperation;
import sqlancer.cockroachdb.ast.CockroachDBColumnReference;
import sqlancer.cockroachdb.ast.CockroachDBConstant;
import sqlancer.cockroachdb.ast.CockroachDBExpression;
import sqlancer.cockroachdb.ast.CockroachDBFunction;
import sqlancer.cockroachdb.ast.CockroachDBFunctionCall;
import sqlancer.cockroachdb.ast.CockroachDBInOperation;
import sqlancer.cockroachdb.ast.CockroachDBIndexReference;
import sqlancer.cockroachdb.ast.CockroachDBJoin;
import sqlancer.cockroachdb.ast.CockroachDBMultiValuedComparison;
import sqlancer.cockroachdb.ast.CockroachDBSelect;
import sqlancer.cockroachdb.ast.CockroachDBTableReference;
import sqlancer.cockroachdb.ast.CockroachDBUnaryArithmeticOperation;
import sqlancer.cockroachdb.gen.CockroachDBExpressionGenerator;
import sqlancer.common.schema.TableIndex;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CockroachDBToStringVisitor_ESTest extends CockroachDBToStringVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBConstant.CockroachDBIntConstant cockroachDBConstant_CockroachDBIntConstant0 = CockroachDBConstant.createIntConstant(1L);
      CockroachDBBinaryComparisonOperator.CockroachDBComparisonOperator cockroachDBBinaryComparisonOperator_CockroachDBComparisonOperator0 = CockroachDBBinaryComparisonOperator.CockroachDBComparisonOperator.EQUALS;
      CockroachDBBinaryComparisonOperator cockroachDBBinaryComparisonOperator0 = new CockroachDBBinaryComparisonOperator(cockroachDBConstant_CockroachDBIntConstant0, cockroachDBConstant_CockroachDBIntConstant0, cockroachDBBinaryComparisonOperator_CockroachDBComparisonOperator0);
      CockroachDBBinaryComparisonOperator cockroachDBBinaryComparisonOperator1 = new CockroachDBBinaryComparisonOperator(cockroachDBBinaryComparisonOperator0, cockroachDBConstant_CockroachDBIntConstant0, cockroachDBBinaryComparisonOperator_CockroachDBComparisonOperator0);
      CockroachDBBinaryComparisonOperator[] cockroachDBBinaryComparisonOperatorArray0 = new CockroachDBBinaryComparisonOperator[3];
      cockroachDBBinaryComparisonOperatorArray0[0] = cockroachDBBinaryComparisonOperator1;
      cockroachDBBinaryComparisonOperatorArray0[1] = cockroachDBBinaryComparisonOperator1;
      cockroachDBBinaryComparisonOperatorArray0[2] = cockroachDBBinaryComparisonOperator0;
      List<CockroachDBBinaryComparisonOperator> list0 = Randomly.nonEmptySubset(cockroachDBBinaryComparisonOperatorArray0);
      Randomly.subset(list0);
      List<CockroachDBBinaryComparisonOperator> list1 = Randomly.subset(cockroachDBBinaryComparisonOperatorArray0);
      List<CockroachDBExpression> list2 = List.copyOf((Collection<? extends CockroachDBExpression>) list1);
      List<CockroachDBExpression> list3 = Randomly.nonEmptySubset(list2);
      CockroachDBCaseOperation cockroachDBCaseOperation0 = new CockroachDBCaseOperation(list2, list3, cockroachDBBinaryComparisonOperator0);
      // Undeclared exception!
      try { 
        cockroachDBToStringVisitor0.visit(cockroachDBCaseOperation0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBConstant.CockroachDBBitConstant cockroachDBConstant_CockroachDBBitConstant0 = (CockroachDBConstant.CockroachDBBitConstant)CockroachDBConstant.createBitConstantWithSize((-1374));
      cockroachDBToStringVisitor0.visitSpecific((CockroachDBExpression) cockroachDBConstant_CockroachDBBitConstant0);
      assertEquals("", cockroachDBConstant_CockroachDBBitConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBConstant.CockroachDBDoubleConstant cockroachDBConstant_CockroachDBDoubleConstant0 = new CockroachDBConstant.CockroachDBDoubleConstant(0.0);
      cockroachDBToStringVisitor0.visit((CockroachDBConstant) cockroachDBConstant_CockroachDBDoubleConstant0);
      assertEquals("0.0", cockroachDBConstant_CockroachDBDoubleConstant0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CockroachDBProvider.CockroachDBGlobalState cockroachDBProvider_CockroachDBGlobalState0 = new CockroachDBProvider.CockroachDBGlobalState();
      CockroachDBExpressionGenerator cockroachDBExpressionGenerator0 = new CockroachDBExpressionGenerator(cockroachDBProvider_CockroachDBGlobalState0);
      CockroachDBSelect cockroachDBSelect0 = cockroachDBExpressionGenerator0.generateSelect();
      // Undeclared exception!
      try { 
        cockroachDBExpressionGenerator0.generateOptimizedQueryString(cockroachDBSelect0, (CockroachDBExpression) cockroachDBSelect0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBConstant.CockroachDBBitConstant cockroachDBConstant_CockroachDBBitConstant0 = new CockroachDBConstant.CockroachDBBitConstant((-206L));
      CockroachDBSelect cockroachDBSelect0 = new CockroachDBSelect();
      List<CockroachDBExpression> list0 = cockroachDBSelect0.getOrderByClauses();
      CockroachDBMultiValuedComparison.MultiValuedComparisonType cockroachDBMultiValuedComparison_MultiValuedComparisonType0 = CockroachDBMultiValuedComparison.MultiValuedComparisonType.SOME;
      CockroachDBMultiValuedComparison.MultiValuedComparisonOperator cockroachDBMultiValuedComparison_MultiValuedComparisonOperator0 = CockroachDBMultiValuedComparison.MultiValuedComparisonOperator.GREATER_EQUALS;
      CockroachDBMultiValuedComparison cockroachDBMultiValuedComparison0 = new CockroachDBMultiValuedComparison(cockroachDBConstant_CockroachDBBitConstant0, list0, cockroachDBMultiValuedComparison_MultiValuedComparisonType0, cockroachDBMultiValuedComparison_MultiValuedComparisonOperator0);
      cockroachDBToStringVisitor0.visit(cockroachDBMultiValuedComparison0);
      assertEquals(CockroachDBMultiValuedComparison.MultiValuedComparisonType.SOME, cockroachDBMultiValuedComparison0.getType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.BOOL;
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = new CockroachDBSchema.CockroachDBCompositeDataType(cockroachDBSchema_CockroachDBDataType0, 4968);
      CockroachDBSchema.CockroachDBColumn cockroachDBSchema_CockroachDBColumn0 = new CockroachDBSchema.CockroachDBColumn("Gn{ZfiCCq9L3", cockroachDBSchema_CockroachDBCompositeDataType0, false, false);
      CockroachDBColumnReference cockroachDBColumnReference0 = new CockroachDBColumnReference(cockroachDBSchema_CockroachDBColumn0);
      CockroachDBExpressionGenerator cockroachDBExpressionGenerator0 = new CockroachDBExpressionGenerator((CockroachDBProvider.CockroachDBGlobalState) null);
      List<CockroachDBExpression> list0 = cockroachDBExpressionGenerator0.generateFetchColumns(false);
      CockroachDBInOperation cockroachDBInOperation0 = new CockroachDBInOperation(cockroachDBColumnReference0, list0);
      cockroachDBToStringVisitor0.visit(cockroachDBInOperation0);
      assertEquals("(Gn{ZfiCCq9L3) IN (*)", cockroachDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = CockroachDBSchema.CockroachDBCompositeDataType.getInt(52);
      CockroachDBSchema.CockroachDBColumn cockroachDBSchema_CockroachDBColumn0 = new CockroachDBSchema.CockroachDBColumn("53hB2", cockroachDBSchema_CockroachDBCompositeDataType0, false, false);
      CockroachDBColumnReference cockroachDBColumnReference0 = new CockroachDBColumnReference(cockroachDBSchema_CockroachDBColumn0);
      CockroachDBBetweenOperation.CockroachDBBetweenOperatorType cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0 = CockroachDBBetweenOperation.CockroachDBBetweenOperatorType.BETWEEN;
      CockroachDBBetweenOperation cockroachDBBetweenOperation0 = new CockroachDBBetweenOperation(cockroachDBColumnReference0, cockroachDBColumnReference0, cockroachDBColumnReference0, cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0);
      cockroachDBToStringVisitor0.visit(cockroachDBBetweenOperation0);
      assertEquals("(53hB2) BETWEEN (53hB2) AND (53hB2)", cockroachDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBProvider.CockroachDBGlobalState cockroachDBProvider_CockroachDBGlobalState0 = new CockroachDBProvider.CockroachDBGlobalState();
      CockroachDBExpressionGenerator cockroachDBExpressionGenerator0 = new CockroachDBExpressionGenerator(cockroachDBProvider_CockroachDBGlobalState0);
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = CockroachDBSchema.CockroachDBCompositeDataType.getInt(6);
      CockroachDBAggregate.CockroachDBAggregateFunction cockroachDBAggregate_CockroachDBAggregateFunction0 = CockroachDBAggregate.CockroachDBAggregateFunction.COUNT_ROWS;
      CockroachDBAggregate cockroachDBAggregate0 = cockroachDBExpressionGenerator0.generateArgsForAggregate(cockroachDBSchema_CockroachDBCompositeDataType0, cockroachDBAggregate_CockroachDBAggregateFunction0);
      cockroachDBToStringVisitor0.visit(cockroachDBAggregate0);
      assertEquals("COUNT_ROWS()", cockroachDBToStringVisitor0.getString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = CockroachDBSchema.CockroachDBCompositeDataType.getInt(52);
      CockroachDBSchema.CockroachDBColumn cockroachDBSchema_CockroachDBColumn0 = new CockroachDBSchema.CockroachDBColumn("53hB2", cockroachDBSchema_CockroachDBCompositeDataType0, false, false);
      CockroachDBColumnReference cockroachDBColumnReference0 = new CockroachDBColumnReference(cockroachDBSchema_CockroachDBColumn0);
      cockroachDBToStringVisitor0.visit(cockroachDBColumnReference0);
      String string0 = cockroachDBToStringVisitor0.getString();
      assertEquals("53hB2", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      // Undeclared exception!
      try { 
        cockroachDBToStringVisitor0.visitSpecific((CockroachDBExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cockroachdb.CockroachDBVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CockroachDBSelect cockroachDBSelect0 = new CockroachDBSelect();
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      // Undeclared exception!
      try { 
        cockroachDBToStringVisitor0.visitSpecific((CockroachDBExpression) cockroachDBSelect0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBUnaryArithmeticOperation.CockroachDBUnaryAritmeticOperator cockroachDBUnaryArithmeticOperation_CockroachDBUnaryAritmeticOperator0 = CockroachDBUnaryArithmeticOperation.CockroachDBUnaryAritmeticOperator.PLUS;
      CockroachDBUnaryArithmeticOperation cockroachDBUnaryArithmeticOperation0 = new CockroachDBUnaryArithmeticOperation((CockroachDBExpression) null, cockroachDBUnaryArithmeticOperation_CockroachDBUnaryAritmeticOperator0);
      // Undeclared exception!
      try { 
        cockroachDBToStringVisitor0.visitSpecific((CockroachDBExpression) cockroachDBUnaryArithmeticOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // class sqlancer.cockroachdb.ast.CockroachDBUnaryArithmeticOperation
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      // Undeclared exception!
      try { 
        cockroachDBToStringVisitor0.visit((CockroachDBTableReference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cockroachdb.CockroachDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      // Undeclared exception!
      try { 
        cockroachDBToStringVisitor0.visit((CockroachDBSelect) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cockroachdb.CockroachDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      // Undeclared exception!
      try { 
        cockroachDBToStringVisitor0.visit((CockroachDBMultiValuedComparison) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cockroachdb.CockroachDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      // Undeclared exception!
      try { 
        cockroachDBToStringVisitor0.visit((CockroachDBJoin) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cockroachdb.CockroachDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CockroachDBSelect cockroachDBSelect0 = new CockroachDBSelect();
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBJoin.JoinType cockroachDBJoin_JoinType0 = CockroachDBJoin.JoinType.RIGHT;
      CockroachDBJoin cockroachDBJoin0 = CockroachDBJoin.createJoin(cockroachDBSelect0, cockroachDBSelect0, cockroachDBJoin_JoinType0, cockroachDBSelect0);
      // Undeclared exception!
      try { 
        cockroachDBToStringVisitor0.visit(cockroachDBJoin0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      // Undeclared exception!
      try { 
        cockroachDBToStringVisitor0.visit((CockroachDBInOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cockroachdb.CockroachDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      // Undeclared exception!
      try { 
        cockroachDBToStringVisitor0.visit((CockroachDBFunctionCall) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cockroachdb.CockroachDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      // Undeclared exception!
      try { 
        cockroachDBToStringVisitor0.visit((CockroachDBColumnReference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cockroachdb.CockroachDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      // Undeclared exception!
      try { 
        cockroachDBToStringVisitor0.visit((CockroachDBCaseOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cockroachdb.CockroachDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBSelect cockroachDBSelect0 = new CockroachDBSelect();
      List<CockroachDBExpression> list0 = cockroachDBSelect0.getGroupByExpressions();
      CockroachDBCaseOperation cockroachDBCaseOperation0 = new CockroachDBCaseOperation(list0, list0, cockroachDBSelect0);
      // Undeclared exception!
      try { 
        cockroachDBToStringVisitor0.visit(cockroachDBCaseOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      // Undeclared exception!
      try { 
        cockroachDBToStringVisitor0.visit((CockroachDBBetweenOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cockroachdb.CockroachDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBSelect cockroachDBSelect0 = new CockroachDBSelect();
      CockroachDBAggregate.CockroachDBAggregateFunction cockroachDBAggregate_CockroachDBAggregateFunction0 = CockroachDBAggregate.CockroachDBAggregateFunction.SUM_INT;
      CockroachDBExpression[] cockroachDBExpressionArray0 = new CockroachDBExpression[3];
      cockroachDBExpressionArray0[0] = (CockroachDBExpression) cockroachDBSelect0;
      List<CockroachDBExpression> list0 = Randomly.nonEmptySubset(cockroachDBExpressionArray0);
      CockroachDBAggregate cockroachDBAggregate0 = new CockroachDBAggregate(cockroachDBAggregate_CockroachDBAggregateFunction0, list0);
      // Undeclared exception!
      try { 
        cockroachDBToStringVisitor0.visit(cockroachDBAggregate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBSelect cockroachDBSelect0 = new CockroachDBSelect();
      // Undeclared exception!
      try { 
        cockroachDBToStringVisitor0.visit(cockroachDBSelect0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBSelect cockroachDBSelect0 = new CockroachDBSelect();
      cockroachDBSelect0.setDistinct(true);
      // Undeclared exception!
      try { 
        cockroachDBToStringVisitor0.visit(cockroachDBSelect0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBSchema.CockroachDBColumn cockroachDBSchema_CockroachDBColumn0 = new CockroachDBSchema.CockroachDBColumn("LKPj@6^?uX2", (CockroachDBSchema.CockroachDBCompositeDataType) null, true, false);
      CockroachDBColumnReference cockroachDBColumnReference0 = new CockroachDBColumnReference(cockroachDBSchema_CockroachDBColumn0);
      LinkedList<CockroachDBSchema.CockroachDBColumn> linkedList0 = new LinkedList<CockroachDBSchema.CockroachDBColumn>();
      CockroachDBSchema.CockroachDBTable cockroachDBSchema_CockroachDBTable0 = new CockroachDBSchema.CockroachDBTable("LKPj@6^?uX2", linkedList0, (List<TableIndex>) null, true);
      cockroachDBSchema_CockroachDBColumn0.setTable(cockroachDBSchema_CockroachDBTable0);
      cockroachDBToStringVisitor0.visit(cockroachDBColumnReference0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      // Undeclared exception!
      try { 
        cockroachDBToStringVisitor0.visit((CockroachDBConstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBJoin.JoinType cockroachDBJoin_JoinType0 = CockroachDBJoin.JoinType.NATURAL;
      CockroachDBConstant.CockroachDBNullConstant cockroachDBConstant_CockroachDBNullConstant0 = CockroachDBConstant.createNullConstant();
      CockroachDBJoin cockroachDBJoin0 = CockroachDBJoin.createJoin(cockroachDBConstant_CockroachDBNullConstant0, cockroachDBConstant_CockroachDBNullConstant0, cockroachDBJoin_JoinType0, cockroachDBConstant_CockroachDBNullConstant0);
      cockroachDBToStringVisitor0.visit(cockroachDBJoin0);
      assertEquals(CockroachDBJoin.JoinType.NATURAL, cockroachDBJoin0.getJoinType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBExpression cockroachDBExpression0 = CockroachDBConstant.createTimeConstant((-9223372036854775808L));
      CockroachDBJoin.JoinType cockroachDBJoin_JoinType0 = CockroachDBJoin.JoinType.CROSS;
      CockroachDBJoin cockroachDBJoin0 = new CockroachDBJoin(cockroachDBExpression0, cockroachDBExpression0, cockroachDBJoin_JoinType0, cockroachDBExpression0);
      cockroachDBToStringVisitor0.visit(cockroachDBJoin0);
      assertEquals(CockroachDBJoin.JoinType.CROSS, cockroachDBJoin0.getJoinType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBJoin.JoinType cockroachDBJoin_JoinType0 = CockroachDBJoin.JoinType.RIGHT;
      CockroachDBConstant.CockroachDBNullConstant cockroachDBConstant_CockroachDBNullConstant0 = CockroachDBConstant.createNullConstant();
      CockroachDBJoin cockroachDBJoin0 = CockroachDBJoin.createJoin(cockroachDBConstant_CockroachDBNullConstant0, cockroachDBConstant_CockroachDBNullConstant0, cockroachDBJoin_JoinType0, cockroachDBConstant_CockroachDBNullConstant0);
      cockroachDBToStringVisitor0.visit(cockroachDBJoin0);
      assertEquals(CockroachDBJoin.JoinType.RIGHT, cockroachDBJoin0.getJoinType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBExpression cockroachDBExpression0 = CockroachDBConstant.createTimeConstant((-9223372036854775808L));
      CockroachDBJoin.JoinType cockroachDBJoin_JoinType0 = CockroachDBJoin.JoinType.INNER;
      CockroachDBJoin cockroachDBJoin0 = new CockroachDBJoin(cockroachDBExpression0, cockroachDBExpression0, cockroachDBJoin_JoinType0, cockroachDBExpression0);
      cockroachDBToStringVisitor0.visit(cockroachDBJoin0);
      assertEquals(CockroachDBJoin.JoinType.INNER, cockroachDBJoin0.getJoinType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBProvider.CockroachDBGlobalState cockroachDBProvider_CockroachDBGlobalState0 = new CockroachDBProvider.CockroachDBGlobalState();
      CockroachDBExpressionGenerator cockroachDBExpressionGenerator0 = new CockroachDBExpressionGenerator(cockroachDBProvider_CockroachDBGlobalState0);
      CockroachDBSelect cockroachDBSelect0 = cockroachDBExpressionGenerator0.generateSelect();
      List<CockroachDBExpression> list0 = cockroachDBSelect0.getGroupByExpressions();
      CockroachDBCaseOperation cockroachDBCaseOperation0 = new CockroachDBCaseOperation(list0, list0, (CockroachDBExpression) null);
      cockroachDBToStringVisitor0.visit(cockroachDBCaseOperation0);
      assertEquals("CASE END", cockroachDBToStringVisitor0.getString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBConstant.CockroachDBNullConstant cockroachDBConstant_CockroachDBNullConstant0 = new CockroachDBConstant.CockroachDBNullConstant();
      List<CockroachDBExpression> list0 = List.of((CockroachDBExpression) cockroachDBConstant_CockroachDBNullConstant0, (CockroachDBExpression) cockroachDBConstant_CockroachDBNullConstant0);
      CockroachDBCaseOperation cockroachDBCaseOperation0 = new CockroachDBCaseOperation(list0, list0, cockroachDBConstant_CockroachDBNullConstant0);
      cockroachDBToStringVisitor0.visit(cockroachDBCaseOperation0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBJoin.JoinType cockroachDBJoin_JoinType0 = CockroachDBJoin.JoinType.FULL;
      CockroachDBSchema.CockroachDBColumn cockroachDBSchema_CockroachDBColumn0 = new CockroachDBSchema.CockroachDBColumn("r", (CockroachDBSchema.CockroachDBCompositeDataType) null, false, false);
      CockroachDBColumnReference cockroachDBColumnReference0 = new CockroachDBColumnReference(cockroachDBSchema_CockroachDBColumn0);
      CockroachDBSchema.CockroachDBTable cockroachDBSchema_CockroachDBTable0 = mock(CockroachDBSchema.CockroachDBTable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(cockroachDBSchema_CockroachDBTable0).getName();
      CockroachDBTableReference cockroachDBTableReference0 = new CockroachDBTableReference(cockroachDBSchema_CockroachDBTable0);
      TableIndex tableIndex0 = TableIndex.create("|XP/d4e>|I3f~E|");
      CockroachDBIndexReference cockroachDBIndexReference0 = new CockroachDBIndexReference(cockroachDBTableReference0, tableIndex0);
      CockroachDBSchema.CockroachDBTable cockroachDBSchema_CockroachDBTable1 = cockroachDBIndexReference0.getTable();
      cockroachDBSchema_CockroachDBColumn0.setTable(cockroachDBSchema_CockroachDBTable1);
      CockroachDBJoin cockroachDBJoin0 = new CockroachDBJoin(cockroachDBColumnReference0, cockroachDBColumnReference0, cockroachDBJoin_JoinType0, cockroachDBColumnReference0);
      cockroachDBToStringVisitor0.visit(cockroachDBJoin0);
      assertEquals("null.r FULL OUTER HASH JOIN null.r ON null.r", cockroachDBToStringVisitor0.getString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CockroachDBSelect cockroachDBSelect0 = new CockroachDBSelect();
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBMultiValuedComparison.MultiValuedComparisonType cockroachDBMultiValuedComparison_MultiValuedComparisonType0 = CockroachDBMultiValuedComparison.MultiValuedComparisonType.ANY;
      CockroachDBMultiValuedComparison.MultiValuedComparisonOperator cockroachDBMultiValuedComparison_MultiValuedComparisonOperator0 = CockroachDBMultiValuedComparison.MultiValuedComparisonOperator.EQUALS;
      CockroachDBMultiValuedComparison cockroachDBMultiValuedComparison0 = new CockroachDBMultiValuedComparison(cockroachDBSelect0, (List<CockroachDBExpression>) null, cockroachDBMultiValuedComparison_MultiValuedComparisonType0, cockroachDBMultiValuedComparison_MultiValuedComparisonOperator0);
      // Undeclared exception!
      try { 
        cockroachDBToStringVisitor0.visit(cockroachDBMultiValuedComparison0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      String string0 = cockroachDBToStringVisitor0.getString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBExpression cockroachDBExpression0 = CockroachDBConstant.createTimestampConstant((-211L));
      CockroachDBJoin.JoinType cockroachDBJoin_JoinType0 = CockroachDBJoin.JoinType.LEFT;
      CockroachDBJoin cockroachDBJoin0 = new CockroachDBJoin(cockroachDBExpression0, cockroachDBExpression0, cockroachDBJoin_JoinType0, cockroachDBExpression0);
      cockroachDBToStringVisitor0.visit(cockroachDBJoin0);
      assertEquals(CockroachDBJoin.JoinType.LEFT, cockroachDBJoin0.getJoinType());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBSchema.CockroachDBColumn cockroachDBSchema_CockroachDBColumn0 = new CockroachDBSchema.CockroachDBColumn("*9(U", (CockroachDBSchema.CockroachDBCompositeDataType) null, true, false);
      List<CockroachDBSchema.CockroachDBColumn> list0 = List.of(cockroachDBSchema_CockroachDBColumn0, cockroachDBSchema_CockroachDBColumn0, cockroachDBSchema_CockroachDBColumn0, cockroachDBSchema_CockroachDBColumn0, cockroachDBSchema_CockroachDBColumn0, cockroachDBSchema_CockroachDBColumn0, cockroachDBSchema_CockroachDBColumn0);
      CockroachDBSchema.CockroachDBTable cockroachDBSchema_CockroachDBTable0 = new CockroachDBSchema.CockroachDBTable("*9(U", list0, (List<TableIndex>) null, false);
      CockroachDBTableReference cockroachDBTableReference0 = new CockroachDBTableReference(cockroachDBSchema_CockroachDBTable0);
      cockroachDBToStringVisitor0.visit(cockroachDBTableReference0);
      assertEquals("*9(U", cockroachDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBSelect cockroachDBSelect0 = new CockroachDBSelect();
      CockroachDBBetweenOperation.CockroachDBBetweenOperatorType cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0 = CockroachDBBetweenOperation.CockroachDBBetweenOperatorType.NOT_BETWEEN;
      CockroachDBBetweenOperation cockroachDBBetweenOperation0 = new CockroachDBBetweenOperation(cockroachDBSelect0, cockroachDBSelect0, cockroachDBSelect0, cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0);
      // Undeclared exception!
      try { 
        cockroachDBToStringVisitor0.visit(cockroachDBBetweenOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CockroachDBSelect cockroachDBSelect0 = new CockroachDBSelect();
      List<CockroachDBExpression> list0 = cockroachDBSelect0.getGroupByExpressions();
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBInOperation cockroachDBInOperation0 = new CockroachDBInOperation(cockroachDBSelect0, list0);
      // Undeclared exception!
      try { 
        cockroachDBToStringVisitor0.visit(cockroachDBInOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBFunction cockroachDBFunction0 = CockroachDBFunction.LEFT1;
      CockroachDBProvider.CockroachDBGlobalState cockroachDBProvider_CockroachDBGlobalState0 = new CockroachDBProvider.CockroachDBGlobalState();
      CockroachDBExpressionGenerator cockroachDBExpressionGenerator0 = new CockroachDBExpressionGenerator(cockroachDBProvider_CockroachDBGlobalState0);
      CockroachDBSelect cockroachDBSelect0 = cockroachDBExpressionGenerator0.generateSelect();
      List<CockroachDBExpression> list0 = cockroachDBSelect0.getGroupByClause();
      CockroachDBFunctionCall cockroachDBFunctionCall0 = new CockroachDBFunctionCall(cockroachDBFunction0, list0);
      cockroachDBToStringVisitor0.visit(cockroachDBFunctionCall0);
      assertEquals("LEFT()", cockroachDBToStringVisitor0.getString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CockroachDBToStringVisitor cockroachDBToStringVisitor0 = new CockroachDBToStringVisitor();
      CockroachDBAggregate.CockroachDBAggregateFunction cockroachDBAggregate_CockroachDBAggregateFunction0 = CockroachDBAggregate.CockroachDBAggregateFunction.SUM_INT;
      CockroachDBExpression[] cockroachDBExpressionArray0 = new CockroachDBExpression[3];
      List<CockroachDBExpression> list0 = Randomly.nonEmptySubset(cockroachDBExpressionArray0);
      CockroachDBAggregate cockroachDBAggregate0 = new CockroachDBAggregate(cockroachDBAggregate_CockroachDBAggregateFunction0, list0);
      // Undeclared exception!
      try { 
        cockroachDBToStringVisitor0.visit(cockroachDBAggregate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cockroachdb.CockroachDBVisitor", e);
      }
  }
}
