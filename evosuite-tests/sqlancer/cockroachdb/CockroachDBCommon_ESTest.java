/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 05:11:47 GMT 2025
 */

package sqlancer.cockroachdb;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.cockroachdb.CockroachDBCommon;
import sqlancer.cockroachdb.CockroachDBSchema;
import sqlancer.cockroachdb.ast.CockroachDBExpression;
import sqlancer.cockroachdb.ast.CockroachDBTableReference;
import sqlancer.common.schema.TableIndex;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CockroachDBCommon_ESTest extends CockroachDBCommon_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<CockroachDBTableReference> linkedList0 = new LinkedList<CockroachDBTableReference>();
      List<CockroachDBExpression> list0 = CockroachDBCommon.getTableReferences(linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CockroachDBTableReference cockroachDBTableReference0 = new CockroachDBTableReference((CockroachDBSchema.CockroachDBTable) null);
      List<CockroachDBTableReference> list0 = List.of(cockroachDBTableReference0, cockroachDBTableReference0, cockroachDBTableReference0, cockroachDBTableReference0, cockroachDBTableReference0, cockroachDBTableReference0, cockroachDBTableReference0, cockroachDBTableReference0, cockroachDBTableReference0);
      // Undeclared exception!
      try { 
        CockroachDBCommon.getTableReferences(list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cockroachdb.CockroachDBCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<CockroachDBSchema.CockroachDBColumn> linkedList0 = new LinkedList<CockroachDBSchema.CockroachDBColumn>();
      LinkedList<TableIndex> linkedList1 = new LinkedList<TableIndex>();
      TableIndex tableIndex0 = TableIndex.create("en");
      linkedList1.add(tableIndex0);
      CockroachDBSchema.CockroachDBTable cockroachDBSchema_CockroachDBTable0 = new CockroachDBSchema.CockroachDBTable("en", linkedList0, linkedList1, true);
      CockroachDBTableReference cockroachDBTableReference0 = new CockroachDBTableReference(cockroachDBSchema_CockroachDBTable0);
      List<CockroachDBTableReference> list0 = List.of(cockroachDBTableReference0, cockroachDBTableReference0, cockroachDBTableReference0, cockroachDBTableReference0);
      List<CockroachDBExpression> list1 = CockroachDBCommon.getTableReferences(list0);
      assertFalse(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<CockroachDBSchema.CockroachDBColumn> linkedList0 = new LinkedList<CockroachDBSchema.CockroachDBColumn>();
      LinkedList<TableIndex> linkedList1 = new LinkedList<TableIndex>();
      CockroachDBSchema.CockroachDBTable cockroachDBSchema_CockroachDBTable0 = new CockroachDBSchema.CockroachDBTable("en", linkedList0, linkedList1, true);
      CockroachDBTableReference cockroachDBTableReference0 = new CockroachDBTableReference(cockroachDBSchema_CockroachDBTable0);
      List<CockroachDBTableReference> list0 = List.of(cockroachDBTableReference0, cockroachDBTableReference0, cockroachDBTableReference0, cockroachDBTableReference0);
      List<CockroachDBExpression> list1 = CockroachDBCommon.getTableReferences(list0);
      assertEquals(4, list1.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = CockroachDBCommon.getRandomCollate();
      assertEquals("en", string0);
      assertNotNull(string0);
      
      LinkedList<CockroachDBSchema.CockroachDBColumn> linkedList0 = new LinkedList<CockroachDBSchema.CockroachDBColumn>();
      LinkedList<TableIndex> linkedList1 = new LinkedList<TableIndex>();
      TableIndex tableIndex0 = TableIndex.create("en");
      linkedList1.add(tableIndex0);
      CockroachDBSchema.CockroachDBTable cockroachDBSchema_CockroachDBTable0 = new CockroachDBSchema.CockroachDBTable("en", linkedList0, linkedList1, true);
      CockroachDBTableReference cockroachDBTableReference0 = new CockroachDBTableReference(cockroachDBSchema_CockroachDBTable0);
      List<CockroachDBTableReference> list0 = List.of(cockroachDBTableReference0, cockroachDBTableReference0, cockroachDBTableReference0, cockroachDBTableReference0);
      List<CockroachDBExpression> list1 = CockroachDBCommon.getTableReferences(list0);
      assertEquals(4, list1.size());
  }
}
