/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 05:36:50 GMT 2025
 */

package sqlancer.cockroachdb.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import sqlancer.cockroachdb.CockroachDBSchema;
import sqlancer.cockroachdb.ast.CockroachDBTableReference;
import sqlancer.common.schema.TableIndex;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CockroachDBTableReference_ESTest extends CockroachDBTableReference_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CockroachDBTableReference cockroachDBTableReference0 = new CockroachDBTableReference((CockroachDBSchema.CockroachDBTable) null);
      CockroachDBSchema.CockroachDBTable cockroachDBSchema_CockroachDBTable0 = cockroachDBTableReference0.getTable();
      assertNull(cockroachDBSchema_CockroachDBTable0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CockroachDBSchema.CockroachDBColumn cockroachDBSchema_CockroachDBColumn0 = mock(CockroachDBSchema.CockroachDBColumn.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(cockroachDBSchema_CockroachDBColumn0).toString();
      List<CockroachDBSchema.CockroachDBColumn> list0 = List.of(cockroachDBSchema_CockroachDBColumn0, cockroachDBSchema_CockroachDBColumn0);
      LinkedList<TableIndex> linkedList0 = new LinkedList<TableIndex>();
      CockroachDBSchema.CockroachDBTable cockroachDBSchema_CockroachDBTable0 = new CockroachDBSchema.CockroachDBTable("A_m)n'", list0, linkedList0, false);
      CockroachDBTableReference cockroachDBTableReference0 = new CockroachDBTableReference(cockroachDBSchema_CockroachDBTable0);
      CockroachDBSchema.CockroachDBTable cockroachDBSchema_CockroachDBTable1 = cockroachDBTableReference0.getTable();
      assertEquals("A_m)n'", cockroachDBSchema_CockroachDBTable1.getName());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<CockroachDBSchema.CockroachDBColumn> linkedList0 = new LinkedList<CockroachDBSchema.CockroachDBColumn>();
      LinkedList<TableIndex> linkedList1 = new LinkedList<TableIndex>();
      CockroachDBSchema.CockroachDBTable cockroachDBSchema_CockroachDBTable0 = new CockroachDBSchema.CockroachDBTable((String) null, linkedList0, linkedList1, true);
      CockroachDBTableReference cockroachDBTableReference0 = new CockroachDBTableReference(cockroachDBSchema_CockroachDBTable0);
      linkedList1.add((TableIndex) null);
      CockroachDBSchema.CockroachDBTable cockroachDBSchema_CockroachDBTable1 = cockroachDBTableReference0.getTable();
      assertTrue(cockroachDBSchema_CockroachDBTable1.isView());
  }
}
