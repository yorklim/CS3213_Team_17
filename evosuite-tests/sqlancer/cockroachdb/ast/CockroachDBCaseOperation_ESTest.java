/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 05:51:24 GMT 2025
 */

package sqlancer.cockroachdb.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.cockroachdb.CockroachDBProvider;
import sqlancer.cockroachdb.CockroachDBSchema;
import sqlancer.cockroachdb.ast.CockroachDBCaseOperation;
import sqlancer.cockroachdb.ast.CockroachDBCast;
import sqlancer.cockroachdb.ast.CockroachDBConstant;
import sqlancer.cockroachdb.ast.CockroachDBExpression;
import sqlancer.cockroachdb.ast.CockroachDBJoin;
import sqlancer.cockroachdb.ast.CockroachDBSelect;
import sqlancer.cockroachdb.gen.CockroachDBExpressionGenerator;
import sqlancer.common.schema.AbstractTables;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CockroachDBCaseOperation_ESTest extends CockroachDBCaseOperation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CockroachDBConstant.CockroachDBArrayConstant cockroachDBConstant_CockroachDBArrayConstant0 = new CockroachDBConstant.CockroachDBArrayConstant((List<CockroachDBExpression>) null);
      CockroachDBCaseOperation cockroachDBCaseOperation0 = new CockroachDBCaseOperation((List<CockroachDBExpression>) null, (List<CockroachDBExpression>) null, cockroachDBConstant_CockroachDBArrayConstant0);
      List<CockroachDBExpression> list0 = cockroachDBCaseOperation0.getThenClauses();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<CockroachDBExpression> linkedList0 = new LinkedList<CockroachDBExpression>();
      CockroachDBConstant cockroachDBConstant0 = CockroachDBConstant.createBooleanConstant(true);
      CockroachDBCaseOperation cockroachDBCaseOperation0 = new CockroachDBCaseOperation(linkedList0, linkedList0, cockroachDBConstant0);
      CockroachDBExpressionGenerator cockroachDBExpressionGenerator0 = new CockroachDBExpressionGenerator((CockroachDBProvider.CockroachDBGlobalState) null);
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.TIMETZ;
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = new CockroachDBSchema.CockroachDBCompositeDataType(cockroachDBSchema_CockroachDBDataType0, (-1088));
      List<CockroachDBExpression> list0 = cockroachDBExpressionGenerator0.generateExpressions(cockroachDBSchema_CockroachDBCompositeDataType0, (-1088));
      CockroachDBCaseOperation cockroachDBCaseOperation1 = new CockroachDBCaseOperation(linkedList0, list0, cockroachDBCaseOperation0);
      List<CockroachDBExpression> list1 = cockroachDBCaseOperation1.getThenClauses();
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CockroachDBSelect cockroachDBSelect0 = new CockroachDBSelect();
      CockroachDBJoin.JoinType cockroachDBJoin_JoinType0 = CockroachDBJoin.JoinType.RIGHT;
      CockroachDBJoin cockroachDBJoin0 = new CockroachDBJoin(cockroachDBSelect0, cockroachDBSelect0, cockroachDBJoin_JoinType0, cockroachDBSelect0);
      List<CockroachDBJoin> list0 = List.of(cockroachDBJoin0, cockroachDBJoin0, cockroachDBJoin0, cockroachDBJoin0, cockroachDBJoin0, cockroachDBJoin0, cockroachDBJoin0, cockroachDBJoin0, cockroachDBJoin0);
      cockroachDBSelect0.setJoinClauses(list0);
      List<CockroachDBExpression> list1 = cockroachDBSelect0.getJoinList();
      CockroachDBCaseOperation cockroachDBCaseOperation0 = new CockroachDBCaseOperation((List<CockroachDBExpression>) null, list1, cockroachDBSelect0);
      List<CockroachDBExpression> list2 = cockroachDBCaseOperation0.getThenClauses();
      assertSame(list2, list1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<CockroachDBExpression> linkedList0 = new LinkedList<CockroachDBExpression>();
      CockroachDBCaseOperation cockroachDBCaseOperation0 = new CockroachDBCaseOperation(linkedList0, linkedList0, (CockroachDBExpression) null);
      CockroachDBExpression cockroachDBExpression0 = cockroachDBCaseOperation0.getElseClause();
      assertNull(cockroachDBExpression0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CockroachDBConstant.CockroachDBArrayConstant cockroachDBConstant_CockroachDBArrayConstant0 = new CockroachDBConstant.CockroachDBArrayConstant((List<CockroachDBExpression>) null);
      CockroachDBCaseOperation cockroachDBCaseOperation0 = new CockroachDBCaseOperation((List<CockroachDBExpression>) null, (List<CockroachDBExpression>) null, cockroachDBConstant_CockroachDBArrayConstant0);
      List<CockroachDBExpression> list0 = cockroachDBCaseOperation0.getConditions();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<CockroachDBExpression> linkedList0 = new LinkedList<CockroachDBExpression>();
      CockroachDBConstant cockroachDBConstant0 = CockroachDBConstant.createBooleanConstant(true);
      CockroachDBCaseOperation cockroachDBCaseOperation0 = new CockroachDBCaseOperation(linkedList0, linkedList0, cockroachDBConstant0);
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = CockroachDBSchema.CockroachDBCompositeDataType.getBit((-2238));
      CockroachDBCast cockroachDBCast0 = new CockroachDBCast(cockroachDBCaseOperation0, cockroachDBSchema_CockroachDBCompositeDataType0);
      linkedList0.offer(cockroachDBCast0);
      List<CockroachDBExpression> list0 = cockroachDBCaseOperation0.getConditions();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CockroachDBProvider.CockroachDBGlobalState cockroachDBProvider_CockroachDBGlobalState0 = new CockroachDBProvider.CockroachDBGlobalState();
      CockroachDBExpressionGenerator cockroachDBExpressionGenerator0 = new CockroachDBExpressionGenerator(cockroachDBProvider_CockroachDBGlobalState0);
      LinkedList<CockroachDBSchema.CockroachDBTable> linkedList0 = new LinkedList<CockroachDBSchema.CockroachDBTable>();
      AbstractTables<CockroachDBSchema.CockroachDBTable, CockroachDBSchema.CockroachDBColumn> abstractTables0 = new AbstractTables<CockroachDBSchema.CockroachDBTable, CockroachDBSchema.CockroachDBColumn>(linkedList0);
      CockroachDBExpressionGenerator cockroachDBExpressionGenerator1 = cockroachDBExpressionGenerator0.setTablesAndColumns(abstractTables0);
      List<CockroachDBExpression> list0 = cockroachDBExpressionGenerator1.getTableRefs();
      CockroachDBConstant.CockroachDBArrayConstant cockroachDBConstant_CockroachDBArrayConstant0 = new CockroachDBConstant.CockroachDBArrayConstant(list0);
      CockroachDBCaseOperation cockroachDBCaseOperation0 = new CockroachDBCaseOperation(list0, list0, cockroachDBConstant_CockroachDBArrayConstant0);
      List<CockroachDBExpression> list1 = cockroachDBCaseOperation0.getConditions();
      assertSame(list0, list1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedList<CockroachDBExpression> linkedList0 = new LinkedList<CockroachDBExpression>();
      CockroachDBConstant cockroachDBConstant0 = CockroachDBConstant.createBooleanConstant(true);
      CockroachDBCaseOperation cockroachDBCaseOperation0 = new CockroachDBCaseOperation(linkedList0, linkedList0, cockroachDBConstant0);
      CockroachDBExpression cockroachDBExpression0 = cockroachDBCaseOperation0.getElseClause();
      assertSame(cockroachDBConstant0, cockroachDBExpression0);
  }
}
