/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 05:42:45 GMT 2025
 */

package sqlancer.cockroachdb.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.cockroachdb.ast.CockroachDBBetweenOperation;
import sqlancer.cockroachdb.ast.CockroachDBBinaryArithmeticOperation;
import sqlancer.cockroachdb.ast.CockroachDBConcatOperation;
import sqlancer.cockroachdb.ast.CockroachDBConstant;
import sqlancer.cockroachdb.ast.CockroachDBExpression;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CockroachDBBetweenOperation_ESTest extends CockroachDBBetweenOperation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CockroachDBConcatOperation cockroachDBConcatOperation0 = new CockroachDBConcatOperation((CockroachDBExpression) null, (CockroachDBExpression) null);
      CockroachDBBetweenOperation.CockroachDBBetweenOperatorType cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0 = CockroachDBBetweenOperation.CockroachDBBetweenOperatorType.BETWEEN_SYMMETRIC;
      CockroachDBBetweenOperation cockroachDBBetweenOperation0 = new CockroachDBBetweenOperation((CockroachDBExpression) null, cockroachDBConcatOperation0, cockroachDBConcatOperation0, cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0);
      assertEquals(CockroachDBBetweenOperation.CockroachDBBetweenOperatorType.BETWEEN_SYMMETRIC, cockroachDBBetweenOperation0.getType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CockroachDBBetweenOperation.CockroachDBBetweenOperatorType cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0 = CockroachDBBetweenOperation.CockroachDBBetweenOperatorType.BETWEEN;
      CockroachDBBetweenOperation cockroachDBBetweenOperation0 = new CockroachDBBetweenOperation((CockroachDBExpression) null, (CockroachDBExpression) null, (CockroachDBExpression) null, cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0);
      CockroachDBBetweenOperation.CockroachDBBetweenOperatorType cockroachDBBetweenOperation_CockroachDBBetweenOperatorType1 = cockroachDBBetweenOperation0.getType();
      assertEquals("BETWEEN", cockroachDBBetweenOperation_CockroachDBBetweenOperatorType1.getStringRepresentation());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CockroachDBConstant.CockroachDBDoubleConstant cockroachDBConstant_CockroachDBDoubleConstant0 = CockroachDBConstant.createFloatConstant(1802.3852491793145);
      CockroachDBBinaryArithmeticOperation.CockroachDBBinaryArithmeticOperator cockroachDBBinaryArithmeticOperation_CockroachDBBinaryArithmeticOperator0 = CockroachDBBinaryArithmeticOperation.CockroachDBBinaryArithmeticOperator.DIV;
      CockroachDBBinaryArithmeticOperation cockroachDBBinaryArithmeticOperation0 = new CockroachDBBinaryArithmeticOperation(cockroachDBConstant_CockroachDBDoubleConstant0, cockroachDBConstant_CockroachDBDoubleConstant0, cockroachDBBinaryArithmeticOperation_CockroachDBBinaryArithmeticOperator0);
      CockroachDBBetweenOperation.CockroachDBBetweenOperatorType cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0 = CockroachDBBetweenOperation.CockroachDBBetweenOperatorType.NOT_BETWEEN;
      CockroachDBBetweenOperation cockroachDBBetweenOperation0 = new CockroachDBBetweenOperation(cockroachDBBinaryArithmeticOperation0, cockroachDBBinaryArithmeticOperation0, cockroachDBConstant_CockroachDBDoubleConstant0, cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0);
      CockroachDBConstant.CockroachDBDoubleConstant cockroachDBConstant_CockroachDBDoubleConstant1 = (CockroachDBConstant.CockroachDBDoubleConstant)cockroachDBBetweenOperation0.getRight();
      assertEquals(1802.3852491793145, cockroachDBConstant_CockroachDBDoubleConstant1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CockroachDBConstant.CockroachDBDoubleConstant cockroachDBConstant_CockroachDBDoubleConstant0 = CockroachDBConstant.createFloatConstant(1802.3852491793145);
      CockroachDBBinaryArithmeticOperation.CockroachDBBinaryArithmeticOperator cockroachDBBinaryArithmeticOperation_CockroachDBBinaryArithmeticOperator0 = CockroachDBBinaryArithmeticOperation.CockroachDBBinaryArithmeticOperator.DIV;
      CockroachDBBinaryArithmeticOperation cockroachDBBinaryArithmeticOperation0 = new CockroachDBBinaryArithmeticOperation(cockroachDBConstant_CockroachDBDoubleConstant0, cockroachDBConstant_CockroachDBDoubleConstant0, cockroachDBBinaryArithmeticOperation_CockroachDBBinaryArithmeticOperator0);
      CockroachDBBetweenOperation.CockroachDBBetweenOperatorType cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0 = CockroachDBBetweenOperation.CockroachDBBetweenOperatorType.NOT_BETWEEN;
      CockroachDBBetweenOperation cockroachDBBetweenOperation0 = new CockroachDBBetweenOperation(cockroachDBBinaryArithmeticOperation0, cockroachDBBinaryArithmeticOperation0, cockroachDBConstant_CockroachDBDoubleConstant0, cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0);
      CockroachDBBinaryArithmeticOperation cockroachDBBinaryArithmeticOperation1 = (CockroachDBBinaryArithmeticOperation)cockroachDBBetweenOperation0.getLeft();
      assertEquals("/", cockroachDBBinaryArithmeticOperation1.getOperatorRepresentation());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CockroachDBConstant.CockroachDBBitConstant cockroachDBConstant_CockroachDBBitConstant0 = new CockroachDBConstant.CockroachDBBitConstant("0Uz$&;6G");
      CockroachDBBetweenOperation.CockroachDBBetweenOperatorType cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0 = CockroachDBBetweenOperation.CockroachDBBetweenOperatorType.BETWEEN_SYMMETRIC;
      CockroachDBBetweenOperation cockroachDBBetweenOperation0 = new CockroachDBBetweenOperation(cockroachDBConstant_CockroachDBBitConstant0, cockroachDBConstant_CockroachDBBitConstant0, cockroachDBConstant_CockroachDBBitConstant0, cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0);
      CockroachDBExpression cockroachDBExpression0 = cockroachDBBetweenOperation0.getExpr();
      assertSame(cockroachDBConstant_CockroachDBBitConstant0, cockroachDBExpression0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CockroachDBBetweenOperation.CockroachDBBetweenOperatorType cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0 = CockroachDBBetweenOperation.CockroachDBBetweenOperatorType.BETWEEN;
      CockroachDBBetweenOperation cockroachDBBetweenOperation0 = new CockroachDBBetweenOperation((CockroachDBExpression) null, (CockroachDBExpression) null, (CockroachDBExpression) null, cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0);
      CockroachDBExpression cockroachDBExpression0 = cockroachDBBetweenOperation0.getExpr();
      assertNull(cockroachDBExpression0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CockroachDBBetweenOperation.CockroachDBBetweenOperatorType cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0 = CockroachDBBetweenOperation.CockroachDBBetweenOperatorType.BETWEEN;
      CockroachDBBetweenOperation cockroachDBBetweenOperation0 = new CockroachDBBetweenOperation((CockroachDBExpression) null, (CockroachDBExpression) null, (CockroachDBExpression) null, cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0);
      CockroachDBExpression cockroachDBExpression0 = cockroachDBBetweenOperation0.getRight();
      assertNull(cockroachDBExpression0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CockroachDBBetweenOperation.CockroachDBBetweenOperatorType cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0 = CockroachDBBetweenOperation.CockroachDBBetweenOperatorType.BETWEEN;
      CockroachDBBetweenOperation cockroachDBBetweenOperation0 = new CockroachDBBetweenOperation((CockroachDBExpression) null, (CockroachDBExpression) null, (CockroachDBExpression) null, cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0);
      CockroachDBExpression cockroachDBExpression0 = cockroachDBBetweenOperation0.getLeft();
      assertNull(cockroachDBExpression0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CockroachDBConstant.CockroachDBNullConstant cockroachDBConstant_CockroachDBNullConstant0 = new CockroachDBConstant.CockroachDBNullConstant();
      CockroachDBBetweenOperation cockroachDBBetweenOperation0 = new CockroachDBBetweenOperation(cockroachDBConstant_CockroachDBNullConstant0, cockroachDBConstant_CockroachDBNullConstant0, cockroachDBConstant_CockroachDBNullConstant0, (CockroachDBBetweenOperation.CockroachDBBetweenOperatorType) null);
      cockroachDBBetweenOperation0.getType();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CockroachDBBetweenOperation.CockroachDBBetweenOperatorType cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0 = CockroachDBBetweenOperation.CockroachDBBetweenOperatorType.getRandom();
      assertEquals(CockroachDBBetweenOperation.CockroachDBBetweenOperatorType.BETWEEN, cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CockroachDBBetweenOperation.CockroachDBBetweenOperatorType cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0 = CockroachDBBetweenOperation.CockroachDBBetweenOperatorType.BETWEEN;
      String string0 = cockroachDBBetweenOperation_CockroachDBBetweenOperatorType0.getStringRepresentation();
      assertEquals("BETWEEN", string0);
  }
}
