/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 05:25:43 GMT 2025
 */

package sqlancer.cockroachdb.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.cockroachdb.CockroachDBProvider;
import sqlancer.cockroachdb.CockroachDBSchema;
import sqlancer.cockroachdb.ast.CockroachDBAggregate;
import sqlancer.cockroachdb.ast.CockroachDBConstant;
import sqlancer.cockroachdb.ast.CockroachDBExpression;
import sqlancer.cockroachdb.ast.CockroachDBSelect;
import sqlancer.cockroachdb.gen.CockroachDBExpressionGenerator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CockroachDBAggregate_ESTest extends CockroachDBAggregate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CockroachDBAggregate.CockroachDBAggregateFunction cockroachDBAggregate_CockroachDBAggregateFunction0 = CockroachDBAggregate.CockroachDBAggregateFunction.STRING_AGG;
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.INTERVAL;
      boolean boolean0 = cockroachDBAggregate_CockroachDBAggregateFunction0.supportsReturnType(cockroachDBSchema_CockroachDBDataType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CockroachDBAggregate.CockroachDBAggregateFunction cockroachDBAggregate_CockroachDBAggregateFunction0 = CockroachDBAggregate.CockroachDBAggregateFunction.STDDEV;
      LinkedList<CockroachDBExpression> linkedList0 = new LinkedList<CockroachDBExpression>();
      CockroachDBConstant.CockroachDBNullConstant cockroachDBConstant_CockroachDBNullConstant0 = new CockroachDBConstant.CockroachDBNullConstant();
      linkedList0.add((CockroachDBExpression) cockroachDBConstant_CockroachDBNullConstant0);
      CockroachDBAggregate cockroachDBAggregate0 = new CockroachDBAggregate(cockroachDBAggregate_CockroachDBAggregateFunction0, linkedList0);
      List<CockroachDBExpression> list0 = cockroachDBAggregate0.getExpr();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CockroachDBAggregate.CockroachDBAggregateFunction cockroachDBAggregate_CockroachDBAggregateFunction0 = CockroachDBAggregate.CockroachDBAggregateFunction.STRING_AGG;
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = cockroachDBAggregate_CockroachDBAggregateFunction0.getRandomReturnType();
      assertEquals(CockroachDBSchema.CockroachDBDataType.STRING, cockroachDBSchema_CockroachDBDataType0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CockroachDBAggregate.CockroachDBAggregateFunction cockroachDBAggregate_CockroachDBAggregateFunction0 = CockroachDBAggregate.CockroachDBAggregateFunction.MAX;
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = cockroachDBAggregate_CockroachDBAggregateFunction0.getRandomReturnType();
      List<CockroachDBAggregate.CockroachDBAggregateFunction> list0 = CockroachDBAggregate.CockroachDBAggregateFunction.getAggregates(cockroachDBSchema_CockroachDBDataType0);
      assertEquals(13, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CockroachDBAggregate.CockroachDBAggregateFunction cockroachDBAggregate_CockroachDBAggregateFunction0 = CockroachDBAggregate.CockroachDBAggregateFunction.COUNT;
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.TIMETZ;
      List<CockroachDBSchema.CockroachDBDataType> list0 = cockroachDBAggregate_CockroachDBAggregateFunction0.getTypes(cockroachDBSchema_CockroachDBDataType0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CockroachDBAggregate.CockroachDBAggregateFunction cockroachDBAggregate_CockroachDBAggregateFunction0 = CockroachDBAggregate.CockroachDBAggregateFunction.STRING_AGG;
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.INTERVAL;
      List<CockroachDBSchema.CockroachDBDataType> list0 = cockroachDBAggregate_CockroachDBAggregateFunction0.getTypes(cockroachDBSchema_CockroachDBDataType0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.TIME;
      CockroachDBProvider.CockroachDBGlobalState cockroachDBProvider_CockroachDBGlobalState0 = new CockroachDBProvider.CockroachDBGlobalState();
      CockroachDBExpressionGenerator cockroachDBExpressionGenerator0 = new CockroachDBExpressionGenerator(cockroachDBProvider_CockroachDBGlobalState0);
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = new CockroachDBSchema.CockroachDBCompositeDataType(cockroachDBSchema_CockroachDBDataType0, 0);
      CockroachDBAggregate.CockroachDBAggregateFunction cockroachDBAggregate_CockroachDBAggregateFunction0 = CockroachDBAggregate.CockroachDBAggregateFunction.COUNT_ROWS;
      CockroachDBAggregate cockroachDBAggregate0 = cockroachDBExpressionGenerator0.generateArgsForAggregate(cockroachDBSchema_CockroachDBCompositeDataType0, cockroachDBAggregate_CockroachDBAggregateFunction0);
      List<CockroachDBExpression> list0 = cockroachDBAggregate0.getExpr();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CockroachDBAggregate.CockroachDBAggregateFunction cockroachDBAggregate_CockroachDBAggregateFunction0 = CockroachDBAggregate.CockroachDBAggregateFunction.STRING_AGG;
      CockroachDBAggregate cockroachDBAggregate0 = new CockroachDBAggregate(cockroachDBAggregate_CockroachDBAggregateFunction0, (List<CockroachDBExpression>) null);
      List<CockroachDBExpression> list0 = cockroachDBAggregate0.getExpr();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CockroachDBAggregate.CockroachDBAggregateFunction cockroachDBAggregate_CockroachDBAggregateFunction0 = CockroachDBAggregate.CockroachDBAggregateFunction.STRING_AGG;
      CockroachDBSelect cockroachDBSelect0 = new CockroachDBSelect();
      List<CockroachDBExpression> list0 = cockroachDBSelect0.getGroupByExpressions();
      CockroachDBAggregate cockroachDBAggregate0 = new CockroachDBAggregate(cockroachDBAggregate_CockroachDBAggregateFunction0, list0);
      CockroachDBAggregate.CockroachDBAggregateFunction cockroachDBAggregate_CockroachDBAggregateFunction1 = cockroachDBAggregate0.getFunc();
      assertSame(cockroachDBAggregate_CockroachDBAggregateFunction1, cockroachDBAggregate_CockroachDBAggregateFunction0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CockroachDBAggregate.CockroachDBAggregateFunction cockroachDBAggregate_CockroachDBAggregateFunction0 = CockroachDBAggregate.CockroachDBAggregateFunction.SQRDIFF;
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.TIMETZ;
      List<CockroachDBSchema.CockroachDBDataType> list0 = cockroachDBAggregate_CockroachDBAggregateFunction0.getTypes(cockroachDBSchema_CockroachDBDataType0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CockroachDBAggregate.CockroachDBAggregateFunction cockroachDBAggregate_CockroachDBAggregateFunction0 = CockroachDBAggregate.CockroachDBAggregateFunction.getRandomMetamorphicOracle();
      assertEquals(CockroachDBAggregate.CockroachDBAggregateFunction.SUM, cockroachDBAggregate_CockroachDBAggregateFunction0);
  }
}
