/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 05:45:11 GMT 2025
 */

package sqlancer.cockroachdb.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.cockroachdb.CockroachDBSchema;
import sqlancer.cockroachdb.ast.CockroachDBAlias;
import sqlancer.cockroachdb.ast.CockroachDBCast;
import sqlancer.cockroachdb.ast.CockroachDBCollate;
import sqlancer.cockroachdb.ast.CockroachDBConstant;
import sqlancer.cockroachdb.ast.CockroachDBExpression;
import sqlancer.cockroachdb.ast.CockroachDBJoin;
import sqlancer.cockroachdb.ast.CockroachDBSelect;
import sqlancer.common.visitor.UnaryOperation;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CockroachDBCast_ESTest extends CockroachDBCast_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CockroachDBConstant.CockroachDBArrayConstant cockroachDBConstant_CockroachDBArrayConstant0 = new CockroachDBConstant.CockroachDBArrayConstant((List<CockroachDBExpression>) null);
      CockroachDBAlias cockroachDBAlias0 = new CockroachDBAlias(cockroachDBConstant_CockroachDBArrayConstant0, "owfc2=n%'R(X#ZY7x0");
      CockroachDBCollate cockroachDBCollate0 = new CockroachDBCollate(cockroachDBAlias0, "rH4cO62*My1D9~N");
      CockroachDBJoin.JoinType cockroachDBJoin_JoinType0 = CockroachDBJoin.JoinType.NATURAL;
      CockroachDBJoin cockroachDBJoin0 = CockroachDBJoin.createJoin(cockroachDBCollate0, cockroachDBConstant_CockroachDBArrayConstant0, cockroachDBJoin_JoinType0, cockroachDBCollate0);
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = CockroachDBSchema.CockroachDBCompositeDataType.getRandom();
      CockroachDBCast cockroachDBCast0 = new CockroachDBCast(cockroachDBJoin0, cockroachDBSchema_CockroachDBCompositeDataType0);
      CockroachDBExpression cockroachDBExpression0 = cockroachDBCast0.getExpression();
      assertSame(cockroachDBJoin0, cockroachDBExpression0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CockroachDBSelect cockroachDBSelect0 = new CockroachDBSelect();
      CockroachDBCast cockroachDBCast0 = new CockroachDBCast(cockroachDBSelect0, (CockroachDBSchema.CockroachDBCompositeDataType) null);
      // Undeclared exception!
      try { 
        cockroachDBCast0.getOperatorRepresentation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cockroachdb.ast.CockroachDBCast", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CockroachDBSelect cockroachDBSelect0 = new CockroachDBSelect();
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.SERIAL;
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = new CockroachDBSchema.CockroachDBCompositeDataType(cockroachDBSchema_CockroachDBDataType0);
      CockroachDBCast cockroachDBCast0 = new CockroachDBCast(cockroachDBSelect0, cockroachDBSchema_CockroachDBCompositeDataType0);
      // Undeclared exception!
      try { 
        cockroachDBCast0.getOperatorRepresentation();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = CockroachDBSchema.CockroachDBCompositeDataType.getVarBit(0);
      CockroachDBCast cockroachDBCast0 = new CockroachDBCast((CockroachDBExpression) null, cockroachDBSchema_CockroachDBCompositeDataType0);
      String string0 = cockroachDBCast0.getOperatorRepresentation();
      assertEquals("::VARBIT(0)", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = CockroachDBSchema.CockroachDBCompositeDataType.getVarBit(0);
      CockroachDBCast cockroachDBCast0 = new CockroachDBCast((CockroachDBExpression) null, cockroachDBSchema_CockroachDBCompositeDataType0);
      CockroachDBExpression cockroachDBExpression0 = cockroachDBCast0.getExpression();
      assertNull(cockroachDBExpression0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = CockroachDBSchema.CockroachDBCompositeDataType.getRandom();
      CockroachDBSelect cockroachDBSelect0 = new CockroachDBSelect();
      CockroachDBCast cockroachDBCast0 = new CockroachDBCast(cockroachDBSelect0, cockroachDBSchema_CockroachDBCompositeDataType0);
      UnaryOperation.OperatorKind unaryOperation_OperatorKind0 = cockroachDBCast0.getOperatorKind();
      assertEquals(UnaryOperation.OperatorKind.POSTFIX, unaryOperation_OperatorKind0);
  }
}
