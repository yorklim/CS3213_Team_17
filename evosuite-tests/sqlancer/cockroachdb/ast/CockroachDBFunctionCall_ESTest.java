/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 05:56:39 GMT 2025
 */

package sqlancer.cockroachdb.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.cockroachdb.CockroachDBProvider;
import sqlancer.cockroachdb.CockroachDBSchema;
import sqlancer.cockroachdb.ast.CockroachDBExpression;
import sqlancer.cockroachdb.ast.CockroachDBFunction;
import sqlancer.cockroachdb.ast.CockroachDBFunctionCall;
import sqlancer.cockroachdb.gen.CockroachDBExpressionGenerator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CockroachDBFunctionCall_ESTest extends CockroachDBFunctionCall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CockroachDBFunction cockroachDBFunction0 = CockroachDBFunction.CHARACTER_LENGTH1;
      LinkedList<CockroachDBExpression> linkedList0 = new LinkedList<CockroachDBExpression>();
      CockroachDBFunctionCall cockroachDBFunctionCall0 = new CockroachDBFunctionCall(cockroachDBFunction0, linkedList0);
      String string0 = cockroachDBFunctionCall0.getName();
      assertEquals("CHARACTER_LENGTH", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CockroachDBFunction cockroachDBFunction0 = CockroachDBFunction.CHARACTER_LENGTH1;
      LinkedList<CockroachDBExpression> linkedList0 = new LinkedList<CockroachDBExpression>();
      CockroachDBFunctionCall cockroachDBFunctionCall0 = new CockroachDBFunctionCall(cockroachDBFunction0, linkedList0);
      CockroachDBFunction cockroachDBFunction1 = cockroachDBFunctionCall0.getFunction();
      assertSame(cockroachDBFunction1, cockroachDBFunction0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CockroachDBFunction cockroachDBFunction0 = CockroachDBFunction.CHARACTER_LENGTH1;
      LinkedList<CockroachDBExpression> linkedList0 = new LinkedList<CockroachDBExpression>();
      CockroachDBFunctionCall cockroachDBFunctionCall0 = new CockroachDBFunctionCall(cockroachDBFunction0, linkedList0);
      linkedList0.add((CockroachDBExpression) cockroachDBFunctionCall0);
      List<CockroachDBExpression> list0 = cockroachDBFunctionCall0.getArguments();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CockroachDBFunction cockroachDBFunction0 = CockroachDBFunction.SUBSTRING3;
      CockroachDBProvider.CockroachDBGlobalState cockroachDBProvider_CockroachDBGlobalState0 = new CockroachDBProvider.CockroachDBGlobalState();
      CockroachDBExpressionGenerator cockroachDBExpressionGenerator0 = new CockroachDBExpressionGenerator(cockroachDBProvider_CockroachDBGlobalState0);
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.SERIAL;
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = new CockroachDBSchema.CockroachDBCompositeDataType(cockroachDBSchema_CockroachDBDataType0);
      List<CockroachDBExpression> list0 = cockroachDBExpressionGenerator0.generateExpressions(cockroachDBSchema_CockroachDBCompositeDataType0, 0, 0);
      CockroachDBFunctionCall cockroachDBFunctionCall0 = new CockroachDBFunctionCall(cockroachDBFunction0, list0);
      List<CockroachDBExpression> list1 = cockroachDBFunctionCall0.getArguments();
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CockroachDBFunctionCall cockroachDBFunctionCall0 = new CockroachDBFunctionCall((CockroachDBFunction) null, (List<CockroachDBExpression>) null);
      List<CockroachDBExpression> list0 = cockroachDBFunctionCall0.getArguments();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CockroachDBFunctionCall cockroachDBFunctionCall0 = new CockroachDBFunctionCall((CockroachDBFunction) null, (List<CockroachDBExpression>) null);
      // Undeclared exception!
      try { 
        cockroachDBFunctionCall0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cockroachdb.ast.CockroachDBFunctionCall", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CockroachDBFunctionCall cockroachDBFunctionCall0 = new CockroachDBFunctionCall((CockroachDBFunction) null, (List<CockroachDBExpression>) null);
      cockroachDBFunctionCall0.getFunction();
  }
}
