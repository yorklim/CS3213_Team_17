/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 05:58:04 GMT 2025
 */

package sqlancer.cockroachdb.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.cockroachdb.ast.CockroachDBBinaryArithmeticOperation;
import sqlancer.cockroachdb.ast.CockroachDBConstant;
import sqlancer.cockroachdb.ast.CockroachDBExpression;
import sqlancer.cockroachdb.ast.CockroachDBOrderingTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CockroachDBOrderingTerm_ESTest extends CockroachDBOrderingTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CockroachDBOrderingTerm cockroachDBOrderingTerm0 = new CockroachDBOrderingTerm((CockroachDBExpression) null, false);
      cockroachDBOrderingTerm0.getExpression();
      assertEquals("DESC", cockroachDBOrderingTerm0.getOperatorRepresentation());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CockroachDBConstant.CockroachDBDoubleConstant cockroachDBConstant_CockroachDBDoubleConstant0 = new CockroachDBConstant.CockroachDBDoubleConstant(3925.6);
      CockroachDBBinaryArithmeticOperation.CockroachDBBinaryArithmeticOperator cockroachDBBinaryArithmeticOperation_CockroachDBBinaryArithmeticOperator0 = CockroachDBBinaryArithmeticOperation.CockroachDBBinaryArithmeticOperator.DIV;
      CockroachDBBinaryArithmeticOperation cockroachDBBinaryArithmeticOperation0 = new CockroachDBBinaryArithmeticOperation(cockroachDBConstant_CockroachDBDoubleConstant0, cockroachDBConstant_CockroachDBDoubleConstant0, cockroachDBBinaryArithmeticOperation_CockroachDBBinaryArithmeticOperator0);
      CockroachDBOrderingTerm cockroachDBOrderingTerm0 = new CockroachDBOrderingTerm(cockroachDBBinaryArithmeticOperation0, true);
      String string0 = cockroachDBOrderingTerm0.getOperatorRepresentation();
      assertEquals("ASC", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CockroachDBOrderingTerm cockroachDBOrderingTerm0 = new CockroachDBOrderingTerm((CockroachDBExpression) null, false);
      String string0 = cockroachDBOrderingTerm0.getOperatorRepresentation();
      assertEquals("DESC", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CockroachDBOrderingTerm cockroachDBOrderingTerm0 = new CockroachDBOrderingTerm((CockroachDBExpression) null, false);
      cockroachDBOrderingTerm0.getOperatorKind();
      assertEquals("DESC", cockroachDBOrderingTerm0.getOperatorRepresentation());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CockroachDBOrderingTerm cockroachDBOrderingTerm0 = new CockroachDBOrderingTerm((CockroachDBExpression) null, false);
      boolean boolean0 = cockroachDBOrderingTerm0.omitBracketsWhenPrinting();
      assertTrue(boolean0);
      assertEquals("DESC", cockroachDBOrderingTerm0.getOperatorRepresentation());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CockroachDBConstant cockroachDBConstant0 = CockroachDBConstant.createBooleanConstant(false);
      CockroachDBOrderingTerm cockroachDBOrderingTerm0 = new CockroachDBOrderingTerm(cockroachDBConstant0, false);
      cockroachDBOrderingTerm0.getExpression();
      assertEquals("DESC", cockroachDBOrderingTerm0.getOperatorRepresentation());
  }
}
