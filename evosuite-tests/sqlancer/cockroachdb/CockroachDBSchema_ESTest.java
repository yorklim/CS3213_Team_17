/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 05:38:36 GMT 2025
 */

package sqlancer.cockroachdb;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import sqlancer.SQLConnection;
import sqlancer.cockroachdb.CockroachDBSchema;
import sqlancer.common.schema.TableIndex;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CockroachDBSchema_ESTest extends CockroachDBSchema_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.JSONB;
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = new CockroachDBSchema.CockroachDBCompositeDataType(cockroachDBSchema_CockroachDBDataType0, (-1389167889));
      int int0 = cockroachDBSchema_CockroachDBCompositeDataType0.getSize();
      assertEquals((-1389167889), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.getRandom();
      assertEquals(CockroachDBSchema.CockroachDBDataType.INT, cockroachDBSchema_CockroachDBDataType0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<CockroachDBSchema.CockroachDBTable> linkedList0 = new LinkedList<CockroachDBSchema.CockroachDBTable>();
      LinkedList<CockroachDBSchema.CockroachDBColumn> linkedList1 = new LinkedList<CockroachDBSchema.CockroachDBColumn>();
      TableIndex tableIndex0 = TableIndex.create("oGLc=uL6Ss$ZflQ;(5*");
      List<TableIndex> list0 = List.of(tableIndex0);
      CockroachDBSchema.CockroachDBTable cockroachDBSchema_CockroachDBTable0 = new CockroachDBSchema.CockroachDBTable("oGLc=uL6Ss$ZflQ;(5*", linkedList1, list0, false);
      linkedList0.add(cockroachDBSchema_CockroachDBTable0);
      CockroachDBSchema cockroachDBSchema0 = new CockroachDBSchema(linkedList0);
      int int0 = cockroachDBSchema0.getIndexCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<CockroachDBSchema.CockroachDBTable> linkedList0 = new LinkedList<CockroachDBSchema.CockroachDBTable>();
      linkedList0.add((CockroachDBSchema.CockroachDBTable) null);
      CockroachDBSchema cockroachDBSchema0 = new CockroachDBSchema(linkedList0);
      // Undeclared exception!
      try { 
        cockroachDBSchema0.getRandomTableNonEmptyTables();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.schema.AbstractTables", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CockroachDBSchema cockroachDBSchema0 = null;
      try {
        cockroachDBSchema0 = new CockroachDBSchema((List<CockroachDBSchema.CockroachDBTable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.ARRAY;
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = new CockroachDBSchema.CockroachDBCompositeDataType(cockroachDBSchema_CockroachDBDataType0, (-103));
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType1 = new CockroachDBSchema.CockroachDBCompositeDataType(cockroachDBSchema_CockroachDBDataType0, cockroachDBSchema_CockroachDBCompositeDataType0);
      assertFalse(cockroachDBSchema_CockroachDBCompositeDataType1.equals((Object)cockroachDBSchema_CockroachDBCompositeDataType0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<CockroachDBSchema.CockroachDBTable> linkedList0 = new LinkedList<CockroachDBSchema.CockroachDBTable>();
      CockroachDBSchema.CockroachDBTables cockroachDBSchema_CockroachDBTables0 = new CockroachDBSchema.CockroachDBTables(linkedList0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "BIGSERIAL").when(resultSet0).getString(anyInt());
      doReturn(true, true, true, false).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0, (Statement) null).when(connection0).createStatement();
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      // Undeclared exception!
      try { 
        CockroachDBSchema.fromConnection(sQLConnection0, "BIGSERIAL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cockroachdb.CockroachDBSchema", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("bI").when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0, (ResultSet) null).when(preparedStatement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      Statement statement0 = sQLConnection0.prepareStatement("INT4");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, statement0).when(connection1).createStatement();
      SQLConnection sQLConnection1 = new SQLConnection(connection1);
      // Undeclared exception!
      try { 
        CockroachDBSchema.fromConnection(sQLConnection1, "INT4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cockroachdb.CockroachDBSchema", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("bI").when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet1).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0, resultSet1).when(preparedStatement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      Statement statement0 = sQLConnection0.prepareStatement("INT4");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, statement0, (Statement) null).when(connection1).createStatement();
      SQLConnection sQLConnection1 = new SQLConnection(connection1);
      // Undeclared exception!
      try { 
        CockroachDBSchema.fromConnection(sQLConnection1, "INT4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cockroachdb.CockroachDBSchema", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("bI").when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet1).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0, resultSet1, (ResultSet) null).when(preparedStatement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      Statement statement0 = sQLConnection0.prepareStatement("INT4");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, statement0, statement0).when(connection1).createStatement();
      SQLConnection sQLConnection1 = new SQLConnection(connection1);
      // Undeclared exception!
      try { 
        CockroachDBSchema.fromConnection(sQLConnection1, "INT4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cockroachdb.CockroachDBSchema", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        CockroachDBSchema.fromConnection((SQLConnection) null, "SMALLINT[]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cockroachdb.CockroachDBSchema", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.FLOAT;
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = new CockroachDBSchema.CockroachDBCompositeDataType(cockroachDBSchema_CockroachDBDataType0);
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType1 = CockroachDBSchema.CockroachDBDataType.INT;
      cockroachDBSchema_CockroachDBDataType1.get();
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType1 = cockroachDBSchema_CockroachDBDataType1.get();
      cockroachDBSchema_CockroachDBCompositeDataType1.toString();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      Statement statement0 = sQLConnection0.prepareStatement("INT4");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, (Statement) null).when(connection1).createStatement();
      SQLConnection sQLConnection1 = new SQLConnection(connection1);
      // Undeclared exception!
      try { 
        CockroachDBSchema.fromConnection(sQLConnection1, "INT4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cockroachdb.CockroachDBSchema", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      // Undeclared exception!
      try { 
        CockroachDBSchema.fromConnection(sQLConnection0, "SMALLSERIAL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cockroachdb.CockroachDBSchema", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.FLOAT;
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = new CockroachDBSchema.CockroachDBCompositeDataType(cockroachDBSchema_CockroachDBDataType0);
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType1 = CockroachDBSchema.CockroachDBDataType.INT;
      cockroachDBSchema_CockroachDBDataType1.get();
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType1 = cockroachDBSchema_CockroachDBDataType1.get();
      cockroachDBSchema_CockroachDBCompositeDataType1.toString();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("bI").when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      Statement statement0 = sQLConnection0.prepareStatement("INT4");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, (Statement) null).when(connection1).createStatement();
      SQLConnection sQLConnection1 = new SQLConnection(connection1);
      // Undeclared exception!
      try { 
        CockroachDBSchema.fromConnection(sQLConnection1, "INT4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cockroachdb.CockroachDBSchema", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<CockroachDBSchema.CockroachDBTable> linkedList0 = new LinkedList<CockroachDBSchema.CockroachDBTable>();
      linkedList0.add((CockroachDBSchema.CockroachDBTable) null);
      CockroachDBSchema cockroachDBSchema0 = new CockroachDBSchema(linkedList0);
      // Undeclared exception!
      try { 
        cockroachDBSchema0.getIndexCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cockroachdb.CockroachDBSchema", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.ARRAY;
      CockroachDBSchema.CockroachDBCompositeDataType.getRandom();
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType1 = CockroachDBSchema.CockroachDBDataType.SERIAL;
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = cockroachDBSchema_CockroachDBDataType1.get();
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType1 = cockroachDBSchema_CockroachDBDataType1.get();
      cockroachDBSchema_CockroachDBCompositeDataType0.toString();
      CockroachDBSchema.CockroachDBCompositeDataType.getRandom();
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType2 = cockroachDBSchema_CockroachDBDataType0.get();
      assertFalse(cockroachDBSchema_CockroachDBCompositeDataType2.equals((Object)cockroachDBSchema_CockroachDBCompositeDataType1));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = CockroachDBSchema.CockroachDBCompositeDataType.getRandom();
      CockroachDBSchema.CockroachDBCompositeDataType.getRandom();
      String string0 = cockroachDBSchema_CockroachDBCompositeDataType0.toString();
      //  // Unstable assertion: assertEquals("SMALLINT", string0);
      //  // Unstable assertion: assertNotNull(string0);
      
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType1 = CockroachDBSchema.CockroachDBCompositeDataType.getRandom();
      //  // Unstable assertion: assertEquals(CockroachDBSchema.CockroachDBDataType.VARBIT, cockroachDBSchema_CockroachDBCompositeDataType1.getPrimitiveDataType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.VARBIT;
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = new CockroachDBSchema.CockroachDBCompositeDataType(cockroachDBSchema_CockroachDBDataType0);
      String string0 = cockroachDBSchema_CockroachDBCompositeDataType0.toString();
      assertEquals("VARBIT", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = CockroachDBSchema.CockroachDBCompositeDataType.getBit((-1));
      String string0 = cockroachDBSchema_CockroachDBCompositeDataType0.toString();
      assertEquals("BIT(-1)", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.SERIAL;
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = new CockroachDBSchema.CockroachDBCompositeDataType(cockroachDBSchema_CockroachDBDataType0);
      // Undeclared exception!
      try { 
        cockroachDBSchema_CockroachDBCompositeDataType0.toString();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.SERIAL;
      cockroachDBSchema_CockroachDBDataType0.get();
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = cockroachDBSchema_CockroachDBDataType0.get();
      String string0 = cockroachDBSchema_CockroachDBCompositeDataType0.toString();
      //  // Unstable assertion: assertEquals("SERIAL4", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.SERIAL;
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = cockroachDBSchema_CockroachDBDataType0.get();
      String string0 = cockroachDBSchema_CockroachDBCompositeDataType0.toString();
      assertNotNull(string0);
      assertEquals("SMALLSERIAL", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.INT;
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = new CockroachDBSchema.CockroachDBCompositeDataType(cockroachDBSchema_CockroachDBDataType0, (-232));
      String string0 = cockroachDBSchema_CockroachDBCompositeDataType0.toString();
      assertEquals("INT", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = CockroachDBSchema.CockroachDBCompositeDataType.getInt(7);
      String string0 = cockroachDBSchema_CockroachDBCompositeDataType0.toString();
      assertEquals("INT", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = CockroachDBSchema.CockroachDBCompositeDataType.getInt(6);
      String string0 = cockroachDBSchema_CockroachDBCompositeDataType0.toString();
      assertEquals("INT", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = CockroachDBSchema.CockroachDBCompositeDataType.getInt(5);
      String string0 = cockroachDBSchema_CockroachDBCompositeDataType0.toString();
      assertEquals("INT", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = CockroachDBSchema.CockroachDBCompositeDataType.getInt(3);
      String string0 = cockroachDBSchema_CockroachDBCompositeDataType0.toString();
      assertEquals("INT", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.FLOAT;
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = new CockroachDBSchema.CockroachDBCompositeDataType(cockroachDBSchema_CockroachDBDataType0, (-594415409));
      String string0 = cockroachDBSchema_CockroachDBCompositeDataType0.toString();
      assertEquals("FLOAT", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.BIT;
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = cockroachDBSchema_CockroachDBDataType0.get();
      String string0 = cockroachDBSchema_CockroachDBCompositeDataType0.toString();
      assertEquals("BIT(1)", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.INT;
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = cockroachDBSchema_CockroachDBDataType0.get();
      String string0 = cockroachDBSchema_CockroachDBCompositeDataType0.toString();
      //  // Unstable assertion: assertEquals("SMALLINT", string0);
      //  // Unstable assertion: assertNotNull(string0);
      
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType1 = cockroachDBSchema_CockroachDBDataType0.get();
      String string1 = cockroachDBSchema_CockroachDBCompositeDataType1.toString();
      //  // Unstable assertion: assertEquals("INT8", string1);
      //  // Unstable assertion: assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.STRING;
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = new CockroachDBSchema.CockroachDBCompositeDataType(cockroachDBSchema_CockroachDBDataType0);
      boolean boolean0 = cockroachDBSchema_CockroachDBCompositeDataType0.isString();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = CockroachDBSchema.CockroachDBCompositeDataType.getVarBit(6);
      boolean boolean0 = cockroachDBSchema_CockroachDBCompositeDataType0.isString();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.ARRAY;
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = new CockroachDBSchema.CockroachDBCompositeDataType(cockroachDBSchema_CockroachDBDataType0);
      // Undeclared exception!
      try { 
        cockroachDBSchema_CockroachDBCompositeDataType0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cockroachdb.CockroachDBSchema$CockroachDBCompositeDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.STRING;
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = cockroachDBSchema_CockroachDBDataType0.get();
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType1 = null;
      try {
        cockroachDBSchema_CockroachDBCompositeDataType1 = new CockroachDBSchema.CockroachDBCompositeDataType(cockroachDBSchema_CockroachDBDataType0, cockroachDBSchema_CockroachDBCompositeDataType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cockroachdb.CockroachDBSchema$CockroachDBCompositeDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.ARRAY;
      cockroachDBSchema_CockroachDBDataType0.get();
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType1 = CockroachDBSchema.CockroachDBDataType.SERIAL;
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = cockroachDBSchema_CockroachDBDataType1.get();
      cockroachDBSchema_CockroachDBCompositeDataType0.getSize();
      cockroachDBSchema_CockroachDBDataType1.get();
      cockroachDBSchema_CockroachDBCompositeDataType0.toString();
      CockroachDBSchema.CockroachDBCompositeDataType.getBit(8);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "BIGSERIAL").when(resultSet0).getString(anyInt());
      doReturn(true, true, true, false).when(resultSet0).next();
      CockroachDBSchema.CockroachDBCompositeDataType.getBit(8);
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0, (Statement) null).when(connection0).createStatement();
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      // Undeclared exception!
      try { 
        CockroachDBSchema.fromConnection(sQLConnection0, "BIGSERIAL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cockroachdb.CockroachDBSchema", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CockroachDBSchema.CockroachDBColumn cockroachDBSchema_CockroachDBColumn0 = new CockroachDBSchema.CockroachDBColumn("vZB6JLcVZ&oivuSan>U", (CockroachDBSchema.CockroachDBCompositeDataType) null, true, false);
      boolean boolean0 = cockroachDBSchema_CockroachDBColumn0.isPrimaryKey();
      assertFalse(cockroachDBSchema_CockroachDBColumn0.isNullable());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.BYTES;
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = new CockroachDBSchema.CockroachDBCompositeDataType(cockroachDBSchema_CockroachDBDataType0);
      CockroachDBSchema.CockroachDBColumn cockroachDBSchema_CockroachDBColumn0 = new CockroachDBSchema.CockroachDBColumn((String) null, cockroachDBSchema_CockroachDBCompositeDataType0, true, false);
      boolean boolean0 = cockroachDBSchema_CockroachDBColumn0.isNullable();
      assertTrue(cockroachDBSchema_CockroachDBColumn0.isPrimaryKey());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<CockroachDBSchema.CockroachDBTable> linkedList0 = new LinkedList<CockroachDBSchema.CockroachDBTable>();
      CockroachDBSchema cockroachDBSchema0 = new CockroachDBSchema(linkedList0);
      CockroachDBSchema.CockroachDBTables cockroachDBSchema_CockroachDBTables0 = cockroachDBSchema0.getRandomTableNonEmptyTables(0);
      assertNotNull(cockroachDBSchema_CockroachDBTables0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<CockroachDBSchema.CockroachDBTable> linkedList0 = new LinkedList<CockroachDBSchema.CockroachDBTable>();
      CockroachDBSchema cockroachDBSchema0 = new CockroachDBSchema(linkedList0);
      // Undeclared exception!
      try { 
        cockroachDBSchema0.getRandomTableNonEmptyTables(8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 1
         //
         verifyException("sqlancer.Randomly", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<CockroachDBSchema.CockroachDBTable> linkedList0 = new LinkedList<CockroachDBSchema.CockroachDBTable>();
      CockroachDBSchema cockroachDBSchema0 = new CockroachDBSchema(linkedList0);
      // Undeclared exception!
      try { 
        cockroachDBSchema0.getRandomTableNonEmptyTables();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // [] 1
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.STRING;
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = cockroachDBSchema_CockroachDBDataType0.get();
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType1 = cockroachDBSchema_CockroachDBCompositeDataType0.getElementType();
      assertNull(cockroachDBSchema_CockroachDBCompositeDataType1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType0 = CockroachDBSchema.CockroachDBDataType.INT;
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = new CockroachDBSchema.CockroachDBCompositeDataType(cockroachDBSchema_CockroachDBDataType0);
      CockroachDBSchema.CockroachDBDataType cockroachDBSchema_CockroachDBDataType1 = cockroachDBSchema_CockroachDBCompositeDataType0.getPrimitiveDataType();
      assertEquals(CockroachDBSchema.CockroachDBDataType.INT, cockroachDBSchema_CockroachDBDataType1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CockroachDBSchema.CockroachDBCompositeDataType cockroachDBSchema_CockroachDBCompositeDataType0 = CockroachDBSchema.CockroachDBCompositeDataType.getVarBit(954596061);
      String string0 = cockroachDBSchema_CockroachDBCompositeDataType0.toString();
      assertEquals("VARBIT(954596061)", string0);
  }
}
