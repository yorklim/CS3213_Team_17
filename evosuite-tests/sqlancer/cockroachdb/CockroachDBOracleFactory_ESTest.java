/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 05:28:13 GMT 2025
 */

package sqlancer.cockroachdb;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.cockroachdb.CockroachDBOracleFactory;
import sqlancer.cockroachdb.CockroachDBProvider;
import sqlancer.common.oracle.TestOracle;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CockroachDBOracleFactory_ESTest extends CockroachDBOracleFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CockroachDBOracleFactory cockroachDBOracleFactory0 = CockroachDBOracleFactory.NOREC;
      try { 
        cockroachDBOracleFactory0.create((CockroachDBProvider.CockroachDBGlobalState) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null variables used to initialize test oracle.
         //
         verifyException("sqlancer.common.oracle.NoRECOracle", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CockroachDBOracleFactory cockroachDBOracleFactory0 = CockroachDBOracleFactory.HAVING;
      TestOracle<CockroachDBProvider.CockroachDBGlobalState> testOracle0 = cockroachDBOracleFactory0.create((CockroachDBProvider.CockroachDBGlobalState) null);
      assertNotNull(testOracle0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CockroachDBOracleFactory cockroachDBOracleFactory0 = CockroachDBOracleFactory.GROUP_BY;
      TestOracle<CockroachDBProvider.CockroachDBGlobalState> testOracle0 = cockroachDBOracleFactory0.create((CockroachDBProvider.CockroachDBGlobalState) null);
      assertNotNull(testOracle0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CockroachDBOracleFactory cockroachDBOracleFactory0 = CockroachDBOracleFactory.DISTINCT;
      TestOracle<CockroachDBProvider.CockroachDBGlobalState> testOracle0 = cockroachDBOracleFactory0.create((CockroachDBProvider.CockroachDBGlobalState) null);
      assertNotNull(testOracle0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CockroachDBOracleFactory cockroachDBOracleFactory0 = CockroachDBOracleFactory.WHERE;
      try { 
        cockroachDBOracleFactory0.create((CockroachDBProvider.CockroachDBGlobalState) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null variables used to initialize test oracle.
         //
         verifyException("sqlancer.common.oracle.TLPWhereOracle", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CockroachDBOracleFactory cockroachDBOracleFactory0 = CockroachDBOracleFactory.QUERY_PARTITIONING;
      // Undeclared exception!
      try { 
        cockroachDBOracleFactory0.create((CockroachDBProvider.CockroachDBGlobalState) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/postgresql/util/PSQLException
         //
         verifyException("sqlancer.cockroachdb.CockroachDBOracleFactory$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CockroachDBOracleFactory cockroachDBOracleFactory0 = CockroachDBOracleFactory.EXTENDED_WHERE;
      TestOracle<CockroachDBProvider.CockroachDBGlobalState> testOracle0 = cockroachDBOracleFactory0.create((CockroachDBProvider.CockroachDBGlobalState) null);
      assertNotNull(testOracle0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CockroachDBProvider.CockroachDBGlobalState cockroachDBProvider_CockroachDBGlobalState0 = new CockroachDBProvider.CockroachDBGlobalState();
      CockroachDBOracleFactory cockroachDBOracleFactory0 = CockroachDBOracleFactory.CERT;
      TestOracle<CockroachDBProvider.CockroachDBGlobalState> testOracle0 = cockroachDBOracleFactory0.create(cockroachDBProvider_CockroachDBGlobalState0);
      assertNotNull(testOracle0);
  }
}
