/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 13 13:19:14 GMT 2025
 */

package sqlancer.clickhouse.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.clickhouse.ast.ClickHouseBinaryFunctionOperation;
import sqlancer.clickhouse.ast.ClickHouseBinaryLogicalOperation;
import sqlancer.clickhouse.ast.ClickHouseExpression;
import sqlancer.clickhouse.ast.ClickHouseSelect;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClickHouseBinaryFunctionOperation_ESTest extends ClickHouseBinaryFunctionOperation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0 = ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator.POW;
      ClickHouseBinaryLogicalOperation.ClickHouseBinaryLogicalOperator clickHouseBinaryLogicalOperation_ClickHouseBinaryLogicalOperator0 = ClickHouseBinaryLogicalOperation.ClickHouseBinaryLogicalOperator.OR;
      ClickHouseBinaryLogicalOperation clickHouseBinaryLogicalOperation0 = new ClickHouseBinaryLogicalOperation((ClickHouseExpression) null, (ClickHouseExpression) null, clickHouseBinaryLogicalOperation_ClickHouseBinaryLogicalOperator0);
      ClickHouseBinaryFunctionOperation clickHouseBinaryFunctionOperation0 = ClickHouseBinaryFunctionOperation.create((ClickHouseExpression) null, clickHouseBinaryLogicalOperation0, clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0);
      assertEquals("pow", clickHouseBinaryFunctionOperation0.getOperatorRepresentation());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClickHouseBinaryLogicalOperation.ClickHouseBinaryLogicalOperator clickHouseBinaryLogicalOperation_ClickHouseBinaryLogicalOperator0 = ClickHouseBinaryLogicalOperation.ClickHouseBinaryLogicalOperator.AND;
      ClickHouseBinaryLogicalOperation clickHouseBinaryLogicalOperation0 = new ClickHouseBinaryLogicalOperation((ClickHouseExpression) null, (ClickHouseExpression) null, clickHouseBinaryLogicalOperation_ClickHouseBinaryLogicalOperator0);
      ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0 = ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator.MAX2;
      ClickHouseBinaryFunctionOperation clickHouseBinaryFunctionOperation0 = new ClickHouseBinaryFunctionOperation(clickHouseBinaryLogicalOperation0, (ClickHouseExpression) null, clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0);
      ClickHouseExpression clickHouseExpression0 = clickHouseBinaryFunctionOperation0.getRight();
      assertNull(clickHouseExpression0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0 = ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator.POW;
      ClickHouseBinaryFunctionOperation clickHouseBinaryFunctionOperation0 = ClickHouseBinaryFunctionOperation.create(clickHouseSelect0, clickHouseSelect0, clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0);
      ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator1 = clickHouseBinaryFunctionOperation0.getOperator();
      assertSame(clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator1, clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0 = ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator.MIN2;
      ClickHouseBinaryFunctionOperation clickHouseBinaryFunctionOperation0 = new ClickHouseBinaryFunctionOperation((ClickHouseExpression) null, (ClickHouseExpression) null, clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0);
      ClickHouseExpression clickHouseExpression0 = clickHouseBinaryFunctionOperation0.getLeft();
      assertNull(clickHouseExpression0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0 = ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator.MAX2;
      String string0 = clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0.getTextRepresentation();
      assertEquals("max2", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0 = ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator.MIN2;
      ClickHouseBinaryFunctionOperation clickHouseBinaryFunctionOperation0 = new ClickHouseBinaryFunctionOperation(clickHouseSelect0, clickHouseSelect0, clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0);
      String string0 = clickHouseBinaryFunctionOperation0.getOperatorRepresentation();
      assertEquals("min2", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0 = ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator.getRandom();
      assertEquals("intDiv", clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0.getTextRepresentation());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0 = ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator.MAX2;
      ClickHouseBinaryFunctionOperation clickHouseBinaryFunctionOperation0 = new ClickHouseBinaryFunctionOperation(clickHouseSelect0, clickHouseSelect0, clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0);
      ClickHouseExpression clickHouseExpression0 = clickHouseBinaryFunctionOperation0.getRight();
      assertSame(clickHouseSelect0, clickHouseExpression0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0 = ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator.MIN2;
      ClickHouseBinaryFunctionOperation clickHouseBinaryFunctionOperation0 = ClickHouseBinaryFunctionOperation.create(clickHouseSelect0, clickHouseSelect0, clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0);
      ClickHouseSelect clickHouseSelect1 = (ClickHouseSelect)clickHouseBinaryFunctionOperation0.getLeft();
      assertEquals(ClickHouseSelect.SelectType.ALL, clickHouseSelect1.getFromOptions());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClickHouseBinaryFunctionOperation clickHouseBinaryFunctionOperation0 = new ClickHouseBinaryFunctionOperation((ClickHouseExpression) null, (ClickHouseExpression) null, (ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator) null);
      // Undeclared exception!
      try { 
        clickHouseBinaryFunctionOperation0.getOperatorRepresentation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.clickhouse.ast.ClickHouseBinaryFunctionOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClickHouseBinaryFunctionOperation clickHouseBinaryFunctionOperation0 = new ClickHouseBinaryFunctionOperation((ClickHouseExpression) null, (ClickHouseExpression) null, (ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator) null);
      clickHouseBinaryFunctionOperation0.getOperator();
  }
}
