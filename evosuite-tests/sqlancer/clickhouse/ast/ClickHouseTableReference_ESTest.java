/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 13 13:10:49 GMT 2025
 */

package sqlancer.clickhouse.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.clickhouse.ClickHouseSchema;
import sqlancer.clickhouse.ast.ClickHouseColumnReference;
import sqlancer.clickhouse.ast.ClickHouseTableReference;
import sqlancer.common.schema.TableIndex;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClickHouseTableReference_ESTest extends ClickHouseTableReference_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<ClickHouseSchema.ClickHouseColumn> linkedList0 = new LinkedList<ClickHouseSchema.ClickHouseColumn>();
      LinkedList<TableIndex> linkedList1 = new LinkedList<TableIndex>();
      ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable0 = new ClickHouseSchema.ClickHouseTable("", linkedList0, linkedList1, false);
      ClickHouseTableReference clickHouseTableReference0 = new ClickHouseTableReference(clickHouseSchema_ClickHouseTable0, "");
      String string0 = clickHouseTableReference0.getTableName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClickHouseTableReference clickHouseTableReference0 = new ClickHouseTableReference((ClickHouseSchema.ClickHouseTable) null, "}f$53_F70");
      ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable0 = clickHouseTableReference0.getTable();
      assertNull(clickHouseSchema_ClickHouseTable0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<ClickHouseSchema.ClickHouseColumn> linkedList0 = new LinkedList<ClickHouseSchema.ClickHouseColumn>();
      LinkedList<TableIndex> linkedList1 = new LinkedList<TableIndex>();
      ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable0 = new ClickHouseSchema.ClickHouseTable("", linkedList0, linkedList1, false);
      ClickHouseTableReference clickHouseTableReference0 = new ClickHouseTableReference(clickHouseSchema_ClickHouseTable0, "vi;\u0004M#BV&G`3{X");
      ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable1 = clickHouseTableReference0.getTable();
      assertSame(clickHouseSchema_ClickHouseTable1, clickHouseSchema_ClickHouseTable0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List<ClickHouseSchema.ClickHouseColumn> list0 = List.of();
      LinkedList<TableIndex> linkedList0 = new LinkedList<TableIndex>();
      linkedList0.offerFirst((TableIndex) null);
      ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable0 = new ClickHouseSchema.ClickHouseTable("QDl#i*%", list0, linkedList0, true);
      ClickHouseTableReference clickHouseTableReference0 = new ClickHouseTableReference(clickHouseSchema_ClickHouseTable0, "6E:287#3PO!;o?U");
      ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable1 = clickHouseTableReference0.getTable();
      assertTrue(clickHouseSchema_ClickHouseTable1.isView());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClickHouseSchema.ClickHouseColumn clickHouseSchema_ClickHouseColumn0 = new ClickHouseSchema.ClickHouseColumn("_[3M%XT{fz", (ClickHouseSchema.ClickHouseLancerDataType) null, true, true, (ClickHouseSchema.ClickHouseTable) null);
      List<ClickHouseSchema.ClickHouseColumn> list0 = List.of(clickHouseSchema_ClickHouseColumn0);
      LinkedList<TableIndex> linkedList0 = new LinkedList<TableIndex>();
      ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable0 = new ClickHouseSchema.ClickHouseTable((String) null, list0, linkedList0, true);
      ClickHouseTableReference clickHouseTableReference0 = new ClickHouseTableReference(clickHouseSchema_ClickHouseTable0, "");
      List<ClickHouseColumnReference> list1 = clickHouseTableReference0.getColumnReferences();
      assertEquals(1, list1.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<ClickHouseSchema.ClickHouseColumn> linkedList0 = new LinkedList<ClickHouseSchema.ClickHouseColumn>();
      LinkedList<TableIndex> linkedList1 = new LinkedList<TableIndex>();
      ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable0 = new ClickHouseSchema.ClickHouseTable("", linkedList0, linkedList1, false);
      ClickHouseTableReference clickHouseTableReference0 = new ClickHouseTableReference(clickHouseSchema_ClickHouseTable0, "vi;\u0004M#BV&G`3{X");
      String string0 = clickHouseTableReference0.getAlias();
      assertEquals("vi;\u0004M#BV&G`3{X", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClickHouseTableReference clickHouseTableReference0 = new ClickHouseTableReference((ClickHouseSchema.ClickHouseTable) null, "");
      String string0 = clickHouseTableReference0.getAlias();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClickHouseTableReference clickHouseTableReference0 = new ClickHouseTableReference((ClickHouseSchema.ClickHouseTable) null, (String) null);
      // Undeclared exception!
      try { 
        clickHouseTableReference0.getTableName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.clickhouse.ast.ClickHouseTableReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClickHouseTableReference clickHouseTableReference0 = new ClickHouseTableReference((ClickHouseSchema.ClickHouseTable) null, "}f$53_F70");
      // Undeclared exception!
      try { 
        clickHouseTableReference0.getColumnReferences();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.clickhouse.ast.ClickHouseTableReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<ClickHouseSchema.ClickHouseColumn> linkedList0 = new LinkedList<ClickHouseSchema.ClickHouseColumn>();
      LinkedList<TableIndex> linkedList1 = new LinkedList<TableIndex>();
      ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable0 = new ClickHouseSchema.ClickHouseTable((String) null, linkedList0, linkedList1, true);
      ClickHouseTableReference clickHouseTableReference0 = new ClickHouseTableReference(clickHouseSchema_ClickHouseTable0, (String) null);
      String string0 = clickHouseTableReference0.getTableName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<ClickHouseSchema.ClickHouseColumn> linkedList0 = new LinkedList<ClickHouseSchema.ClickHouseColumn>();
      LinkedList<TableIndex> linkedList1 = new LinkedList<TableIndex>();
      ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable0 = new ClickHouseSchema.ClickHouseTable("", linkedList0, linkedList1, false);
      ClickHouseTableReference clickHouseTableReference0 = new ClickHouseTableReference(clickHouseSchema_ClickHouseTable0, "vi;\u0004M#BV&G`3{X");
      String string0 = clickHouseTableReference0.getTableName();
      assertEquals("vi;\u0004M#BV&G`3{X", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<ClickHouseSchema.ClickHouseColumn> linkedList0 = new LinkedList<ClickHouseSchema.ClickHouseColumn>();
      LinkedList<TableIndex> linkedList1 = new LinkedList<TableIndex>();
      ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable0 = new ClickHouseSchema.ClickHouseTable((String) null, linkedList0, linkedList1, true);
      ClickHouseTableReference clickHouseTableReference0 = new ClickHouseTableReference(clickHouseSchema_ClickHouseTable0, (String) null);
      List<ClickHouseColumnReference> list0 = clickHouseTableReference0.getColumnReferences();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<ClickHouseSchema.ClickHouseColumn> linkedList0 = new LinkedList<ClickHouseSchema.ClickHouseColumn>();
      LinkedList<TableIndex> linkedList1 = new LinkedList<TableIndex>();
      ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable0 = new ClickHouseSchema.ClickHouseTable("Tx3/u1!V0h-FO", linkedList0, linkedList1, true);
      ClickHouseTableReference clickHouseTableReference0 = new ClickHouseTableReference(clickHouseSchema_ClickHouseTable0, (String) null);
      String string0 = clickHouseTableReference0.getAlias();
      assertNull(string0);
  }
}
