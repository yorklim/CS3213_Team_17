/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 13 13:12:39 GMT 2025
 */

package sqlancer.clickhouse.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.clickhouse.ClickHouseSchema;
import sqlancer.clickhouse.ast.ClickHouseAliasOperation;
import sqlancer.clickhouse.ast.ClickHouseColumnReference;
import sqlancer.clickhouse.ast.ClickHouseSelect;
import sqlancer.clickhouse.ast.constant.ClickHouseUInt8Constant;
import sqlancer.common.schema.TableIndex;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClickHouseColumnReference_ESTest extends ClickHouseColumnReference_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      ClickHouseAliasOperation clickHouseAliasOperation0 = new ClickHouseAliasOperation(clickHouseSelect0, "SHOW TABLES;");
      ClickHouseColumnReference clickHouseColumnReference0 = new ClickHouseColumnReference(clickHouseAliasOperation0);
      String string0 = clickHouseColumnReference0.getTableAlias();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ClickHouseColumnReference clickHouseColumnReference0 = new ClickHouseColumnReference((ClickHouseSchema.ClickHouseColumn) null, "N(5@!:Q#[Djl+U6z`", "");
      String string0 = clickHouseColumnReference0.getTableAlias();
      assertEquals("N(5@!:Q#[Djl+U6z`", clickHouseColumnReference0.getAlias());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ClickHouseColumnReference clickHouseColumnReference0 = new ClickHouseColumnReference((ClickHouseSchema.ClickHouseColumn) null, "e=<j&NW", "e=<j&NW");
      ClickHouseSchema.ClickHouseColumn clickHouseSchema_ClickHouseColumn0 = clickHouseColumnReference0.getColumn();
      assertNull(clickHouseSchema_ClickHouseColumn0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<ClickHouseSchema.ClickHouseColumn> linkedList0 = new LinkedList<ClickHouseSchema.ClickHouseColumn>();
      LinkedList<TableIndex> linkedList1 = new LinkedList<TableIndex>();
      ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable0 = new ClickHouseSchema.ClickHouseTable("wJ~T7", linkedList0, linkedList1, false);
      ClickHouseSchema.ClickHouseColumn clickHouseSchema_ClickHouseColumn0 = new ClickHouseSchema.ClickHouseColumn("wJ~T7", (ClickHouseSchema.ClickHouseLancerDataType) null, false, false, clickHouseSchema_ClickHouseTable0);
      ClickHouseColumnReference clickHouseColumnReference0 = new ClickHouseColumnReference(clickHouseSchema_ClickHouseColumn0, "", "wJ~T7");
      clickHouseColumnReference0.getColumn();
      assertEquals("", clickHouseColumnReference0.getAlias());
      assertEquals("wJ~T7", clickHouseColumnReference0.getTableAlias());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ClickHouseColumnReference clickHouseColumnReference0 = new ClickHouseColumnReference((ClickHouseSchema.ClickHouseColumn) null, "PU", "fsJ");
      String string0 = clickHouseColumnReference0.getAlias();
      assertEquals("fsJ", clickHouseColumnReference0.getTableAlias());
      assertEquals("PU", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ClickHouseColumnReference clickHouseColumnReference0 = new ClickHouseColumnReference((ClickHouseSchema.ClickHouseColumn) null, "", "IHyg/*m~");
      String string0 = clickHouseColumnReference0.getAlias();
      assertEquals("IHyg/*m~", clickHouseColumnReference0.getTableAlias());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ClickHouseColumnReference clickHouseColumnReference0 = new ClickHouseColumnReference((ClickHouseSchema.ClickHouseColumn) null, "PU", "fsJ");
      String string0 = clickHouseColumnReference0.getTableAlias();
      assertEquals("fsJ", string0);
      assertEquals("PU", clickHouseColumnReference0.getAlias());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedList<ClickHouseSchema.ClickHouseColumn> linkedList0 = new LinkedList<ClickHouseSchema.ClickHouseColumn>();
      LinkedList<TableIndex> linkedList1 = new LinkedList<TableIndex>();
      ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable0 = new ClickHouseSchema.ClickHouseTable("E(p;,{Z/y&lWf", linkedList0, linkedList1, true);
      ClickHouseSchema.ClickHouseColumn clickHouseSchema_ClickHouseColumn0 = new ClickHouseSchema.ClickHouseColumn("E(p;,{Z/y&lWf", (ClickHouseSchema.ClickHouseLancerDataType) null, true, true, clickHouseSchema_ClickHouseTable0);
      ClickHouseColumnReference clickHouseColumnReference0 = new ClickHouseColumnReference(clickHouseSchema_ClickHouseColumn0, "SELECT CAST(", "E(p;,{Z/y&lWf");
      clickHouseColumnReference0.getColumn();
      assertEquals("E(p;,{Z/y&lWf", clickHouseColumnReference0.getTableAlias());
      assertEquals("SELECT CAST(", clickHouseColumnReference0.getAlias());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ClickHouseUInt8Constant clickHouseUInt8Constant0 = new ClickHouseUInt8Constant((-1));
      ClickHouseAliasOperation clickHouseAliasOperation0 = new ClickHouseAliasOperation(clickHouseUInt8Constant0, "!c\"uc-@p'0]>");
      ClickHouseColumnReference clickHouseColumnReference0 = new ClickHouseColumnReference(clickHouseAliasOperation0);
      clickHouseColumnReference0.getAlias();
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ClickHouseColumnReference clickHouseColumnReference0 = null;
      try {
        clickHouseColumnReference0 = new ClickHouseColumnReference((ClickHouseAliasOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.clickhouse.ast.ClickHouseColumnReference", e);
      }
  }
}
