/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 13 13:23:05 GMT 2025
 */

package sqlancer.clickhouse.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.clickhouse.ast.ClickHouseExpression;
import sqlancer.clickhouse.ast.ClickHouseSelect;
import sqlancer.clickhouse.ast.ClickHouseUnaryFunctionOperation;
import sqlancer.common.visitor.UnaryOperation;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClickHouseUnaryFunctionOperation_ESTest extends ClickHouseUnaryFunctionOperation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ClickHouseUnaryFunctionOperation.ClickHouseUnaryFunctionOperator clickHouseUnaryFunctionOperation_ClickHouseUnaryFunctionOperator0 = ClickHouseUnaryFunctionOperation.ClickHouseUnaryFunctionOperator.RADIANS;
      ClickHouseUnaryFunctionOperation clickHouseUnaryFunctionOperation0 = new ClickHouseUnaryFunctionOperation((ClickHouseExpression) null, clickHouseUnaryFunctionOperation_ClickHouseUnaryFunctionOperator0);
      ClickHouseExpression clickHouseExpression0 = clickHouseUnaryFunctionOperation0.getExpression();
      assertNull(clickHouseExpression0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ClickHouseUnaryFunctionOperation.ClickHouseUnaryFunctionOperator clickHouseUnaryFunctionOperation_ClickHouseUnaryFunctionOperator0 = ClickHouseUnaryFunctionOperation.ClickHouseUnaryFunctionOperator.getRandom();
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      ClickHouseUnaryFunctionOperation clickHouseUnaryFunctionOperation0 = new ClickHouseUnaryFunctionOperation(clickHouseSelect0, clickHouseUnaryFunctionOperation_ClickHouseUnaryFunctionOperator0);
      String string0 = clickHouseUnaryFunctionOperation0.getOperatorRepresentation();
      assertEquals("exp", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ClickHouseUnaryFunctionOperation.ClickHouseUnaryFunctionOperator clickHouseUnaryFunctionOperation_ClickHouseUnaryFunctionOperator0 = ClickHouseUnaryFunctionOperation.ClickHouseUnaryFunctionOperator.getRandom();
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      ClickHouseUnaryFunctionOperation clickHouseUnaryFunctionOperation0 = new ClickHouseUnaryFunctionOperation(clickHouseSelect0, clickHouseUnaryFunctionOperation_ClickHouseUnaryFunctionOperator0);
      ClickHouseExpression clickHouseExpression0 = clickHouseUnaryFunctionOperation0.getExpression();
      assertSame(clickHouseExpression0, clickHouseSelect0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ClickHouseUnaryFunctionOperation.ClickHouseUnaryFunctionOperator clickHouseUnaryFunctionOperation_ClickHouseUnaryFunctionOperator0 = ClickHouseUnaryFunctionOperation.ClickHouseUnaryFunctionOperator.getRandom();
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      ClickHouseUnaryFunctionOperation clickHouseUnaryFunctionOperation0 = new ClickHouseUnaryFunctionOperation(clickHouseSelect0, clickHouseUnaryFunctionOperation_ClickHouseUnaryFunctionOperator0);
      UnaryOperation.OperatorKind unaryOperation_OperatorKind0 = clickHouseUnaryFunctionOperation0.getOperatorKind();
      assertEquals(UnaryOperation.OperatorKind.PREFIX, unaryOperation_OperatorKind0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ClickHouseExpression.ClickHouseSubquery clickHouseExpression_ClickHouseSubquery0 = new ClickHouseExpression.ClickHouseSubquery("exp");
      ClickHouseUnaryFunctionOperation clickHouseUnaryFunctionOperation0 = new ClickHouseUnaryFunctionOperation(clickHouseExpression_ClickHouseSubquery0, (ClickHouseUnaryFunctionOperation.ClickHouseUnaryFunctionOperator) null);
      // Undeclared exception!
      try { 
        clickHouseUnaryFunctionOperation0.getOperatorRepresentation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.clickhouse.ast.ClickHouseUnaryFunctionOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ClickHouseUnaryFunctionOperation.ClickHouseUnaryFunctionOperator clickHouseUnaryFunctionOperation_ClickHouseUnaryFunctionOperator0 = ClickHouseUnaryFunctionOperation.ClickHouseUnaryFunctionOperator.getRandom();
      String string0 = clickHouseUnaryFunctionOperation_ClickHouseUnaryFunctionOperator0.getTextRepresentation();
      assertEquals("exp", string0);
  }
}
