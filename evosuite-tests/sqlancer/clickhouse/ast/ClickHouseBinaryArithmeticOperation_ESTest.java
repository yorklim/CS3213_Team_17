/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 13 13:12:14 GMT 2025
 */

package sqlancer.clickhouse.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.clickhouse.ast.ClickHouseBinaryArithmeticOperation;
import sqlancer.clickhouse.ast.ClickHouseExpression;
import sqlancer.clickhouse.ast.ClickHouseSelect;
import sqlancer.clickhouse.ast.constant.ClickHouseInt32Constant;
import sqlancer.clickhouse.ast.constant.ClickHouseStringConstant;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClickHouseBinaryArithmeticOperation_ESTest extends ClickHouseBinaryArithmeticOperation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0 = ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator.ADD;
      ClickHouseBinaryArithmeticOperation clickHouseBinaryArithmeticOperation0 = ClickHouseBinaryArithmeticOperation.create((ClickHouseExpression) null, (ClickHouseExpression) null, clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0);
      ClickHouseExpression clickHouseExpression0 = clickHouseBinaryArithmeticOperation0.getRight();
      assertNull(clickHouseExpression0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ClickHouseInt32Constant clickHouseInt32Constant0 = new ClickHouseInt32Constant(2691L);
      ClickHouseExpression.ClickHouseExist clickHouseExpression_ClickHouseExist0 = new ClickHouseExpression.ClickHouseExist(clickHouseInt32Constant0);
      ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0 = ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator.ADD;
      ClickHouseBinaryArithmeticOperation clickHouseBinaryArithmeticOperation0 = new ClickHouseBinaryArithmeticOperation(clickHouseExpression_ClickHouseExist0, clickHouseExpression_ClickHouseExist0, clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0);
      clickHouseBinaryArithmeticOperation0.getOperator();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ClickHouseStringConstant clickHouseStringConstant0 = new ClickHouseStringConstant("");
      ClickHouseExpression.ClickHouseExist clickHouseExpression_ClickHouseExist0 = new ClickHouseExpression.ClickHouseExist(clickHouseStringConstant0);
      ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0 = ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator.MINUS;
      ClickHouseBinaryArithmeticOperation clickHouseBinaryArithmeticOperation0 = ClickHouseBinaryArithmeticOperation.create(clickHouseExpression_ClickHouseExist0, clickHouseStringConstant0, clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0);
      clickHouseBinaryArithmeticOperation0.getLeft();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      ClickHouseBinaryArithmeticOperation clickHouseBinaryArithmeticOperation0 = new ClickHouseBinaryArithmeticOperation(clickHouseSelect0, clickHouseSelect0, (ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator) null);
      // Undeclared exception!
      try { 
        clickHouseBinaryArithmeticOperation0.getOperatorRepresentation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.clickhouse.ast.ClickHouseBinaryArithmeticOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0 = ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator.MINUS;
      String string0 = clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0.getTextRepresentation();
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0 = ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator.getRandom();
      assertEquals(ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator.ADD, clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0 = ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator.DIV;
      ClickHouseBinaryArithmeticOperation clickHouseBinaryArithmeticOperation0 = ClickHouseBinaryArithmeticOperation.create((ClickHouseExpression) null, clickHouseSelect0, clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0);
      String string0 = clickHouseBinaryArithmeticOperation0.getOperatorRepresentation();
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0 = ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator.DIV;
      ClickHouseBinaryArithmeticOperation clickHouseBinaryArithmeticOperation0 = ClickHouseBinaryArithmeticOperation.create((ClickHouseExpression) null, clickHouseSelect0, clickHouseBinaryArithmeticOperation_ClickHouseBinaryArithmeticOperator0);
      ClickHouseExpression clickHouseExpression0 = clickHouseBinaryArithmeticOperation0.getRight();
      assertSame(clickHouseSelect0, clickHouseExpression0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ClickHouseBinaryArithmeticOperation clickHouseBinaryArithmeticOperation0 = new ClickHouseBinaryArithmeticOperation((ClickHouseExpression) null, (ClickHouseExpression) null, (ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator) null);
      clickHouseBinaryArithmeticOperation0.getOperator();
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ClickHouseBinaryArithmeticOperation clickHouseBinaryArithmeticOperation0 = new ClickHouseBinaryArithmeticOperation((ClickHouseExpression) null, (ClickHouseExpression) null, (ClickHouseBinaryArithmeticOperation.ClickHouseBinaryArithmeticOperator) null);
      ClickHouseExpression clickHouseExpression0 = clickHouseBinaryArithmeticOperation0.getLeft();
      assertNull(clickHouseExpression0);
  }
}
