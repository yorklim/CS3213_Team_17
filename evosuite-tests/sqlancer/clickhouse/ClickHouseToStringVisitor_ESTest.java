/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 13 13:16:40 GMT 2025
 */

package sqlancer.clickhouse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;
import sqlancer.Randomly;
import sqlancer.clickhouse.ClickHouseSchema;
import sqlancer.clickhouse.ClickHouseToStringVisitor;
import sqlancer.clickhouse.ast.ClickHouseAggregate;
import sqlancer.clickhouse.ast.ClickHouseAliasOperation;
import sqlancer.clickhouse.ast.ClickHouseBinaryComparisonOperation;
import sqlancer.clickhouse.ast.ClickHouseBinaryFunctionOperation;
import sqlancer.clickhouse.ast.ClickHouseBinaryLogicalOperation;
import sqlancer.clickhouse.ast.ClickHouseCastOperation;
import sqlancer.clickhouse.ast.ClickHouseColumnReference;
import sqlancer.clickhouse.ast.ClickHouseConstant;
import sqlancer.clickhouse.ast.ClickHouseExpression;
import sqlancer.clickhouse.ast.ClickHouseSelect;
import sqlancer.clickhouse.ast.ClickHouseTableReference;
import sqlancer.clickhouse.ast.ClickHouseUnaryFunctionOperation;
import sqlancer.clickhouse.ast.ClickHouseUnaryPostfixOperation;
import sqlancer.clickhouse.ast.ClickHouseUnaryPrefixOperation;
import sqlancer.clickhouse.ast.constant.ClickHouseBooleanConstant;
import sqlancer.clickhouse.ast.constant.ClickHouseFloat32Constant;
import sqlancer.clickhouse.ast.constant.ClickHouseFloat64Constant;
import sqlancer.clickhouse.ast.constant.ClickHouseInt128Constant;
import sqlancer.clickhouse.ast.constant.ClickHouseInt32Constant;
import sqlancer.clickhouse.ast.constant.ClickHouseInt64Constant;
import sqlancer.clickhouse.ast.constant.ClickHouseInt8Constant;
import sqlancer.clickhouse.ast.constant.ClickHouseUInt128Constant;
import sqlancer.clickhouse.ast.constant.ClickHouseUInt16Constant;
import sqlancer.clickhouse.ast.constant.ClickHouseUInt256Constant;
import sqlancer.clickhouse.ast.constant.ClickHouseUInt8Constant;
import sqlancer.common.schema.TableIndex;
import sqlancer.common.visitor.UnaryOperation;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClickHouseToStringVisitor_ESTest extends ClickHouseToStringVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      ClickHouseExpression.ClickHouseExist clickHouseExpression_ClickHouseExist0 = new ClickHouseExpression.ClickHouseExist(clickHouseSelect0);
      clickHouseSelect0.setHavingClause((ClickHouseExpression) clickHouseExpression_ClickHouseExist0);
      ClickHouseAliasOperation clickHouseAliasOperation0 = new ClickHouseAliasOperation(clickHouseSelect0, "E{IXwT#/]>$W=jk$`VN");
      ClickHouseColumnReference clickHouseColumnReference0 = new ClickHouseColumnReference(clickHouseAliasOperation0);
      ClickHouseToStringVisitor.asString(clickHouseColumnReference0);
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      // Undeclared exception!
      try { 
        ((ClickHouseToStringVisitor) clickHouseToStringVisitor0).visit(clickHouseSelect0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      ClickHouseAggregate clickHouseAggregate0 = new ClickHouseAggregate((ClickHouseExpression) null, (ClickHouseAggregate.ClickHouseAggregateFunction) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      clickHouseSelect0.setGroupByClause((List<ClickHouseExpression>) null);
      // Undeclared exception!
      try { 
        ClickHouseToStringVisitor.asString(clickHouseSelect0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      ClickHouseAliasOperation clickHouseAliasOperation0 = new ClickHouseAliasOperation(clickHouseSelect0, "");
      ClickHouseColumnReference clickHouseColumnReference0 = new ClickHouseColumnReference(clickHouseAliasOperation0);
      clickHouseColumnReference0.getExpectedValue();
      clickHouseAliasOperation0.getExpectedValue();
      clickHouseColumnReference0.getExpectedValue();
      ClickHouseToStringVisitor.asString(clickHouseColumnReference0);
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      ClickHouseSelect clickHouseSelect1 = new ClickHouseSelect();
      // Undeclared exception!
      try { 
        ((ClickHouseToStringVisitor) clickHouseToStringVisitor0).visit(clickHouseSelect1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      assertEquals("", clickHouseToStringVisitor0.get());
      
      // Undeclared exception!
      try { 
        ((ClickHouseToStringVisitor) clickHouseToStringVisitor0).visit((ClickHouseAliasOperation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      List<ClickHouseExpression> list0 = List.of((ClickHouseExpression) clickHouseSelect0, (ClickHouseExpression) clickHouseSelect0);
      List<ClickHouseExpression> list1 = Randomly.nonEmptySubset(list0);
      clickHouseSelect0.setFromList(list1);
      ClickHouseToStringVisitor.asString(clickHouseSelect0);
      sqlancer.clickhouse.ClickHouseToStringVisitor.asString((sqlancer.clickhouse.ast.ClickHouseExpression) clickHouseSelect0);
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      ClickHouseExpression[] clickHouseExpressionArray0 = new ClickHouseExpression[7];
      clickHouseExpressionArray0[0] = (ClickHouseExpression) clickHouseSelect0;
      ClickHouseUnaryPostfixOperation.ClickHouseUnaryPostfixOperator clickHouseUnaryPostfixOperation_ClickHouseUnaryPostfixOperator0 = ClickHouseUnaryPostfixOperation.ClickHouseUnaryPostfixOperator.IS_NOT_NULL;
      ClickHouseUnaryPostfixOperation clickHouseUnaryPostfixOperation0 = new ClickHouseUnaryPostfixOperation(clickHouseSelect0, clickHouseUnaryPostfixOperation_ClickHouseUnaryPostfixOperator0, false);
      clickHouseExpressionArray0[1] = (ClickHouseExpression) clickHouseUnaryPostfixOperation0;
      clickHouseExpressionArray0[2] = (ClickHouseExpression) clickHouseSelect0;
      clickHouseExpressionArray0[3] = (ClickHouseExpression) clickHouseSelect0;
      clickHouseExpressionArray0[4] = (ClickHouseExpression) clickHouseSelect0;
      clickHouseExpressionArray0[5] = (ClickHouseExpression) clickHouseSelect0;
      clickHouseExpressionArray0[6] = (ClickHouseExpression) clickHouseSelect0;
      List<ClickHouseExpression> list0 = Randomly.nonEmptySubset(clickHouseExpressionArray0);
      clickHouseSelect0.setOrderByClauses(list0);
      ClickHouseToStringVisitor.asString(clickHouseSelect0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TWO;
      ClickHouseUInt128Constant clickHouseUInt128Constant0 = new ClickHouseUInt128Constant(bigInteger0);
      ClickHouseAliasOperation clickHouseAliasOperation0 = new ClickHouseAliasOperation(clickHouseUInt128Constant0, "`-iW");
      clickHouseUInt128Constant0.getExpectedValue();
      ClickHouseColumnReference clickHouseColumnReference0 = new ClickHouseColumnReference(clickHouseAliasOperation0);
      ClickHouseToStringVisitor.asString(clickHouseColumnReference0);
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      ClickHouseCastOperation clickHouseCastOperation0 = new ClickHouseCastOperation(clickHouseUInt128Constant0, (ClickHouseSchema.ClickHouseLancerDataType) null);
      ClickHouseTableReference clickHouseTableReference0 = new ClickHouseTableReference((ClickHouseSchema.ClickHouseTable) null, "`-iW");
      ClickHouseExpression.ClickHouseJoinOnClause clickHouseExpression_ClickHouseJoinOnClause0 = new ClickHouseExpression.ClickHouseJoinOnClause(clickHouseCastOperation0, clickHouseCastOperation0);
      ClickHouseExpression.ClickHouseJoin clickHouseExpression_ClickHouseJoin0 = new ClickHouseExpression.ClickHouseJoin(clickHouseTableReference0, clickHouseTableReference0, (ClickHouseExpression.ClickHouseJoin.JoinType) null, (ClickHouseExpression.ClickHouseJoinOnClause) null);
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visit(clickHouseExpression_ClickHouseJoin0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.clickhouse.ClickHouseToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      sqlancer.clickhouse.ast.ClickHouseSelect clickHouseSelect0 = new sqlancer.clickhouse.ast.ClickHouseSelect();
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      ClickHouseColumnReference clickHouseColumnReference0 = new ClickHouseColumnReference((ClickHouseSchema.ClickHouseColumn) null, ";l'E^w<#*", "");
      clickHouseColumnReference0.getExpectedValue();
      // Undeclared exception!
      try { 
        ((ClickHouseToStringVisitor) clickHouseToStringVisitor0).visit(clickHouseColumnReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visit((ClickHouseBinaryFunctionOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.clickhouse.ClickHouseToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseSubquery.create("KFLCF\"74");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TWO;
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      LinkedList<TableIndex> linkedList0 = new LinkedList<TableIndex>();
      LinkedList<ClickHouseSchema.ClickHouseColumn> linkedList1 = new LinkedList<ClickHouseSchema.ClickHouseColumn>();
      ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable0 = new ClickHouseSchema.ClickHouseTable(".0'&6", linkedList1, linkedList0, false);
      ClickHouseTableReference clickHouseTableReference0 = new ClickHouseTableReference(clickHouseSchema_ClickHouseTable0, ",iG+]~");
      clickHouseToStringVisitor0.visit(clickHouseTableReference0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      ClickHouseSelect.SelectType clickHouseSelect_SelectType0 = ClickHouseSelect.SelectType.ALL;
      ClickHouseInt32Constant clickHouseInt32Constant0 = new ClickHouseInt32Constant((-9223372036854775808L));
      clickHouseSelect0.setWhereClause((ClickHouseExpression) clickHouseInt32Constant0);
      clickHouseSelect0.setSelectType(clickHouseSelect_SelectType0);
      ClickHouseToStringVisitor.asString(clickHouseSelect0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      LinkedList<TableIndex> linkedList0 = new LinkedList<TableIndex>();
      LinkedList<ClickHouseSchema.ClickHouseColumn> linkedList1 = new LinkedList<ClickHouseSchema.ClickHouseColumn>();
      ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable0 = new ClickHouseSchema.ClickHouseTable(".0'&6", linkedList1, linkedList0, false);
      ClickHouseSchema.ClickHouseColumn clickHouseSchema_ClickHouseColumn0 = new ClickHouseSchema.ClickHouseColumn("wyfxM", (ClickHouseSchema.ClickHouseLancerDataType) null, false, false, clickHouseSchema_ClickHouseTable0);
      ClickHouseTableReference clickHouseTableReference0 = new ClickHouseTableReference(clickHouseSchema_ClickHouseTable0, "");
      sqlancer.clickhouse.ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable1 = new sqlancer.clickhouse.ClickHouseSchema.ClickHouseTable("*y);gmC5iU3", linkedList1, linkedList0, false);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      LinkedList<TableIndex> linkedList0 = new LinkedList<TableIndex>();
      LinkedList<ClickHouseSchema.ClickHouseColumn> linkedList1 = new LinkedList<ClickHouseSchema.ClickHouseColumn>();
      ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable0 = new ClickHouseSchema.ClickHouseTable("", linkedList1, linkedList0, false);
      ClickHouseSchema.ClickHouseColumn clickHouseSchema_ClickHouseColumn0 = new ClickHouseSchema.ClickHouseColumn("", (ClickHouseSchema.ClickHouseLancerDataType) null, false, true, clickHouseSchema_ClickHouseTable0);
      ClickHouseTableReference clickHouseTableReference0 = new ClickHouseTableReference(clickHouseSchema_ClickHouseTable0, ".0'&6");
      ClickHouseTableReference clickHouseTableReference1 = new ClickHouseTableReference(clickHouseSchema_ClickHouseTable0, ",iG+]~");
      ClickHouseExpression.ClickHouseJoinOnClause clickHouseExpression_ClickHouseJoinOnClause0 = new ClickHouseExpression.ClickHouseJoinOnClause(clickHouseTableReference0, clickHouseTableReference1);
      ClickHouseExpression.ClickHouseJoin.JoinType clickHouseExpression_ClickHouseJoin_JoinType0 = ClickHouseExpression.ClickHouseJoin.JoinType.LEFT_ANTI;
      ClickHouseExpression.ClickHouseJoin clickHouseExpression_ClickHouseJoin0 = new ClickHouseExpression.ClickHouseJoin(clickHouseTableReference0, clickHouseTableReference1, clickHouseExpression_ClickHouseJoin_JoinType0, clickHouseExpression_ClickHouseJoinOnClause0);
      clickHouseToStringVisitor0.visit(clickHouseExpression_ClickHouseJoin0);
      assertEquals(" LEFT ANTI JOIN  AS ,iG+]~ ON (( AS .0'&6)=( AS ,iG+]~))", clickHouseToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      sqlancer.clickhouse.ast.ClickHouseSelect clickHouseSelect0 = new sqlancer.clickhouse.ast.ClickHouseSelect();
      ClickHouseExpression.ClickHouseJoinOnClause clickHouseExpression_ClickHouseJoinOnClause0 = new ClickHouseExpression.ClickHouseJoinOnClause((ClickHouseExpression) null, (ClickHouseExpression) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TWO;
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      LinkedList<TableIndex> linkedList0 = new LinkedList<TableIndex>();
      LinkedList<ClickHouseSchema.ClickHouseColumn> linkedList1 = new LinkedList<ClickHouseSchema.ClickHouseColumn>();
      ClickHouseSchema.ClickHouseColumn[] clickHouseSchema_ClickHouseColumnArray0 = new ClickHouseSchema.ClickHouseColumn[0];
      ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable0 = new ClickHouseSchema.ClickHouseTable("`-iW", linkedList1, linkedList0, false);
      ClickHouseTableReference clickHouseTableReference0 = new ClickHouseTableReference(clickHouseSchema_ClickHouseTable0, "");
      ClickHouseTableReference clickHouseTableReference1 = new ClickHouseTableReference(clickHouseSchema_ClickHouseTable0, "CAST(");
      ClickHouseExpression.ClickHouseJoinOnClause clickHouseExpression_ClickHouseJoinOnClause0 = new ClickHouseExpression.ClickHouseJoinOnClause(clickHouseTableReference0, clickHouseTableReference1);
      ClickHouseExpression.ClickHouseJoin.JoinType clickHouseExpression_ClickHouseJoin_JoinType0 = ClickHouseExpression.ClickHouseJoin.JoinType.RIGHT_ANTI;
      clickHouseExpression_ClickHouseJoinOnClause0.getExpectedValue();
      ClickHouseExpression.ClickHouseJoin clickHouseExpression_ClickHouseJoin0 = new ClickHouseExpression.ClickHouseJoin(clickHouseTableReference0, clickHouseTableReference1, clickHouseExpression_ClickHouseJoin_JoinType0, clickHouseExpression_ClickHouseJoinOnClause0);
      clickHouseToStringVisitor0.visit(clickHouseExpression_ClickHouseJoin0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      BigInteger bigInteger0 = BigInteger.TWO;
      ClickHouseUInt256Constant clickHouseUInt256Constant0 = new ClickHouseUInt256Constant(bigInteger0);
      ClickHouseUnaryPostfixOperation.ClickHouseUnaryPostfixOperator clickHouseUnaryPostfixOperation_ClickHouseUnaryPostfixOperator0 = ClickHouseUnaryPostfixOperation.ClickHouseUnaryPostfixOperator.IS_NOT_NULL;
      ClickHouseUnaryPostfixOperation clickHouseUnaryPostfixOperation0 = new ClickHouseUnaryPostfixOperation(clickHouseUInt256Constant0, clickHouseUnaryPostfixOperation_ClickHouseUnaryPostfixOperator0, false);
      clickHouseUnaryPostfixOperation0.setNegate(false);
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visit((ClickHouseUnaryPostfixOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.clickhouse.ClickHouseToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TWO;
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      LinkedList<TableIndex> linkedList0 = new LinkedList<TableIndex>();
      LinkedList<ClickHouseSchema.ClickHouseColumn> linkedList1 = new LinkedList<ClickHouseSchema.ClickHouseColumn>();
      ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable0 = new ClickHouseSchema.ClickHouseTable(".0'&6", linkedList1, linkedList0, false);
      ClickHouseTableReference clickHouseTableReference0 = new ClickHouseTableReference(clickHouseSchema_ClickHouseTable0, "n[=?}I[");
      ClickHouseTableReference clickHouseTableReference1 = new ClickHouseTableReference(clickHouseSchema_ClickHouseTable0, "n[=?}I[");
      ClickHouseExpression.ClickHouseJoin.JoinType clickHouseExpression_ClickHouseJoin_JoinType0 = ClickHouseExpression.ClickHouseJoin.JoinType.RIGHT_OUTER;
      ClickHouseExpression.ClickHouseJoin clickHouseExpression_ClickHouseJoin0 = new ClickHouseExpression.ClickHouseJoin(clickHouseTableReference0, clickHouseTableReference1, clickHouseExpression_ClickHouseJoin_JoinType0, (ClickHouseExpression.ClickHouseJoinOnClause) null);
      ClickHouseExpression.ClickHouseJoin.JoinType clickHouseExpression_ClickHouseJoin_JoinType1 = ClickHouseExpression.ClickHouseJoin.JoinType.CROSS;
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TWO;
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      LinkedList<TableIndex> linkedList0 = new LinkedList<TableIndex>();
      LinkedList<ClickHouseSchema.ClickHouseColumn> linkedList1 = new LinkedList<ClickHouseSchema.ClickHouseColumn>();
      ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable0 = new ClickHouseSchema.ClickHouseTable(".0'&6", linkedList1, linkedList0, false);
      ClickHouseSchema.ClickHouseColumn clickHouseSchema_ClickHouseColumn0 = new ClickHouseSchema.ClickHouseColumn("", (ClickHouseSchema.ClickHouseLancerDataType) null, true, true, clickHouseSchema_ClickHouseTable0);
      ClickHouseTableReference clickHouseTableReference0 = new ClickHouseTableReference(clickHouseSchema_ClickHouseTable0, ",iG+]~");
      ClickHouseTableReference clickHouseTableReference1 = new ClickHouseTableReference(clickHouseSchema_ClickHouseTable0, "CAST(");
      ClickHouseExpression.ClickHouseJoin.JoinType clickHouseExpression_ClickHouseJoin_JoinType0 = ClickHouseExpression.ClickHouseJoin.JoinType.FULL_OUTER;
      ClickHouseExpression.ClickHouseJoinOnClause clickHouseExpression_ClickHouseJoinOnClause0 = new ClickHouseExpression.ClickHouseJoinOnClause(clickHouseTableReference1, clickHouseTableReference1);
      ClickHouseExpression.ClickHouseJoin clickHouseExpression_ClickHouseJoin0 = new ClickHouseExpression.ClickHouseJoin(clickHouseTableReference0, clickHouseTableReference1, clickHouseExpression_ClickHouseJoin_JoinType0, clickHouseExpression_ClickHouseJoinOnClause0);
      clickHouseToStringVisitor0.visit(clickHouseExpression_ClickHouseJoin0);
      // Undeclared exception!
      try { 
        clickHouseSchema_ClickHouseColumn0.asColumnReference("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      LinkedList<sqlancer.clickhouse.ClickHouseSchema.ClickHouseColumn> linkedList0 = new LinkedList<sqlancer.clickhouse.ClickHouseSchema.ClickHouseColumn>();
      sqlancer.clickhouse.ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable0 = new sqlancer.clickhouse.ClickHouseSchema.ClickHouseTable("J", linkedList0, (List<sqlancer.common.schema.TableIndex>) null, false);
      sqlancer.clickhouse.ast.ClickHouseTableReference clickHouseTableReference0 = new sqlancer.clickhouse.ast.ClickHouseTableReference(clickHouseSchema_ClickHouseTable0, ">AwK3]0s+_\":/)d-^>");
      ClickHouseExpression.ClickHouseJoin.JoinType clickHouseExpression_ClickHouseJoin_JoinType0 = ClickHouseExpression.ClickHouseJoin.JoinType.LEFT_ANTI;
      sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseJoinOnClause clickHouseExpression_ClickHouseJoinOnClause0 = new sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseJoinOnClause((sqlancer.clickhouse.ast.ClickHouseExpression) null, clickHouseTableReference0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      ClickHouseSelect clickHouseSelect1 = new ClickHouseSelect();
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      LinkedList<ClickHouseSchema.ClickHouseColumn> linkedList0 = new LinkedList<ClickHouseSchema.ClickHouseColumn>();
      ClickHouseUnaryPrefixOperation.ClickHouseUnaryPrefixOperator clickHouseUnaryPrefixOperation_ClickHouseUnaryPrefixOperator0 = ClickHouseUnaryPrefixOperation.ClickHouseUnaryPrefixOperator.MINUS;
      ClickHouseUnaryPrefixOperation clickHouseUnaryPrefixOperation0 = new ClickHouseUnaryPrefixOperation(clickHouseSelect1, clickHouseUnaryPrefixOperation_ClickHouseUnaryPrefixOperator0);
      clickHouseToStringVisitor0.visit((UnaryOperation<ClickHouseExpression>) clickHouseUnaryPrefixOperation0);
      ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable0 = new ClickHouseSchema.ClickHouseTable((String) null, linkedList0, (List<TableIndex>) null, false);
      ClickHouseTableReference clickHouseTableReference0 = new ClickHouseTableReference(clickHouseSchema_ClickHouseTable0, (String) null);
      clickHouseToStringVisitor0.visit(clickHouseTableReference0);
      Random.setNextRandom((-715));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TWO;
      ClickHouseUInt128Constant clickHouseUInt128Constant0 = new ClickHouseUInt128Constant(bigInteger0);
      ClickHouseAliasOperation clickHouseAliasOperation0 = new ClickHouseAliasOperation(clickHouseUInt128Constant0, "`-iW");
      clickHouseUInt128Constant0.getExpectedValue();
      ClickHouseColumnReference clickHouseColumnReference0 = new ClickHouseColumnReference(clickHouseAliasOperation0);
      ClickHouseToStringVisitor.asString(clickHouseColumnReference0);
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      ClickHouseCastOperation clickHouseCastOperation0 = new ClickHouseCastOperation(clickHouseAliasOperation0, (ClickHouseSchema.ClickHouseLancerDataType) null);
      LinkedList<TableIndex> linkedList0 = new LinkedList<TableIndex>();
      LinkedList<ClickHouseSchema.ClickHouseColumn> linkedList1 = new LinkedList<ClickHouseSchema.ClickHouseColumn>();
      ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable0 = new ClickHouseSchema.ClickHouseTable(".0'&6", linkedList1, linkedList0, false);
      ClickHouseSchema.ClickHouseColumn clickHouseSchema_ClickHouseColumn0 = new ClickHouseSchema.ClickHouseColumn("", (ClickHouseSchema.ClickHouseLancerDataType) null, true, true, clickHouseSchema_ClickHouseTable0);
      ClickHouseTableReference clickHouseTableReference0 = new ClickHouseTableReference(clickHouseSchema_ClickHouseTable0, ",iG+]~");
      ClickHouseExpression.ClickHouseJoin.JoinType clickHouseExpression_ClickHouseJoin_JoinType0 = ClickHouseExpression.ClickHouseJoin.JoinType.RIGHT_OUTER;
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      // Undeclared exception!
      try { 
        ((ClickHouseToStringVisitor) clickHouseToStringVisitor0).visit((ClickHouseSelect) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      ClickHouseExpression.ClickHouseJoinOnClause clickHouseExpression_ClickHouseJoinOnClause0 = new ClickHouseExpression.ClickHouseJoinOnClause(clickHouseSelect0, clickHouseSelect0);
      clickHouseSelect0.setFromClause(clickHouseExpression_ClickHouseJoinOnClause0);
      ClickHouseToStringVisitor clickHouseToStringVisitor1 = new ClickHouseToStringVisitor();
      ClickHouseCastOperation clickHouseCastOperation0 = new ClickHouseCastOperation(clickHouseExpression_ClickHouseJoinOnClause0, (ClickHouseSchema.ClickHouseLancerDataType) null);
      clickHouseToStringVisitor1.visit(clickHouseCastOperation0);
      clickHouseToStringVisitor0.visit(clickHouseCastOperation0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      sqlancer.clickhouse.ast.ClickHouseSelect clickHouseSelect0 = new sqlancer.clickhouse.ast.ClickHouseSelect();
      ClickHouseSelect.SelectType clickHouseSelect_SelectType0 = ClickHouseSelect.SelectType.DISTINCT;
      // Undeclared exception!
      try { 
        ((ClickHouseSelect) clickHouseSelect0).setFromOptions(clickHouseSelect_SelectType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      ClickHouseSelect.SelectType clickHouseSelect_SelectType0 = ClickHouseSelect.SelectType.DISTINCT;
      clickHouseSelect0.setSelectType(clickHouseSelect_SelectType0);
      String string0 = ClickHouseToStringVisitor.asString(clickHouseSelect0);
      assertEquals("(SELECT DISTINCT )", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      ClickHouseUnaryPrefixOperation.ClickHouseUnaryPrefixOperator clickHouseUnaryPrefixOperation_ClickHouseUnaryPrefixOperator0 = ClickHouseUnaryPrefixOperation.ClickHouseUnaryPrefixOperator.NOT;
      ClickHouseUnaryPrefixOperation clickHouseUnaryPrefixOperation0 = new ClickHouseUnaryPrefixOperation((ClickHouseExpression) null, clickHouseUnaryPrefixOperation_ClickHouseUnaryPrefixOperator0);
      ClickHouseExpression.ClickHouseJoinOnClause clickHouseExpression_ClickHouseJoinOnClause0 = new ClickHouseExpression.ClickHouseJoinOnClause((ClickHouseExpression) null, clickHouseUnaryPrefixOperation0);
      ClickHouseExpression.ClickHouseJoin.JoinType clickHouseExpression_ClickHouseJoin_JoinType0 = ClickHouseExpression.ClickHouseJoin.JoinType.FULL_OUTER;
      ClickHouseExpression.ClickHouseJoin clickHouseExpression_ClickHouseJoin0 = new ClickHouseExpression.ClickHouseJoin((ClickHouseTableReference) null, (ClickHouseTableReference) null, clickHouseExpression_ClickHouseJoin_JoinType0, clickHouseExpression_ClickHouseJoinOnClause0);
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visit(clickHouseExpression_ClickHouseJoin0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.clickhouse.ClickHouseToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      LinkedList<TableIndex> linkedList0 = new LinkedList<TableIndex>();
      LinkedList<ClickHouseSchema.ClickHouseColumn> linkedList1 = new LinkedList<ClickHouseSchema.ClickHouseColumn>();
      ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable0 = new ClickHouseSchema.ClickHouseTable(".0'&6", linkedList1, linkedList0, true);
      ClickHouseTableReference clickHouseTableReference0 = new ClickHouseTableReference(clickHouseSchema_ClickHouseTable0, ".0'&6");
      ClickHouseExpression.ClickHouseJoin.JoinType clickHouseExpression_ClickHouseJoin_JoinType0 = ClickHouseExpression.ClickHouseJoin.JoinType.LEFT_OUTER;
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TWO;
      ClickHouseUInt128Constant clickHouseUInt128Constant0 = new ClickHouseUInt128Constant(bigInteger0);
      ClickHouseAliasOperation clickHouseAliasOperation0 = new ClickHouseAliasOperation(clickHouseUInt128Constant0, "`-iW");
      clickHouseUInt128Constant0.getExpectedValue();
      ClickHouseColumnReference clickHouseColumnReference0 = new ClickHouseColumnReference(clickHouseAliasOperation0);
      ClickHouseToStringVisitor.asString(clickHouseColumnReference0);
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      ClickHouseCastOperation clickHouseCastOperation0 = new ClickHouseCastOperation(clickHouseAliasOperation0, (ClickHouseSchema.ClickHouseLancerDataType) null);
      LinkedList<TableIndex> linkedList0 = new LinkedList<TableIndex>();
      ClickHouseSchema.ClickHouseColumn[] clickHouseSchema_ClickHouseColumnArray0 = new ClickHouseSchema.ClickHouseColumn[2];
      LinkedList<ClickHouseSchema.ClickHouseColumn> linkedList1 = new LinkedList<ClickHouseSchema.ClickHouseColumn>();
      ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable0 = new ClickHouseSchema.ClickHouseTable(".0'&6", linkedList1, linkedList0, false);
      ClickHouseSchema.ClickHouseColumn clickHouseSchema_ClickHouseColumn0 = new ClickHouseSchema.ClickHouseColumn("", (ClickHouseSchema.ClickHouseLancerDataType) null, true, true, clickHouseSchema_ClickHouseTable0);
      ClickHouseSchema.ClickHouseColumn clickHouseSchema_ClickHouseColumn1 = new ClickHouseSchema.ClickHouseColumn((String) null, (ClickHouseSchema.ClickHouseLancerDataType) null, true, false, clickHouseSchema_ClickHouseTable0);
      clickHouseSchema_ClickHouseColumnArray0[1] = clickHouseSchema_ClickHouseColumn1;
      List<ClickHouseSchema.ClickHouseColumn> list0 = Randomly.subset(clickHouseSchema_ClickHouseColumnArray0);
      ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable1 = new ClickHouseSchema.ClickHouseTable(",iG+]~", list0, linkedList0, true);
      ClickHouseTableReference clickHouseTableReference0 = new ClickHouseTableReference(clickHouseSchema_ClickHouseTable0, ",iG+]~");
      clickHouseToStringVisitor0.visit(clickHouseTableReference0);
      ClickHouseExpression.ClickHouseJoin.JoinType clickHouseExpression_ClickHouseJoin_JoinType0 = ClickHouseExpression.ClickHouseJoin.JoinType.LEFT_OUTER;
      ClickHouseFloat32Constant clickHouseFloat32Constant0 = new ClickHouseFloat32Constant(1.0F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      ClickHouseExpression.ClickHouseJoinOnClause clickHouseExpression_ClickHouseJoinOnClause0 = new ClickHouseExpression.ClickHouseJoinOnClause(clickHouseSelect0, (ClickHouseExpression) null);
      ClickHouseExpression.ClickHouseJoin.JoinType clickHouseExpression_ClickHouseJoin_JoinType0 = ClickHouseExpression.ClickHouseJoin.JoinType.LEFT_OUTER;
      ClickHouseExpression.ClickHouseJoin clickHouseExpression_ClickHouseJoin0 = new ClickHouseExpression.ClickHouseJoin((ClickHouseTableReference) null, (ClickHouseTableReference) null, clickHouseExpression_ClickHouseJoin_JoinType0, clickHouseExpression_ClickHouseJoinOnClause0);
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visit(clickHouseExpression_ClickHouseJoin0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.clickhouse.ClickHouseToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      ClickHouseTableReference clickHouseTableReference0 = null;
      sqlancer.clickhouse.ast.ClickHouseSelect clickHouseSelect0 = new sqlancer.clickhouse.ast.ClickHouseSelect();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      ClickHouseExpression.ClickHouseJoin.JoinType clickHouseExpression_ClickHouseJoin_JoinType0 = ClickHouseExpression.ClickHouseJoin.JoinType.RIGHT_OUTER;
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      ClickHouseExpression.ClickHouseJoinOnClause clickHouseExpression_ClickHouseJoinOnClause0 = new ClickHouseExpression.ClickHouseJoinOnClause(clickHouseSelect0, clickHouseSelect0);
      ClickHouseExpression.ClickHouseJoin clickHouseExpression_ClickHouseJoin0 = new ClickHouseExpression.ClickHouseJoin((ClickHouseTableReference) null, (ClickHouseTableReference) null, clickHouseExpression_ClickHouseJoin_JoinType0, clickHouseExpression_ClickHouseJoinOnClause0);
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visit(clickHouseExpression_ClickHouseJoin0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.clickhouse.ClickHouseToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      sqlancer.clickhouse.ast.ClickHouseSelect clickHouseSelect1 = new sqlancer.clickhouse.ast.ClickHouseSelect();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TWO;
      ClickHouseUInt128Constant clickHouseUInt128Constant0 = new ClickHouseUInt128Constant(bigInteger0);
      ClickHouseAliasOperation clickHouseAliasOperation0 = new ClickHouseAliasOperation(clickHouseUInt128Constant0, "`-iW");
      clickHouseUInt128Constant0.getExpectedValue();
      ClickHouseColumnReference clickHouseColumnReference0 = new ClickHouseColumnReference(clickHouseAliasOperation0);
      ClickHouseToStringVisitor.asString(clickHouseColumnReference0);
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      ClickHouseCastOperation clickHouseCastOperation0 = new ClickHouseCastOperation(clickHouseUInt128Constant0, (ClickHouseSchema.ClickHouseLancerDataType) null);
      sqlancer.clickhouse.ast.ClickHouseTableReference clickHouseTableReference0 = new sqlancer.clickhouse.ast.ClickHouseTableReference((sqlancer.clickhouse.ClickHouseSchema.ClickHouseTable) null, "`-iW");
      ClickHouseExpression.ClickHouseJoin.JoinType clickHouseExpression_ClickHouseJoin_JoinType0 = ClickHouseExpression.ClickHouseJoin.JoinType.RIGHT_ANTI;
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      ClickHouseExpression.ClickHouseJoinOnClause clickHouseExpression_ClickHouseJoinOnClause0 = new ClickHouseExpression.ClickHouseJoinOnClause((ClickHouseExpression) null, (ClickHouseExpression) null);
      ClickHouseExpression.ClickHouseJoin.JoinType clickHouseExpression_ClickHouseJoin_JoinType0 = ClickHouseExpression.ClickHouseJoin.JoinType.RIGHT_ANTI;
      ClickHouseExpression.ClickHouseJoin clickHouseExpression_ClickHouseJoin0 = new ClickHouseExpression.ClickHouseJoin((ClickHouseTableReference) null, (ClickHouseTableReference) null, clickHouseExpression_ClickHouseJoin_JoinType0, clickHouseExpression_ClickHouseJoinOnClause0);
      // Undeclared exception!
      try { 
        ((ClickHouseToStringVisitor) clickHouseToStringVisitor0).visit(clickHouseExpression_ClickHouseJoin0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      LinkedList<TableIndex> linkedList0 = new LinkedList<TableIndex>();
      LinkedList<ClickHouseSchema.ClickHouseColumn> linkedList1 = new LinkedList<ClickHouseSchema.ClickHouseColumn>();
      ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable0 = new ClickHouseSchema.ClickHouseTable(".0'&6", linkedList1, linkedList0, true);
      ClickHouseTableReference clickHouseTableReference0 = new ClickHouseTableReference(clickHouseSchema_ClickHouseTable0, ".0'&6");
      clickHouseToStringVisitor0.visit(clickHouseTableReference0);
      assertEquals(".0'&6 AS .0'&6", clickHouseToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TWO;
      ClickHouseUInt128Constant clickHouseUInt128Constant0 = new ClickHouseUInt128Constant(bigInteger0);
      ClickHouseAliasOperation clickHouseAliasOperation0 = new ClickHouseAliasOperation(clickHouseUInt128Constant0, "`-iW");
      clickHouseUInt128Constant0.getExpectedValue();
      ClickHouseColumnReference clickHouseColumnReference0 = new ClickHouseColumnReference(clickHouseAliasOperation0);
      ClickHouseToStringVisitor.asString(clickHouseColumnReference0);
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      ClickHouseCastOperation clickHouseCastOperation0 = new ClickHouseCastOperation(clickHouseAliasOperation0, (ClickHouseSchema.ClickHouseLancerDataType) null);
      LinkedList<TableIndex> linkedList0 = new LinkedList<TableIndex>();
      ClickHouseSchema.ClickHouseColumn[] clickHouseSchema_ClickHouseColumnArray0 = new ClickHouseSchema.ClickHouseColumn[2];
      LinkedList<sqlancer.clickhouse.ClickHouseSchema.ClickHouseColumn> linkedList1 = new LinkedList<sqlancer.clickhouse.ClickHouseSchema.ClickHouseColumn>();
      sqlancer.clickhouse.ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable0 = new sqlancer.clickhouse.ClickHouseSchema.ClickHouseTable(".0'&6", linkedList1, linkedList0, false);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      ClickHouseBinaryLogicalOperation.ClickHouseBinaryLogicalOperator clickHouseBinaryLogicalOperation_ClickHouseBinaryLogicalOperator0 = ClickHouseBinaryLogicalOperation.ClickHouseBinaryLogicalOperator.AND;
      ClickHouseBinaryLogicalOperation clickHouseBinaryLogicalOperation0 = new ClickHouseBinaryLogicalOperation(clickHouseSelect0, clickHouseSelect0, clickHouseBinaryLogicalOperation_ClickHouseBinaryLogicalOperator0);
      clickHouseToStringVisitor0.visit(clickHouseBinaryLogicalOperation0);
      assertEquals("((SELECT )) AND ((SELECT ))", clickHouseToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      sqlancer.clickhouse.ast.ClickHouseSelect clickHouseSelect0 = new sqlancer.clickhouse.ast.ClickHouseSelect();
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visit((ClickHouseConstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      ClickHouseUnaryFunctionOperation.ClickHouseUnaryFunctionOperator clickHouseUnaryFunctionOperation_ClickHouseUnaryFunctionOperator0 = ClickHouseUnaryFunctionOperation.ClickHouseUnaryFunctionOperator.EXP;
      ClickHouseUnaryFunctionOperation clickHouseUnaryFunctionOperation0 = new ClickHouseUnaryFunctionOperation(clickHouseSelect0, clickHouseUnaryFunctionOperation_ClickHouseUnaryFunctionOperator0);
      clickHouseSelect0.setFromClause(clickHouseUnaryFunctionOperation0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visit(clickHouseSelect0, boolean0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      sqlancer.clickhouse.ast.ClickHouseAggregate clickHouseAggregate0 = new sqlancer.clickhouse.ast.ClickHouseAggregate((sqlancer.clickhouse.ast.ClickHouseExpression) null, (sqlancer.clickhouse.ast.ClickHouseAggregate.ClickHouseAggregateFunction) null);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TWO;
      ClickHouseUInt128Constant clickHouseUInt128Constant0 = new ClickHouseUInt128Constant(bigInteger0);
      ClickHouseAliasOperation clickHouseAliasOperation0 = new ClickHouseAliasOperation(clickHouseUInt128Constant0, "`-iW");
      clickHouseUInt128Constant0.getExpectedValue();
      ClickHouseColumnReference clickHouseColumnReference0 = new ClickHouseColumnReference(clickHouseAliasOperation0);
      clickHouseColumnReference0.getExpectedValue();
      ClickHouseToStringVisitor.asString(clickHouseColumnReference0);
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      ClickHouseCastOperation clickHouseCastOperation0 = new ClickHouseCastOperation(clickHouseAliasOperation0, (ClickHouseSchema.ClickHouseLancerDataType) null);
      ClickHouseUInt8Constant clickHouseUInt8Constant0 = new ClickHouseUInt8Constant(1788);
      ClickHouseBinaryLogicalOperation.ClickHouseBinaryLogicalOperator clickHouseBinaryLogicalOperation_ClickHouseBinaryLogicalOperator0 = ClickHouseBinaryLogicalOperation.ClickHouseBinaryLogicalOperator.OR;
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseSubquery.create("(");
      ClickHouseBinaryLogicalOperation.ClickHouseBinaryLogicalOperator clickHouseBinaryLogicalOperation_ClickHouseBinaryLogicalOperator0 = ClickHouseBinaryLogicalOperation.ClickHouseBinaryLogicalOperator.AND;
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClickHouseToStringVisitor.asString((ClickHouseExpression) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      sqlancer.clickhouse.ast.ClickHouseSelect clickHouseSelect0 = new sqlancer.clickhouse.ast.ClickHouseSelect();
      // Undeclared exception!
      try { 
        clickHouseSelect0.getGroupByClause();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      LinkedList<TableIndex> linkedList0 = new LinkedList<TableIndex>();
      LinkedList<ClickHouseSchema.ClickHouseColumn> linkedList1 = new LinkedList<ClickHouseSchema.ClickHouseColumn>();
      ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable0 = new ClickHouseSchema.ClickHouseTable(".0' 6", linkedList1, linkedList0, true);
      ClickHouseTableReference clickHouseTableReference0 = new ClickHouseTableReference(clickHouseSchema_ClickHouseTable0, ".0' 6");
      ClickHouseSchema.ClickHouseColumn clickHouseSchema_ClickHouseColumn0 = new ClickHouseSchema.ClickHouseColumn("", (ClickHouseSchema.ClickHouseLancerDataType) null, true, true, clickHouseSchema_ClickHouseTable0);
      ClickHouseColumnReference clickHouseColumnReference0 = new ClickHouseColumnReference(clickHouseSchema_ClickHouseColumn0, "", "--07xR_");
      clickHouseToStringVisitor0.visit(clickHouseColumnReference0);
      ClickHouseExpression.ClickHouseJoin.JoinType clickHouseExpression_ClickHouseJoin_JoinType0 = ClickHouseExpression.ClickHouseJoin.JoinType.LEFT_OUTER;
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      BigInteger bigInteger0 = BigInteger.ZERO;
      ClickHouseUInt128Constant clickHouseUInt128Constant0 = new ClickHouseUInt128Constant(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClickHouseSelect clickHouseSelect0 = new ClickHouseSelect();
      ClickHouseAliasOperation clickHouseAliasOperation0 = new ClickHouseAliasOperation(clickHouseSelect0, "_rdG<#~v\"");
      ClickHouseColumnReference clickHouseColumnReference0 = new ClickHouseColumnReference(clickHouseAliasOperation0);
      String string0 = ClickHouseToStringVisitor.asString(clickHouseColumnReference0);
      assertEquals("_rdG<#~v\"", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      // Undeclared exception!
      try { 
        ((ClickHouseToStringVisitor) clickHouseToStringVisitor0).visit((ClickHouseCastOperation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClickHouseToStringVisitor clickHouseToStringVisitor0 = new ClickHouseToStringVisitor();
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visit((ClickHouseBinaryLogicalOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.clickhouse.ClickHouseToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      sqlancer.clickhouse.ast.ClickHouseSelect clickHouseSelect0 = new sqlancer.clickhouse.ast.ClickHouseSelect();
      ClickHouseCastOperation clickHouseCastOperation0 = null;
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      // Undeclared exception!
      try { 
        ((ClickHouseToStringVisitor) clickHouseToStringVisitor0).visitSpecific((ClickHouseExpression) null);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      sqlancer.clickhouse.ast.ClickHouseExpression clickHouseExpression0 = null;
      sqlancer.clickhouse.ast.ClickHouseUnaryPostfixOperation.ClickHouseUnaryPostfixOperator clickHouseUnaryPostfixOperation_ClickHouseUnaryPostfixOperator0 = sqlancer.clickhouse.ast.ClickHouseUnaryPostfixOperation.ClickHouseUnaryPostfixOperator.IS_NOT_NULL;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visitSpecific((sqlancer.clickhouse.ast.ClickHouseExpression) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      ClickHouseFloat64Constant clickHouseFloat64Constant0 = new ClickHouseFloat64Constant((-1.7976931348623157E308));
      clickHouseFloat64Constant0.getExpectedValue();
      clickHouseToStringVisitor0.visit((sqlancer.clickhouse.ast.ClickHouseConstant) clickHouseFloat64Constant0);
      sqlancer.clickhouse.ast.ClickHouseUnaryPostfixOperation.ClickHouseUnaryPostfixOperator clickHouseUnaryPostfixOperation_ClickHouseUnaryPostfixOperator0 = sqlancer.clickhouse.ast.ClickHouseUnaryPostfixOperation.ClickHouseUnaryPostfixOperator.IS_NULL;
      boolean boolean0 = true;
      sqlancer.clickhouse.ast.ClickHouseUnaryPostfixOperation clickHouseUnaryPostfixOperation0 = new sqlancer.clickhouse.ast.ClickHouseUnaryPostfixOperation(clickHouseFloat64Constant0, clickHouseUnaryPostfixOperation_ClickHouseUnaryPostfixOperator0, true);
      clickHouseToStringVisitor0.visit(clickHouseUnaryPostfixOperation0);
      sqlancer.clickhouse.ast.ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0 = sqlancer.clickhouse.ast.ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator.MIN2;
      sqlancer.clickhouse.ast.ClickHouseBinaryFunctionOperation clickHouseBinaryFunctionOperation0 = sqlancer.clickhouse.ast.ClickHouseBinaryFunctionOperation.create(clickHouseFloat64Constant0, clickHouseFloat64Constant0, clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0);
      clickHouseToStringVisitor0.visit(clickHouseBinaryFunctionOperation0);
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visit((sqlancer.clickhouse.ast.ClickHouseAggregate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.clickhouse.ClickHouseToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visit((sqlancer.clickhouse.ast.ClickHouseTableReference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.clickhouse.ClickHouseToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      sqlancer.clickhouse.ast.ClickHouseSelect clickHouseSelect0 = new sqlancer.clickhouse.ast.ClickHouseSelect();
      BigInteger bigInteger0 = BigInteger.ZERO;
      ClickHouseInt128Constant clickHouseInt128Constant0 = new ClickHouseInt128Constant(bigInteger0);
      clickHouseSelect0.setHavingClause((sqlancer.clickhouse.ast.ClickHouseExpression) clickHouseInt128Constant0);
      clickHouseToStringVisitor0.visit((sqlancer.clickhouse.ast.ClickHouseExpression) clickHouseSelect0);
      ClickHouseBinaryComparisonOperation.ClickHouseBinaryComparisonOperator clickHouseBinaryComparisonOperation_ClickHouseBinaryComparisonOperator0 = ClickHouseBinaryComparisonOperation.ClickHouseBinaryComparisonOperator.GREATER;
      ClickHouseBinaryComparisonOperation clickHouseBinaryComparisonOperation0 = ClickHouseBinaryComparisonOperation.create(clickHouseSelect0, clickHouseInt128Constant0, clickHouseBinaryComparisonOperation_ClickHouseBinaryComparisonOperator0);
      clickHouseBinaryComparisonOperation0.getExpectedValue();
      clickHouseSelect0.setLimitClause((sqlancer.clickhouse.ast.ClickHouseExpression) null);
      clickHouseToStringVisitor0.visit(clickHouseSelect0, false);
      sqlancer.clickhouse.ClickHouseToStringVisitor.asString(clickHouseSelect0);
      sqlancer.clickhouse.ast.ClickHouseTableReference clickHouseTableReference0 = null;
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visit((sqlancer.clickhouse.ast.ClickHouseTableReference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.clickhouse.ClickHouseToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      sqlancer.clickhouse.ast.ClickHouseSelect clickHouseSelect0 = new sqlancer.clickhouse.ast.ClickHouseSelect();
      ClickHouseBooleanConstant clickHouseBooleanConstant0 = new ClickHouseBooleanConstant(true);
      clickHouseSelect0.setHavingClause((sqlancer.clickhouse.ast.ClickHouseExpression) clickHouseBooleanConstant0);
      sqlancer.clickhouse.ClickHouseToStringVisitor.asString(clickHouseSelect0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      sqlancer.clickhouse.ast.ClickHouseSelect clickHouseSelect0 = new sqlancer.clickhouse.ast.ClickHouseSelect();
      clickHouseToStringVisitor0.visit(clickHouseSelect0, false);
      assertEquals("SELECT ", clickHouseToStringVisitor0.get());
      
      clickHouseSelect0.setOffsetClause((sqlancer.clickhouse.ast.ClickHouseExpression) null);
      sqlancer.clickhouse.ast.ClickHouseAggregate clickHouseAggregate0 = new sqlancer.clickhouse.ast.ClickHouseAggregate(clickHouseSelect0, (sqlancer.clickhouse.ast.ClickHouseAggregate.ClickHouseAggregateFunction) null);
      clickHouseToStringVisitor0.visit(clickHouseAggregate0);
      assertEquals("SELECT null((SELECT ))", clickHouseToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      sqlancer.clickhouse.ast.ClickHouseSelect clickHouseSelect0 = new sqlancer.clickhouse.ast.ClickHouseSelect();
      clickHouseSelect0.getHavingClause();
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      sqlancer.clickhouse.ast.ClickHouseUnaryPrefixOperation.ClickHouseUnaryPrefixOperator clickHouseUnaryPrefixOperation_ClickHouseUnaryPrefixOperator0 = sqlancer.clickhouse.ast.ClickHouseUnaryPrefixOperation.ClickHouseUnaryPrefixOperator.MINUS;
      sqlancer.clickhouse.ast.ClickHouseUnaryPrefixOperation clickHouseUnaryPrefixOperation0 = new sqlancer.clickhouse.ast.ClickHouseUnaryPrefixOperation((sqlancer.clickhouse.ast.ClickHouseExpression) null, clickHouseUnaryPrefixOperation_ClickHouseUnaryPrefixOperator0);
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visit(clickHouseUnaryPrefixOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseJoin.JoinType clickHouseExpression_ClickHouseJoin_JoinType0 = sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseJoin.JoinType.RIGHT_ANTI;
      sqlancer.clickhouse.ast.ClickHouseSelect clickHouseSelect0 = new sqlancer.clickhouse.ast.ClickHouseSelect();
      sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseJoinOnClause clickHouseExpression_ClickHouseJoinOnClause0 = new sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseJoinOnClause(clickHouseSelect0, clickHouseSelect0);
      sqlancer.clickhouse.ClickHouseSchema.ClickHouseTable clickHouseSchema_ClickHouseTable0 = null;
      String string0 = "0Q6h";
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visit((sqlancer.clickhouse.ast.ClickHouseUnaryPrefixOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.clickhouse.ClickHouseToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      sqlancer.clickhouse.ast.ClickHouseSelect clickHouseSelect0 = new sqlancer.clickhouse.ast.ClickHouseSelect();
      sqlancer.clickhouse.ast.ClickHouseSelect.SelectType clickHouseSelect_SelectType0 = sqlancer.clickhouse.ast.ClickHouseSelect.SelectType.DISTINCT;
      clickHouseSelect0.setSelectType(clickHouseSelect_SelectType0);
      int int0 = 2147483645;
      ClickHouseInt8Constant clickHouseInt8Constant0 = new ClickHouseInt8Constant(2147483645);
      clickHouseInt8Constant0.getExpectedValue();
      clickHouseSelect0.setWhereClause((sqlancer.clickhouse.ast.ClickHouseExpression) clickHouseInt8Constant0);
      boolean boolean0 = true;
      clickHouseToStringVisitor0.visit(clickHouseSelect0, true);
      String string0 = "fDNYW[%";
      sqlancer.clickhouse.ast.ClickHouseExpression clickHouseExpression0 = sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseSubquery.create("fDNYW[%");
      sqlancer.clickhouse.ast.ClickHouseBinaryLogicalOperation.ClickHouseBinaryLogicalOperator clickHouseBinaryLogicalOperation_ClickHouseBinaryLogicalOperator0 = sqlancer.clickhouse.ast.ClickHouseBinaryLogicalOperation.ClickHouseBinaryLogicalOperator.AND;
      sqlancer.clickhouse.ast.ClickHouseBinaryLogicalOperation clickHouseBinaryLogicalOperation0 = new sqlancer.clickhouse.ast.ClickHouseBinaryLogicalOperation(clickHouseSelect0, clickHouseExpression0, clickHouseBinaryLogicalOperation_ClickHouseBinaryLogicalOperator0);
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visit(clickHouseBinaryLogicalOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // sqlancer.clickhouse.ast.ClickHouseExpression$ClickHouseSubquery@4
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      sqlancer.clickhouse.ast.ClickHouseSelect clickHouseSelect0 = new sqlancer.clickhouse.ast.ClickHouseSelect();
      boolean boolean0 = true;
      ClickHouseBinaryComparisonOperation.ClickHouseBinaryComparisonOperator clickHouseBinaryComparisonOperation_ClickHouseBinaryComparisonOperator0 = ClickHouseBinaryComparisonOperation.ClickHouseBinaryComparisonOperator.EQUALS;
      ClickHouseBinaryComparisonOperation clickHouseBinaryComparisonOperation0 = ClickHouseBinaryComparisonOperation.create(clickHouseSelect0, clickHouseSelect0, clickHouseBinaryComparisonOperation_ClickHouseBinaryComparisonOperator0);
      clickHouseSelect0.setFromClause(clickHouseBinaryComparisonOperation0);
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visit(clickHouseSelect0, boolean0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      sqlancer.clickhouse.ast.ClickHouseSelect clickHouseSelect0 = new sqlancer.clickhouse.ast.ClickHouseSelect();
      clickHouseToStringVisitor0.visit(clickHouseSelect0, true);
      sqlancer.clickhouse.ast.ClickHouseAggregate clickHouseAggregate0 = null;
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visit((sqlancer.clickhouse.ast.ClickHouseAggregate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.clickhouse.ClickHouseToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      sqlancer.clickhouse.ast.ClickHouseBinaryLogicalOperation.ClickHouseBinaryLogicalOperator clickHouseBinaryLogicalOperation_ClickHouseBinaryLogicalOperator0 = sqlancer.clickhouse.ast.ClickHouseBinaryLogicalOperation.ClickHouseBinaryLogicalOperator.AND;
      BigInteger bigInteger0 = BigInteger.TWO;
      ClickHouseInt64Constant clickHouseInt64Constant0 = new ClickHouseInt64Constant(bigInteger0);
      sqlancer.clickhouse.ast.ClickHouseConstant clickHouseConstant0 = clickHouseBinaryLogicalOperation_ClickHouseBinaryLogicalOperator0.apply(clickHouseInt64Constant0, clickHouseInt64Constant0);
      sqlancer.clickhouse.ast.ClickHouseAggregate clickHouseAggregate0 = new sqlancer.clickhouse.ast.ClickHouseAggregate(clickHouseConstant0, (sqlancer.clickhouse.ast.ClickHouseAggregate.ClickHouseAggregateFunction) null);
      clickHouseToStringVisitor0.visit(clickHouseAggregate0);
      sqlancer.clickhouse.ast.ClickHouseUnaryPrefixOperation.ClickHouseUnaryPrefixOperator clickHouseUnaryPrefixOperation_ClickHouseUnaryPrefixOperator0 = sqlancer.clickhouse.ast.ClickHouseUnaryPrefixOperation.ClickHouseUnaryPrefixOperator.NOT;
      sqlancer.clickhouse.ast.ClickHouseUnaryPrefixOperation clickHouseUnaryPrefixOperation0 = new sqlancer.clickhouse.ast.ClickHouseUnaryPrefixOperation(clickHouseAggregate0, clickHouseUnaryPrefixOperation_ClickHouseUnaryPrefixOperator0);
      clickHouseUnaryPrefixOperation0.getExpectedValue();
      clickHouseToStringVisitor0.visit(clickHouseUnaryPrefixOperation0);
      sqlancer.clickhouse.ast.ClickHouseUnaryPostfixOperation.ClickHouseUnaryPostfixOperator clickHouseUnaryPostfixOperation_ClickHouseUnaryPostfixOperator0 = sqlancer.clickhouse.ast.ClickHouseUnaryPostfixOperation.ClickHouseUnaryPostfixOperator.IS_NOT_NULL;
      sqlancer.clickhouse.ast.ClickHouseUnaryPostfixOperation clickHouseUnaryPostfixOperation0 = new sqlancer.clickhouse.ast.ClickHouseUnaryPostfixOperation(clickHouseInt64Constant0, clickHouseUnaryPostfixOperation_ClickHouseUnaryPostfixOperator0, false);
      clickHouseToStringVisitor0.visit(clickHouseUnaryPostfixOperation0);
      sqlancer.clickhouse.ClickHouseToStringVisitor.asString(clickHouseUnaryPostfixOperation0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visit((sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseJoin) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.clickhouse.ClickHouseToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseJoin.JoinType clickHouseExpression_ClickHouseJoin_JoinType0 = sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseJoin.JoinType.INNER;
      sqlancer.clickhouse.ast.ClickHouseSelect clickHouseSelect0 = new sqlancer.clickhouse.ast.ClickHouseSelect();
      sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseJoinOnClause clickHouseExpression_ClickHouseJoinOnClause0 = new sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseJoinOnClause(clickHouseSelect0, clickHouseSelect0);
      sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseJoin clickHouseExpression_ClickHouseJoin0 = new sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseJoin((sqlancer.clickhouse.ast.ClickHouseTableReference) null, (sqlancer.clickhouse.ast.ClickHouseTableReference) null, clickHouseExpression_ClickHouseJoin_JoinType0, clickHouseExpression_ClickHouseJoinOnClause0);
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visit(clickHouseExpression_ClickHouseJoin0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.clickhouse.ClickHouseToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseJoin.JoinType clickHouseExpression_ClickHouseJoin_JoinType0 = sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseJoin.JoinType.CROSS;
      sqlancer.clickhouse.ast.ClickHouseSelect clickHouseSelect0 = new sqlancer.clickhouse.ast.ClickHouseSelect();
      sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseJoinOnClause clickHouseExpression_ClickHouseJoinOnClause0 = new sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseJoinOnClause(clickHouseSelect0, clickHouseSelect0);
      sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseJoin clickHouseExpression_ClickHouseJoin0 = new sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseJoin((sqlancer.clickhouse.ast.ClickHouseTableReference) null, (sqlancer.clickhouse.ast.ClickHouseTableReference) null, clickHouseExpression_ClickHouseJoin_JoinType0, clickHouseExpression_ClickHouseJoinOnClause0);
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visit(clickHouseExpression_ClickHouseJoin0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.clickhouse.ClickHouseToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseJoin.JoinType clickHouseExpression_ClickHouseJoin_JoinType0 = sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseJoin.JoinType.CROSS;
      sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseJoin clickHouseExpression_ClickHouseJoin0 = new sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseJoin((sqlancer.clickhouse.ast.ClickHouseTableReference) null, (sqlancer.clickhouse.ast.ClickHouseTableReference) null, clickHouseExpression_ClickHouseJoin_JoinType0);
      clickHouseExpression_ClickHouseJoin0.getExpectedValue();
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visit(clickHouseExpression_ClickHouseJoin0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.clickhouse.ClickHouseToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visit((sqlancer.clickhouse.ast.ClickHouseAggregate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.clickhouse.ClickHouseToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      ClickHouseUInt16Constant clickHouseUInt16Constant0 = new ClickHouseUInt16Constant(0L);
      sqlancer.clickhouse.ast.ClickHouseAggregate clickHouseAggregate0 = new sqlancer.clickhouse.ast.ClickHouseAggregate(clickHouseUInt16Constant0, (sqlancer.clickhouse.ast.ClickHouseAggregate.ClickHouseAggregateFunction) null);
      clickHouseToStringVisitor0.visit(clickHouseAggregate0);
      sqlancer.clickhouse.ClickHouseToStringVisitor.asString(clickHouseUInt16Constant0);
      sqlancer.clickhouse.ast.ClickHouseUnaryPrefixOperation.ClickHouseUnaryPrefixOperator clickHouseUnaryPrefixOperation_ClickHouseUnaryPrefixOperator0 = sqlancer.clickhouse.ast.ClickHouseUnaryPrefixOperation.ClickHouseUnaryPrefixOperator.MINUS;
      sqlancer.clickhouse.ast.ClickHouseUnaryPrefixOperation clickHouseUnaryPrefixOperation0 = new sqlancer.clickhouse.ast.ClickHouseUnaryPrefixOperation(clickHouseUInt16Constant0, clickHouseUnaryPrefixOperation_ClickHouseUnaryPrefixOperator0);
      clickHouseToStringVisitor0.visit(clickHouseUnaryPrefixOperation0);
      sqlancer.clickhouse.ast.ClickHouseAliasOperation clickHouseAliasOperation0 = new sqlancer.clickhouse.ast.ClickHouseAliasOperation(clickHouseUInt16Constant0, "sqlancer.clickhouse.ast.constant.ClickHouseUInt16Constant@0000000002");
      clickHouseAliasOperation0.getExpectedValue();
      clickHouseAliasOperation0.getExpectedValue();
      clickHouseAliasOperation0.getExpectedValue();
      clickHouseToStringVisitor0.visit(clickHouseAliasOperation0);
      sqlancer.clickhouse.ast.ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0 = sqlancer.clickhouse.ast.ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator.GCD;
      sqlancer.clickhouse.ast.ClickHouseBinaryFunctionOperation clickHouseBinaryFunctionOperation0 = sqlancer.clickhouse.ast.ClickHouseBinaryFunctionOperation.create(clickHouseAggregate0, clickHouseUnaryPrefixOperation0, clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0);
      clickHouseToStringVisitor0.visit(clickHouseBinaryFunctionOperation0);
      // Undeclared exception!
      try { 
        sqlancer.Randomly.nonEmptySubsetLeast((List<sqlancer.clickhouse.ClickHouseSchema.ClickHouseColumn>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.Randomly", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseSubquery clickHouseExpression_ClickHouseSubquery0 = new sqlancer.clickhouse.ast.ClickHouseExpression.ClickHouseSubquery("MDE2gY=.");
      sqlancer.clickhouse.ast.ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0 = sqlancer.clickhouse.ast.ClickHouseBinaryFunctionOperation.ClickHouseBinaryFunctionOperator.GCD;
      sqlancer.clickhouse.ast.ClickHouseBinaryFunctionOperation clickHouseBinaryFunctionOperation0 = new sqlancer.clickhouse.ast.ClickHouseBinaryFunctionOperation(clickHouseExpression_ClickHouseSubquery0, clickHouseExpression_ClickHouseSubquery0, clickHouseBinaryFunctionOperation_ClickHouseBinaryFunctionOperator0);
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visit(clickHouseBinaryFunctionOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // sqlancer.clickhouse.ast.ClickHouseExpression$ClickHouseSubquery@2
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      sqlancer.clickhouse.ast.ClickHouseCastOperation clickHouseCastOperation0 = null;
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      sqlancer.clickhouse.ast.ClickHouseUnaryPostfixOperation.ClickHouseUnaryPostfixOperator clickHouseUnaryPostfixOperation_ClickHouseUnaryPostfixOperator0 = sqlancer.clickhouse.ast.ClickHouseUnaryPostfixOperation.ClickHouseUnaryPostfixOperator.IS_NOT_NULL;
      sqlancer.clickhouse.ast.ClickHouseUnaryPostfixOperation clickHouseUnaryPostfixOperation0 = new sqlancer.clickhouse.ast.ClickHouseUnaryPostfixOperation((sqlancer.clickhouse.ast.ClickHouseExpression) null, clickHouseUnaryPostfixOperation_ClickHouseUnaryPostfixOperator0, true);
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visit(clickHouseUnaryPostfixOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      BigInteger bigInteger0 = BigInteger.TWO;
      sqlancer.clickhouse.ast.constant.ClickHouseUInt256Constant clickHouseUInt256Constant0 = new sqlancer.clickhouse.ast.constant.ClickHouseUInt256Constant(bigInteger0);
      sqlancer.clickhouse.ast.ClickHouseUnaryPostfixOperation.ClickHouseUnaryPostfixOperator clickHouseUnaryPostfixOperation_ClickHouseUnaryPostfixOperator0 = sqlancer.clickhouse.ast.ClickHouseUnaryPostfixOperation.ClickHouseUnaryPostfixOperator.IS_NOT_NULL;
      sqlancer.clickhouse.ast.ClickHouseUnaryPostfixOperation clickHouseUnaryPostfixOperation0 = new sqlancer.clickhouse.ast.ClickHouseUnaryPostfixOperation(clickHouseUInt256Constant0, clickHouseUnaryPostfixOperation_ClickHouseUnaryPostfixOperator0, true);
      clickHouseUnaryPostfixOperation0.setNegate(true);
      clickHouseToStringVisitor0.visit(clickHouseUnaryPostfixOperation0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      int int0 = (-725);
      ClickHouseUInt8Constant clickHouseUInt8Constant0 = new ClickHouseUInt8Constant((-725));
      clickHouseUInt8Constant0.getExpectedValue();
      clickHouseUInt8Constant0.getExpectedValue();
      sqlancer.clickhouse.ast.ClickHouseUnaryPrefixOperation.ClickHouseUnaryPrefixOperator clickHouseUnaryPrefixOperation_ClickHouseUnaryPrefixOperator0 = sqlancer.clickhouse.ast.ClickHouseUnaryPrefixOperation.ClickHouseUnaryPrefixOperator.MINUS;
      sqlancer.clickhouse.ast.ClickHouseUnaryPrefixOperation.ClickHouseUnaryPrefixOperator clickHouseUnaryPrefixOperation_ClickHouseUnaryPrefixOperator1 = sqlancer.clickhouse.ast.ClickHouseUnaryPrefixOperation.ClickHouseUnaryPrefixOperator.NOT;
      sqlancer.clickhouse.ast.ClickHouseUnaryPrefixOperation clickHouseUnaryPrefixOperation0 = new sqlancer.clickhouse.ast.ClickHouseUnaryPrefixOperation(clickHouseUInt8Constant0, clickHouseUnaryPrefixOperation_ClickHouseUnaryPrefixOperator1);
      clickHouseToStringVisitor0.visit(clickHouseUnaryPrefixOperation0);
      clickHouseUInt8Constant0.getExpectedValue();
      clickHouseUInt8Constant0.getExpectedValue();
      sqlancer.clickhouse.ast.ClickHouseUnaryPrefixOperation clickHouseUnaryPrefixOperation1 = new sqlancer.clickhouse.ast.ClickHouseUnaryPrefixOperation(clickHouseUInt8Constant0, clickHouseUnaryPrefixOperation_ClickHouseUnaryPrefixOperator0);
      clickHouseToStringVisitor0.visit(clickHouseUnaryPrefixOperation1);
      sqlancer.clickhouse.ast.ClickHouseUnaryPostfixOperation.ClickHouseUnaryPostfixOperator clickHouseUnaryPostfixOperation_ClickHouseUnaryPostfixOperator0 = sqlancer.clickhouse.ast.ClickHouseUnaryPostfixOperation.ClickHouseUnaryPostfixOperator.IS_NULL;
      sqlancer.clickhouse.ast.ClickHouseUnaryPostfixOperation clickHouseUnaryPostfixOperation0 = new sqlancer.clickhouse.ast.ClickHouseUnaryPostfixOperation((sqlancer.clickhouse.ast.ClickHouseExpression) null, clickHouseUnaryPostfixOperation_ClickHouseUnaryPostfixOperator0, false);
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visit(clickHouseUnaryPostfixOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      sqlancer.clickhouse.ast.ClickHouseSelect clickHouseSelect0 = new sqlancer.clickhouse.ast.ClickHouseSelect();
      sqlancer.clickhouse.ast.ClickHouseUnaryPrefixOperation.ClickHouseUnaryPrefixOperator clickHouseUnaryPrefixOperation_ClickHouseUnaryPrefixOperator0 = sqlancer.clickhouse.ast.ClickHouseUnaryPrefixOperation.ClickHouseUnaryPrefixOperator.MINUS;
      sqlancer.clickhouse.ast.ClickHouseUnaryPrefixOperation clickHouseUnaryPrefixOperation0 = new sqlancer.clickhouse.ast.ClickHouseUnaryPrefixOperation(clickHouseSelect0, clickHouseUnaryPrefixOperation_ClickHouseUnaryPrefixOperator0);
      clickHouseToStringVisitor0.visit(clickHouseUnaryPrefixOperation0);
      assertEquals("- ((SELECT ))", clickHouseToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visit((sqlancer.clickhouse.ast.ClickHouseColumnReference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.clickhouse.ClickHouseToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      sqlancer.clickhouse.ast.ClickHouseColumnReference clickHouseColumnReference0 = null;
      // Undeclared exception!
      try { 
        clickHouseToStringVisitor0.visit((sqlancer.clickhouse.ast.ClickHouseColumnReference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.clickhouse.ClickHouseToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      sqlancer.clickhouse.ast.ClickHouseSelect clickHouseSelect0 = new sqlancer.clickhouse.ast.ClickHouseSelect();
      String string0 = sqlancer.clickhouse.ClickHouseToStringVisitor.asString(clickHouseSelect0);
      assertEquals("(SELECT )", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      sqlancer.clickhouse.ClickHouseToStringVisitor clickHouseToStringVisitor0 = new sqlancer.clickhouse.ClickHouseToStringVisitor();
      ClickHouseFloat64Constant clickHouseFloat64Constant0 = new ClickHouseFloat64Constant((-1146.57822));
      sqlancer.clickhouse.ast.ClickHouseAliasOperation clickHouseAliasOperation0 = new sqlancer.clickhouse.ast.ClickHouseAliasOperation(clickHouseFloat64Constant0, "\"&lYWA>$4@Te24\"wI");
      clickHouseToStringVisitor0.visit(clickHouseAliasOperation0);
      clickHouseAliasOperation0.getExpectedValue();
      sqlancer.clickhouse.ast.ClickHouseBinaryLogicalOperation.ClickHouseBinaryLogicalOperator clickHouseBinaryLogicalOperation_ClickHouseBinaryLogicalOperator0 = sqlancer.clickhouse.ast.ClickHouseBinaryLogicalOperation.ClickHouseBinaryLogicalOperator.AND;
      sqlancer.clickhouse.ast.ClickHouseBinaryLogicalOperation clickHouseBinaryLogicalOperation0 = new sqlancer.clickhouse.ast.ClickHouseBinaryLogicalOperation(clickHouseFloat64Constant0, clickHouseFloat64Constant0, clickHouseBinaryLogicalOperation_ClickHouseBinaryLogicalOperator0);
      clickHouseAliasOperation0.getExpectedValue();
      // Undeclared exception!
      try { 
        clickHouseBinaryLogicalOperation0.getExpectedValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.clickhouse.ast.ClickHouseBinaryLogicalOperation$ClickHouseBinaryLogicalOperator$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      sqlancer.clickhouse.ast.ClickHouseSelect clickHouseSelect0 = new sqlancer.clickhouse.ast.ClickHouseSelect();
      sqlancer.clickhouse.ast.ClickHouseAliasOperation clickHouseAliasOperation0 = new sqlancer.clickhouse.ast.ClickHouseAliasOperation(clickHouseSelect0, "_rdG<#~v\"");
      String string0 = sqlancer.clickhouse.ClickHouseToStringVisitor.asString(clickHouseAliasOperation0);
      assertEquals("(SELECT ) AS `_rdG<#~v\"`", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ClickHouseUInt8Constant clickHouseUInt8Constant0 = new ClickHouseUInt8Constant(1449);
      sqlancer.clickhouse.ClickHouseToStringVisitor.asString(clickHouseUInt8Constant0);
  }
}
