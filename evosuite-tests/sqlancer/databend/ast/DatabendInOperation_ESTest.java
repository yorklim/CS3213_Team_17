/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 08:32:26 GMT 2025
 */

package sqlancer.databend.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.databend.DatabendSchema;
import sqlancer.databend.ast.DatabendColumnValue;
import sqlancer.databend.ast.DatabendConstant;
import sqlancer.databend.ast.DatabendExpression;
import sqlancer.databend.ast.DatabendInOperation;
import sqlancer.databend.ast.DatabendSelect;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatabendInOperation_ESTest extends DatabendInOperation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DatabendInOperation databendInOperation0 = new DatabendInOperation((DatabendExpression) null, (List<DatabendExpression>) null, true);
      // Undeclared exception!
      try { 
        databendInOperation0.getExpectedValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.ast.DatabendInOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<DatabendExpression> linkedList0 = new LinkedList<DatabendExpression>();
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("sqlancer.clickhouse.ClickHouseProvider$ClickHouseGlobalState");
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("sqlancer.clickhouse.ClickHouseProvider$ClickHouseGlobalState", databendSchema_DatabendCompositeDataType0, false, false);
      DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create(databendSchema_DatabendColumn0, databendConstant_DatabendStringConstant0);
      linkedList0.add((DatabendExpression) databendColumnValue0);
      DatabendInOperation databendInOperation0 = new DatabendInOperation(databendColumnValue0, linkedList0, true);
      DatabendInOperation databendInOperation1 = new DatabendInOperation(databendInOperation0, linkedList0, true);
      // Undeclared exception!
      try { 
        databendInOperation1.getExpectedValue();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // false
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<DatabendExpression> linkedList0 = new LinkedList<DatabendExpression>();
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("sqlancer.clickhouse.ClickHouseProvider$ClickHouseGlobalState");
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("sqlancer.clickhouse.ClickHouseProvider$ClickHouseGlobalState", databendSchema_DatabendCompositeDataType0, false, false);
      DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create(databendSchema_DatabendColumn0, databendConstant_DatabendStringConstant0);
      linkedList0.add((DatabendExpression) databendColumnValue0);
      DatabendInOperation databendInOperation0 = new DatabendInOperation(databendColumnValue0, linkedList0, true);
      DatabendConstant databendConstant0 = databendInOperation0.getExpectedValue();
      assertEquals("false", databendConstant0.toString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DatabendConstant.DatabendDateConstant databendConstant_DatabendDateConstant0 = new DatabendConstant.DatabendDateConstant((-20L));
      LinkedList<DatabendExpression> linkedList0 = new LinkedList<DatabendExpression>();
      linkedList0.add((DatabendExpression) databendConstant_DatabendDateConstant0);
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("1969-12-31");
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("1969-12-31", databendSchema_DatabendCompositeDataType0, false, false);
      DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0, databendConstant_DatabendStringConstant0);
      DatabendInOperation databendInOperation0 = new DatabendInOperation(databendColumnValue0, linkedList0, false);
      DatabendConstant databendConstant0 = databendInOperation0.getExpectedValue();
      assertNull(databendConstant0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<DatabendExpression> linkedList0 = new LinkedList<DatabendExpression>();
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("sqlancer.clickhouse.ClickHouseProvider$ClickHouseGlobalState");
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("sqlancer.clickhouse.ClickHouseProvider$ClickHouseGlobalState", databendSchema_DatabendCompositeDataType0, false, false);
      DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create(databendSchema_DatabendColumn0, databendConstant_DatabendStringConstant0);
      linkedList0.add((DatabendExpression) databendColumnValue0);
      DatabendInOperation databendInOperation0 = new DatabendInOperation(databendColumnValue0, linkedList0, false);
      DatabendConstant databendConstant0 = databendInOperation0.getExpectedValue();
      assertNotNull(databendConstant0);
      assertEquals("true", databendConstant0.toString());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("", databendSchema_DatabendCompositeDataType0, true, true);
      DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
      DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0, databendConstant0);
      DatabendInOperation databendInOperation0 = new DatabendInOperation(databendColumnValue0, (List<DatabendExpression>) null, true);
      DatabendConstant databendConstant1 = databendInOperation0.getExpectedValue();
      assertFalse(databendConstant1.equals((Object)databendConstant0));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DatabendSelect databendSelect0 = new DatabendSelect();
      List<DatabendExpression> list0 = databendSelect0.getGroupByClause();
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(455L);
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.VARCHAR;
      DatabendConstant databendConstant0 = databendConstant_DatabendIntConstant0.cast(databendSchema_DatabendDataType0);
      DatabendInOperation databendInOperation0 = new DatabendInOperation(databendConstant0, list0, false);
      DatabendConstant databendConstant1 = databendInOperation0.getExpectedValue();
      assertNull(databendConstant1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedList<DatabendExpression> linkedList0 = new LinkedList<DatabendExpression>();
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("*");
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("select TABLE_NAME, ENGINE from information_schema.TABLES where table_schema = '", databendSchema_DatabendCompositeDataType0, true, false);
      DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create(databendSchema_DatabendColumn0, databendConstant_DatabendStringConstant0);
      DatabendInOperation databendInOperation0 = new DatabendInOperation(databendColumnValue0, linkedList0, false);
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = databendInOperation0.getExpectedType();
      assertEquals(DatabendSchema.DatabendDataType.BOOLEAN, databendSchema_DatabendDataType0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LinkedList<DatabendExpression> linkedList0 = new LinkedList<DatabendExpression>();
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("sqlancer.clickhouse.ClickHouseProvider$ClickHouseGlobalState");
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("sqlancer.clickhouse.ClickHouseProvider$ClickHouseGlobalState", databendSchema_DatabendCompositeDataType0, false, false);
      DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create(databendSchema_DatabendColumn0, databendConstant_DatabendStringConstant0);
      DatabendInOperation databendInOperation0 = new DatabendInOperation(databendColumnValue0, linkedList0, false);
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant)databendInOperation0.getExpectedValue();
      assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
  }
}
