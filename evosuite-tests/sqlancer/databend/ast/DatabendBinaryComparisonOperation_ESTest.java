/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 08:40:51 GMT 2025
 */

package sqlancer.databend.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.databend.DatabendSchema;
import sqlancer.databend.ast.DatabendBetweenOperation;
import sqlancer.databend.ast.DatabendBinaryComparisonOperation;
import sqlancer.databend.ast.DatabendBinaryLogicalOperation;
import sqlancer.databend.ast.DatabendColumnValue;
import sqlancer.databend.ast.DatabendConstant;
import sqlancer.databend.ast.DatabendExpression;
import sqlancer.databend.ast.DatabendFunctionOperation;
import sqlancer.databend.ast.DatabendSelect;
import sqlancer.databend.ast.DatabendUnaryPostfixOperation;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatabendBinaryComparisonOperation_ESTest extends DatabendBinaryComparisonOperation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(0.0);
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.LESS_EQUALS;
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant1 = new DatabendConstant.DatabendFloatConstant(0.0);
      DatabendConstant databendConstant0 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0.apply(databendConstant_DatabendFloatConstant0, databendConstant_DatabendFloatConstant1);
      assertNull(databendConstant0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.LESS;
      DatabendConstant databendConstant0 = DatabendConstant.createIntConstant((-2522L));
      DatabendConstant databendConstant1 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0.apply(databendConstant0, databendConstant0);
      DatabendConstant databendConstant2 = DatabendConstant.createFloatConstant((-2522L));
      // Undeclared exception!
      try { 
        databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0.apply(databendConstant1, databendConstant2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // -2522.0
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createIntConstant(440L);
      DatabendConstant databendConstant1 = DatabendConstant.createFloatConstant(960.8267);
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.IS_DISTINCT;
      // Undeclared exception!
      try { 
        databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0.apply(databendConstant1, databendConstant0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.ast.DatabendBinaryComparisonOperation$DatabendBinaryComparisonOperator$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.EQUALS;
      DatabendConstant databendConstant0 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0.apply(databendConstant_DatabendNullConstant0, (DatabendConstant) null);
      assertEquals("NULL", databendConstant0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DatabendSelect databendSelect0 = new DatabendSelect();
      List<DatabendExpression> list0 = databendSelect0.getJoinList();
      DatabendFunctionOperation<Object> databendFunctionOperation0 = new DatabendFunctionOperation<Object>(list0, databendSelect0);
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.LESS;
      DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(databendFunctionOperation0, (DatabendExpression) null, databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
      DatabendExpression databendExpression0 = databendBinaryComparisonOperation0.getRightExpression();
      assertNull(databendExpression0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.EQUALS;
      DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(databendConstant_DatabendNullConstant0, databendConstant_DatabendNullConstant0, databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator1 = databendBinaryComparisonOperation0.getOp();
      assertSame(databendBinaryComparisonOperation_DatabendBinaryComparisonOperator1, databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.IS_NOT_DISTINCT;
      DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation((DatabendExpression) null, (DatabendExpression) null, databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
      DatabendExpression databendExpression0 = databendBinaryComparisonOperation0.getLeftExpression();
      assertNull(databendExpression0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("9", databendSchema_DatabendCompositeDataType0, true, true);
      DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0, databendConstant_DatabendNullConstant0);
      DatabendBetweenOperation databendBetweenOperation0 = new DatabendBetweenOperation(databendColumnValue0, databendColumnValue0, databendColumnValue0, false);
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.LESS_EQUALS;
      DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(databendBetweenOperation0, databendColumnValue0, databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
      DatabendConstant databendConstant0 = databendBinaryComparisonOperation0.getExpectedValue();
      assertNotSame(databendConstant0, databendConstant_DatabendNullConstant0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.LESS;
      DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation((DatabendExpression) null, (DatabendExpression) null, databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
      // Undeclared exception!
      try { 
        databendBinaryComparisonOperation0.getExpectedValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.ast.DatabendBinaryComparisonOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.LESS;
      DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(databendConstant0, databendConstant0, databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
      DatabendExpression databendExpression0 = databendBinaryComparisonOperation0.getRightExpression();
      assertSame(databendExpression0, databendConstant0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createIntConstant(431L);
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.NOT_EQUALS;
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant)databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0.apply(databendConstant0, databendConstant0);
      DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(databendConstant0, databendConstant_DatabendBooleanConstant0, databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
      databendBinaryComparisonOperation0.getLeftExpression();
      assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
      assertFalse(databendConstant_DatabendBooleanConstant0.asBoolean());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER_EQUALS;
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.DATE;
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(databendSchema_DatabendDataType0, 153);
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("", databendSchema_DatabendCompositeDataType0, true, true);
      DatabendConstant databendConstant0 = DatabendConstant.createStringConstant("");
      DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0 = DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator.IS_NULL;
      DatabendConstant databendConstant1 = databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0.apply(databendConstant0);
      DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0, databendConstant1);
      DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(databendColumnValue0, databendColumnValue0, databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
      DatabendBinaryComparisonOperation databendBinaryComparisonOperation1 = new DatabendBinaryComparisonOperation(databendColumnValue0, databendBinaryComparisonOperation0, databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant)databendBinaryComparisonOperation1.getExpectedValue();
      assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER;
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant((-15L));
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator1 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER_EQUALS;
      DatabendConstant databendConstant0 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0.apply(databendConstant_DatabendIntConstant0, databendConstant_DatabendIntConstant0);
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.OR;
      DatabendConstant databendConstant1 = databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0.apply(databendConstant0, databendConstant_DatabendIntConstant0);
      DatabendConstant databendConstant2 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator1.apply(databendConstant1, databendConstant0);
      assertEquals("true", databendConstant2.toString());
      assertFalse(databendConstant0.asBoolean());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER;
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant((-15L));
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator1 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER_EQUALS;
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant)databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0.apply(databendConstant_DatabendIntConstant0, databendConstant_DatabendIntConstant0);
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant1 = (DatabendConstant.DatabendBooleanConstant)databendBinaryComparisonOperation_DatabendBinaryComparisonOperator1.apply(databendConstant_DatabendBooleanConstant0, databendConstant_DatabendBooleanConstant0);
      assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
      assertEquals("true", databendConstant_DatabendBooleanConstant1.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER_EQUALS;
      DatabendConstant databendConstant0 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0.apply(databendConstant_DatabendNullConstant0, databendConstant_DatabendNullConstant0);
      assertNotSame(databendConstant_DatabendNullConstant0, databendConstant0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER;
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant((-15L));
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant)databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0.apply(databendConstant_DatabendIntConstant0, databendConstant_DatabendIntConstant0);
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.OR;
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant1 = (DatabendConstant.DatabendBooleanConstant)databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0.apply(databendConstant_DatabendBooleanConstant0, databendConstant_DatabendIntConstant0);
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant2 = (DatabendConstant.DatabendBooleanConstant)databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0.apply(databendConstant_DatabendBooleanConstant1, databendConstant_DatabendBooleanConstant0);
      assertEquals("true", databendConstant_DatabendBooleanConstant2.toString());
      assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER;
      DatabendConstant databendConstant0 = DatabendConstant.createIntConstant(431L);
      DatabendConstant databendConstant1 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0.apply(databendConstant0, databendConstant0);
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
      DatabendConstant databendConstant2 = databendConstant0.cast(databendSchema_DatabendDataType0);
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant)databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0.apply(databendConstant1, databendConstant2);
      assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
      assertEquals("false", databendConstant1.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER;
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendConstant databendConstant0 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0.apply(databendConstant_DatabendNullConstant0, databendConstant_DatabendNullConstant0);
      assertEquals(DatabendSchema.DatabendDataType.NULL, databendConstant0.getExpectedType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.LESS_EQUALS;
      DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0 = DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator.IS_NULL;
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(true);
      DatabendConstant databendConstant0 = databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0.apply(databendConstant_DatabendBooleanConstant0);
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant1 = (DatabendConstant.DatabendBooleanConstant)databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0.apply(databendConstant0, databendConstant_DatabendBooleanConstant0);
      assertNotSame(databendConstant_DatabendBooleanConstant1, databendConstant_DatabendBooleanConstant0);
      assertTrue(databendConstant_DatabendBooleanConstant1.getValue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendConstant databendConstant0 = DatabendConstant.createIntConstant(3L);
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.IS_NOT_DISTINCT;
      DatabendConstant databendConstant1 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0.apply(databendConstant0, databendConstant_DatabendNullConstant0);
      assertEquals("false", databendConstant1.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.IS_DISTINCT;
      DatabendConstant databendConstant0 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0.apply(databendConstant_DatabendNullConstant0, databendConstant_DatabendNullConstant0);
      assertEquals("false", databendConstant0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(0.0);
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.IS_DISTINCT;
      DatabendConstant databendConstant0 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0.apply(databendConstant_DatabendNullConstant0, databendConstant_DatabendFloatConstant0);
      assertEquals("true", databendConstant0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER;
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(415L);
      DatabendConstant databendConstant0 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0.apply(databendConstant_DatabendIntConstant0, databendConstant_DatabendIntConstant0);
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator1 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.NOT_EQUALS;
      DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0 = DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator.IS_NOT_NULL;
      DatabendConstant databendConstant1 = databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0.apply(databendConstant0);
      DatabendConstant databendConstant2 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator1.apply(databendConstant1, databendConstant0);
      assertEquals("true", databendConstant2.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.NOT_EQUALS;
      DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
      DatabendConstant databendConstant1 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0.apply(databendConstant0, databendConstant0);
      assertNotSame(databendConstant1, databendConstant0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("i;<>M.xk ", databendSchema_DatabendCompositeDataType0, false, true);
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant((-1818.3431));
      DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0, databendConstant_DatabendFloatConstant0);
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.IS_NOT_DISTINCT;
      DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(databendColumnValue0, databendConstant_DatabendFloatConstant0, databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
      DatabendConstant databendConstant0 = databendBinaryComparisonOperation0.getExpectedValue();
      assertNull(databendConstant0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER;
      DatabendConstant databendConstant0 = DatabendConstant.createIntConstant(431L);
      DatabendConstant databendConstant1 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0.apply(databendConstant0, databendConstant0);
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(databendSchema_DatabendDataType0, 1041);
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("<t`M", databendSchema_DatabendCompositeDataType0, false, false);
      DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0, databendConstant1);
      DatabendBetweenOperation databendBetweenOperation0 = new DatabendBetweenOperation(databendConstant1, databendConstant0, databendColumnValue0, false);
      DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(databendBetweenOperation0, databendConstant1, databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
      databendBinaryComparisonOperation0.getExpectedValue();
      assertEquals("false", databendConstant1.toString());
      assertFalse(databendConstant1.asBoolean());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.LESS;
      String string0 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0.getTextRepresentation();
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createStringConstant("");
      DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create((DatabendSchema.DatabendColumn) null, databendConstant0);
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.NOT_EQUALS;
      DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(databendColumnValue0, databendColumnValue0, databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = databendBinaryComparisonOperation0.getExpectedType();
      assertEquals(DatabendSchema.DatabendDataType.BOOLEAN, databendSchema_DatabendDataType0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation((DatabendExpression) null, (DatabendExpression) null, (DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator) null);
      databendBinaryComparisonOperation0.getOp();
  }
}
