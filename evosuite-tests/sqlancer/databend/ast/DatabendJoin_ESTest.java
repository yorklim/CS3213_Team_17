/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 08:39:11 GMT 2025
 */

package sqlancer.databend.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.common.ast.newast.TableReferenceNode;
import sqlancer.databend.DatabendProvider;
import sqlancer.databend.DatabendSchema;
import sqlancer.databend.ast.DatabendExpression;
import sqlancer.databend.ast.DatabendJoin;
import sqlancer.databend.ast.DatabendTableReference;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatabendJoin_ESTest extends DatabendJoin_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DatabendTableReference databendTableReference0 = new DatabendTableReference((DatabendSchema.DatabendTable) null);
      DatabendJoin.OuterType databendJoin_OuterType0 = DatabendJoin.OuterType.LEFT;
      DatabendTableReference databendTableReference1 = new DatabendTableReference((DatabendSchema.DatabendTable) null);
      DatabendJoin databendJoin0 = DatabendJoin.createNaturalJoin(databendTableReference0, databendTableReference1, databendJoin_OuterType0);
      assertEquals(DatabendJoin.OuterType.LEFT, databendJoin0.getOuterType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<DatabendSchema.DatabendColumn> linkedList0 = new LinkedList<DatabendSchema.DatabendColumn>();
      DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable((String) null, linkedList0, false);
      DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
      DatabendTableReference databendTableReference1 = new DatabendTableReference(databendSchema_DatabendTable0);
      DatabendJoin databendJoin0 = DatabendJoin.createInnerJoin(databendTableReference0, databendTableReference1, databendTableReference1);
      assertNull(databendJoin0.getOuterType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<DatabendSchema.DatabendColumn> linkedList0 = new LinkedList<DatabendSchema.DatabendColumn>();
      DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable("", linkedList0, true);
      DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
      DatabendTableReference databendTableReference1 = new DatabendTableReference(databendSchema_DatabendTable0);
      DatabendJoin databendJoin0 = DatabendJoin.createLeftOuterJoin(databendTableReference1, databendTableReference1, databendTableReference1);
      DatabendJoin databendJoin1 = DatabendJoin.createLeftOuterJoin(databendTableReference0, databendTableReference1, databendJoin0);
      assertNotSame(databendJoin0, databendJoin1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<DatabendSchema.DatabendColumn> linkedList0 = new LinkedList<DatabendSchema.DatabendColumn>();
      DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable("", linkedList0, true);
      DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
      DatabendTableReference databendTableReference1 = new DatabendTableReference(databendSchema_DatabendTable0);
      DatabendSchema.DatabendDataType.getRandomWithoutNull();
      LinkedList<DatabendTableReference> linkedList1 = new LinkedList<DatabendTableReference>();
      linkedList1.add(databendTableReference1);
      linkedList1.add(databendTableReference0);
      DatabendProvider.DatabendGlobalState databendProvider_DatabendGlobalState0 = new DatabendProvider.DatabendGlobalState();
      // Undeclared exception!
      try { 
        DatabendJoin.getJoins(linkedList1, databendProvider_DatabendGlobalState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.gen.DatabendNewExpressionGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<DatabendSchema.DatabendColumn> linkedList0 = new LinkedList<DatabendSchema.DatabendColumn>();
      DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable("", linkedList0, true);
      DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
      DatabendTableReference databendTableReference1 = new DatabendTableReference(databendSchema_DatabendTable0);
      DatabendJoin databendJoin0 = DatabendJoin.createRightOuterJoin(databendTableReference0, databendTableReference1, databendTableReference1);
      assertEquals(DatabendJoin.JoinType.RIGHT, databendJoin0.getJoinType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DatabendJoin databendJoin0 = DatabendJoin.createRightOuterJoin((DatabendTableReference) null, (DatabendTableReference) null, (DatabendExpression) null);
      TableReferenceNode<DatabendExpression, DatabendSchema.DatabendTable> tableReferenceNode0 = databendJoin0.getRightTable();
      assertNull(tableReferenceNode0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<DatabendSchema.DatabendColumn> linkedList0 = new LinkedList<DatabendSchema.DatabendColumn>();
      DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable("SET experimental_enable_temp_tables = 'on'", linkedList0, false);
      DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
      DatabendJoin.JoinType databendJoin_JoinType0 = DatabendJoin.JoinType.LEFT;
      DatabendJoin databendJoin0 = new DatabendJoin(databendTableReference0, databendTableReference0, databendJoin_JoinType0, databendTableReference0);
      DatabendExpression databendExpression0 = databendJoin0.getOnCondition();
      assertSame(databendExpression0, databendTableReference0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DatabendJoin databendJoin0 = DatabendJoin.createRightOuterJoin((DatabendTableReference) null, (DatabendTableReference) null, (DatabendExpression) null);
      TableReferenceNode<DatabendExpression, DatabendSchema.DatabendTable> tableReferenceNode0 = databendJoin0.getLeftTable();
      assertNull(tableReferenceNode0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DatabendSchema.DatabendDataType.getRandomWithoutNull();
      DatabendTableReference databendTableReference0 = new DatabendTableReference((DatabendSchema.DatabendTable) null);
      DatabendProvider.DatabendGlobalState databendProvider_DatabendGlobalState0 = new DatabendProvider.DatabendGlobalState();
      List<DatabendTableReference> list0 = List.of(databendTableReference0, databendTableReference0, databendTableReference0, databendTableReference0, databendTableReference0, databendTableReference0, databendTableReference0, databendTableReference0, databendTableReference0);
      // Undeclared exception!
      try { 
        DatabendJoin.getJoins(list0, databendProvider_DatabendGlobalState0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ImmutableCollections", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<DatabendSchema.DatabendColumn> linkedList0 = new LinkedList<DatabendSchema.DatabendColumn>();
      DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable("", linkedList0, true);
      DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
      LinkedList<DatabendTableReference> linkedList1 = new LinkedList<DatabendTableReference>();
      linkedList1.add(databendTableReference0);
      linkedList1.add(databendTableReference0);
      DatabendProvider.DatabendGlobalState databendProvider_DatabendGlobalState0 = new DatabendProvider.DatabendGlobalState();
      List<DatabendJoin> list0 = DatabendJoin.getJoins(linkedList1, databendProvider_DatabendGlobalState0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      List<DatabendTableReference> list0 = List.of();
      DatabendProvider.DatabendGlobalState databendProvider_DatabendGlobalState0 = new DatabendProvider.DatabendGlobalState();
      List<DatabendJoin> list1 = DatabendJoin.getJoins(list0, databendProvider_DatabendGlobalState0);
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DatabendJoin.OuterType databendJoin_OuterType0 = DatabendJoin.OuterType.getRandom();
      assertEquals(DatabendJoin.OuterType.LEFT, databendJoin_OuterType0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DatabendJoin.JoinType databendJoin_JoinType0 = DatabendJoin.JoinType.getRandom();
      DatabendJoin databendJoin0 = new DatabendJoin((DatabendTableReference) null, (DatabendTableReference) null, databendJoin_JoinType0, (DatabendExpression) null);
      databendJoin0.getOuterType();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DatabendTableReference databendTableReference0 = new DatabendTableReference((DatabendSchema.DatabendTable) null);
      DatabendJoin databendJoin0 = DatabendJoin.createInnerJoin(databendTableReference0, databendTableReference0, databendTableReference0);
      TableReferenceNode<DatabendExpression, DatabendSchema.DatabendTable> tableReferenceNode0 = databendJoin0.getLeftTable();
      assertSame(databendTableReference0, tableReferenceNode0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DatabendJoin.OuterType databendJoin_OuterType0 = DatabendJoin.OuterType.LEFT;
      DatabendJoin databendJoin0 = DatabendJoin.createNaturalJoin((DatabendTableReference) null, (DatabendTableReference) null, databendJoin_OuterType0);
      DatabendJoin.JoinType databendJoin_JoinType0 = databendJoin0.getJoinType();
      assertEquals(DatabendJoin.JoinType.NATURAL, databendJoin_JoinType0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DatabendJoin.JoinType databendJoin_JoinType0 = DatabendJoin.JoinType.getRandom();
      DatabendJoin databendJoin0 = new DatabendJoin((DatabendTableReference) null, (DatabendTableReference) null, databendJoin_JoinType0, (DatabendExpression) null);
      DatabendExpression databendExpression0 = databendJoin0.getOnCondition();
      assertNull(databendExpression0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DatabendTableReference databendTableReference0 = new DatabendTableReference((DatabendSchema.DatabendTable) null);
      DatabendJoin.OuterType databendJoin_OuterType0 = DatabendJoin.OuterType.LEFT;
      DatabendJoin databendJoin0 = DatabendJoin.createNaturalJoin(databendTableReference0, databendTableReference0, databendJoin_OuterType0);
      DatabendJoin.OuterType databendJoin_OuterType1 = databendJoin0.getOuterType();
      assertSame(databendJoin_OuterType1, databendJoin_OuterType0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<DatabendSchema.DatabendColumn> linkedList0 = new LinkedList<DatabendSchema.DatabendColumn>();
      DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable("", linkedList0, true);
      DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
      DatabendJoin databendJoin0 = DatabendJoin.createLeftOuterJoin(databendTableReference0, databendTableReference0, databendTableReference0);
      TableReferenceNode<DatabendExpression, DatabendSchema.DatabendTable> tableReferenceNode0 = databendJoin0.getRightTable();
      assertSame(databendTableReference0, tableReferenceNode0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DatabendTableReference databendTableReference0 = new DatabendTableReference((DatabendSchema.DatabendTable) null);
      DatabendJoin databendJoin0 = DatabendJoin.createInnerJoin(databendTableReference0, databendTableReference0, databendTableReference0);
      databendJoin0.setOnClause((DatabendExpression) databendJoin0);
      assertNull(databendJoin0.getOuterType());
  }
}
