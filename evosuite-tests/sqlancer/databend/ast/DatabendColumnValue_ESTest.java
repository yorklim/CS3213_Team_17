/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 08:23:11 GMT 2025
 */

package sqlancer.databend.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.databend.DatabendSchema;
import sqlancer.databend.ast.DatabendBinaryComparisonOperation;
import sqlancer.databend.ast.DatabendColumnValue;
import sqlancer.databend.ast.DatabendConstant;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatabendColumnValue_ESTest extends DatabendColumnValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create((DatabendSchema.DatabendColumn) null, (DatabendConstant) null);
      DatabendConstant databendConstant0 = databendColumnValue0.getExpectedValue();
      assertNull(databendConstant0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("");
      DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create((DatabendSchema.DatabendColumn) null, databendConstant_DatabendStringConstant0);
      DatabendConstant databendConstant0 = databendColumnValue0.getExpectedValue();
      assertFalse(databendConstant0.isInt());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("t/(BEWiwhv", databendSchema_DatabendCompositeDataType0, true, true);
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create(databendSchema_DatabendColumn0, databendConstant_DatabendNullConstant0);
      DatabendConstant databendConstant0 = databendColumnValue0.getExpectedValue();
      assertFalse(databendConstant0.isInt());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(0L);
      DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create((DatabendSchema.DatabendColumn) null, databendConstant_DatabendIntConstant0);
      DatabendConstant databendConstant0 = databendColumnValue0.getExpectedValue();
      assertEquals("0", databendConstant0.toString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createFloatConstant((-1391.5));
      DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create((DatabendSchema.DatabendColumn) null, databendConstant0);
      DatabendConstant databendConstant1 = databendColumnValue0.getExpectedValue();
      assertFalse(databendConstant1.isNull());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.NULL;
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(databendSchema_DatabendDataType0, 3887);
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("R9>GC:.|+w", databendSchema_DatabendCompositeDataType0, true, true);
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.LESS;
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("R9>GC:.|+w");
      DatabendConstant databendConstant0 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0.apply(databendConstant_DatabendStringConstant0, databendConstant_DatabendStringConstant0);
      DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create(databendSchema_DatabendColumn0, databendConstant0);
      DatabendConstant databendConstant1 = databendColumnValue0.getExpectedValue();
      assertFalse(databendConstant1.isString());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType((DatabendSchema.DatabendDataType) null, 3834);
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("R9>GC:.|+w", databendSchema_DatabendCompositeDataType0, true, true);
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.LESS;
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("R9>GC:.|+w");
      DatabendConstant databendConstant0 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0.apply(databendConstant_DatabendStringConstant0, databendConstant_DatabendStringConstant0);
      DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create(databendSchema_DatabendColumn0, databendConstant0);
      databendColumnValue0.getExpectedType();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.VARCHAR;
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(databendSchema_DatabendDataType0, 3206);
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn((String) null, databendSchema_DatabendCompositeDataType0, false, true);
      DatabendConstant.DatabendDateConstant databendConstant_DatabendDateConstant0 = new DatabendConstant.DatabendDateConstant((-978L));
      DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0, databendConstant_DatabendDateConstant0);
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType1 = databendColumnValue0.getExpectedType();
      assertSame(databendSchema_DatabendDataType1, databendSchema_DatabendDataType0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(0L);
      DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create((DatabendSchema.DatabendColumn) null, databendConstant_DatabendIntConstant0);
      // Undeclared exception!
      try { 
        databendColumnValue0.getExpectedType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.ast.DatabendColumnValue", e);
      }
  }
}
