/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 08:19:36 GMT 2025
 */

package sqlancer.databend.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Timestamp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.databend.DatabendSchema;
import sqlancer.databend.ast.DatabendConstant;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatabendConstant_ESTest extends DatabendConstant_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("''");
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant1 = new DatabendConstant.DatabendStringConstant("sqlancer.databend.ast.DatabendConstant");
      DatabendConstant databendConstant0 = databendConstant_DatabendStringConstant1.isLessThan(databendConstant_DatabendStringConstant0);
      assertFalse(databendConstant0.asBoolean());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(2521.61);
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant1 = new DatabendConstant.DatabendFloatConstant(0.14527285097940856);
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant)databendConstant_DatabendFloatConstant0.isLessThan(databendConstant_DatabendFloatConstant1);
      assertEquals(0.14527285097940856, databendConstant_DatabendFloatConstant1.asFloat(), 0.01);
      assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(1L);
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(4154.8889093);
      DatabendConstant databendConstant0 = databendConstant_DatabendFloatConstant0.isLessThan(databendConstant_DatabendIntConstant0);
      assertEquals(1L, databendConstant_DatabendIntConstant0.asInt());
      assertEquals("false", databendConstant0.toString());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = (DatabendConstant.DatabendFloatConstant)DatabendConstant.createFloatConstant((-1061.9975));
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant)databendConstant_DatabendFloatConstant0.cast(databendSchema_DatabendDataType0);
      assertEquals((-1061.9975), databendConstant_DatabendFloatConstant0.getValue(), 0.01);
      assertEquals("true", databendConstant_DatabendBooleanConstant0.toString());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(1L);
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(0.0);
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant)databendConstant_DatabendIntConstant0.isLessThan(databendConstant_DatabendFloatConstant0);
      assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
      assertEquals(0.0, databendConstant_DatabendFloatConstant0.asFloat(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(1L);
      DatabendConstant databendConstant0 = DatabendConstant.createIntConstant((-1962L));
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant)databendConstant_DatabendIntConstant0.isLessThan(databendConstant0);
      assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(253380000000000L);
      DatabendConstant databendConstant0 = DatabendConstant.createIntConstant(857L);
      DatabendConstant databendConstant1 = databendConstant_DatabendIntConstant0.isEquals(databendConstant0);
      assertFalse(databendConstant1.asBoolean());
      assertEquals(857L, databendConstant0.asInt());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DatabendConstant.DatabendTimestampConstant databendConstant_DatabendTimestampConstant0 = (DatabendConstant.DatabendTimestampConstant)DatabendConstant.createTimestampConstant(253380000000000L);
      assertEquals("1970-01-01 00:00:00", databendConstant_DatabendTimestampConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("''");
      DatabendConstant databendConstant0 = databendConstant_DatabendStringConstant0.isLessThan(databendConstant_DatabendStringConstant0);
      assertFalse(databendConstant0.asBoolean());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("X");
      DatabendConstant databendConstant0 = databendConstant_DatabendStringConstant0.isEquals(databendConstant_DatabendNullConstant0);
      assertFalse(databendConstant0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(1L);
      DatabendConstant databendConstant0 = databendConstant_DatabendIntConstant0.isEquals(databendConstant_DatabendIntConstant0);
      assertEquals("true", databendConstant0.toString());
      assertEquals(1L, databendConstant_DatabendIntConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DatabendConstant.DatabendTimestampConstant databendConstant_DatabendTimestampConstant0 = new DatabendConstant.DatabendTimestampConstant(0L);
      databendConstant_DatabendTimestampConstant0.isLessThan((DatabendConstant) null);
      assertEquals("1970-01-01 00:00:00", databendConstant_DatabendTimestampConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendConstant.DatabendTimestampConstant databendConstant_DatabendTimestampConstant0 = new DatabendConstant.DatabendTimestampConstant(0L);
      databendConstant_DatabendTimestampConstant0.isEquals(databendConstant_DatabendNullConstant0);
      assertEquals("1970-01-01 00:00:00", databendConstant_DatabendTimestampConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DatabendConstant.DatabendTimestampConstant databendConstant_DatabendTimestampConstant0 = new DatabendConstant.DatabendTimestampConstant(0L);
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.FLOAT;
      databendConstant_DatabendTimestampConstant0.cast(databendSchema_DatabendDataType0);
      assertEquals("1970-01-01 00:00:00", databendConstant_DatabendTimestampConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("W<t(Ee_3Te}");
      String string0 = databendConstant_DatabendStringConstant0.toString();
      assertEquals("'W<t(Ee_3Te}'", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createIntConstant(0L);
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("sqlancer.databend.ast.DatabendConstant");
      // Undeclared exception!
      try { 
        databendConstant_DatabendStringConstant0.isLessThan(databendConstant0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createIntConstant((-957L));
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("?[*FK@k#kgdfpvU'");
      // Undeclared exception!
      try { 
        databendConstant_DatabendStringConstant0.isEquals(databendConstant0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // -957
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant((String) null);
      String string0 = databendConstant_DatabendStringConstant0.asString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      boolean boolean0 = databendConstant_DatabendNullConstant0.isNull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("X");
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.FLOAT;
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = (DatabendConstant.DatabendFloatConstant)databendConstant_DatabendStringConstant0.cast(databendSchema_DatabendDataType0);
      databendConstant_DatabendNullConstant0.isLessThan(databendConstant_DatabendFloatConstant0);
      assertEquals((-1.0), databendConstant_DatabendFloatConstant0.getValue(), 0.01);
      assertEquals("-1.0", databendConstant_DatabendFloatConstant0.toString());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendConstant databendConstant0 = databendConstant_DatabendNullConstant0.isEquals((DatabendConstant) null);
      assertFalse(databendConstant0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createIntConstant(0L);
      boolean boolean0 = databendConstant0.isInt();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(1L);
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(0.0);
      // Undeclared exception!
      try { 
        databendConstant_DatabendIntConstant0.isEquals(databendConstant_DatabendFloatConstant0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // 0.0
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(0L);
      long long0 = databendConstant_DatabendIntConstant0.asInt();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(0.0);
      databendConstant_DatabendFloatConstant0.isFloat();
      assertEquals(0.0, databendConstant_DatabendFloatConstant0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createIntConstant(0L);
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(0.0);
      databendConstant_DatabendFloatConstant0.isEquals(databendConstant0);
      assertEquals("0.0", databendConstant_DatabendFloatConstant0.toString());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DatabendConstant.DatabendDateConstant databendConstant_DatabendDateConstant0 = new DatabendConstant.DatabendDateConstant(0L);
      String string0 = databendConstant_DatabendDateConstant0.toString();
      assertEquals("DATE '1970-01-01'", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DatabendConstant.DatabendDateConstant databendConstant_DatabendDateConstant0 = new DatabendConstant.DatabendDateConstant(0L);
      DatabendConstant databendConstant0 = DatabendConstant.createFloatConstant(0L);
      databendConstant_DatabendDateConstant0.isLessThan(databendConstant0);
      assertEquals("1970-01-01", databendConstant_DatabendDateConstant0.getValue());
      assertEquals("0.0", databendConstant0.toString());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DatabendConstant.DatabendDateConstant databendConstant_DatabendDateConstant0 = new DatabendConstant.DatabendDateConstant(0L);
      databendConstant_DatabendDateConstant0.isEquals((DatabendConstant) null);
      assertEquals("1970-01-01", databendConstant_DatabendDateConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DatabendConstant.DatabendDateConstant databendConstant_DatabendDateConstant0 = new DatabendConstant.DatabendDateConstant(0L);
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.VARCHAR;
      databendConstant_DatabendDateConstant0.cast(databendSchema_DatabendDataType0);
      assertEquals("1970-01-01", databendConstant_DatabendDateConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(true);
      String string0 = ((DatabendConstant.DatabendBooleanConstant) databendConstant0).toString();
      assertEquals("true", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(true);
      databendConstant_DatabendBooleanConstant0.isBoolean();
      assertEquals("true", databendConstant_DatabendBooleanConstant0.toString());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("");
      Timestamp timestamp0 = databendConstant_DatabendStringConstant0.truncateTimestamp(0L);
      assertEquals("1970-01-01 00:00:00.0", timestamp0.toString());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      Timestamp timestamp0 = databendConstant_DatabendNullConstant0.truncateTimestamp(1L);
      assertEquals("1970-01-01 00:00:00.001", timestamp0.toString());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createStringConstant("4BCL;Z3");
      boolean boolean0 = databendConstant0.isString();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      boolean boolean0 = databendConstant_DatabendNullConstant0.isNull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(1354L);
      databendConstant_DatabendIntConstant0.isInt();
      assertEquals(1354L, databendConstant_DatabendIntConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant((-2983.700322));
      databendConstant_DatabendFloatConstant0.isFloat();
      assertEquals((-2983.700322), databendConstant_DatabendFloatConstant0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(true);
      databendConstant0.isBoolean();
      assertEquals("true", databendConstant0.toString());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.DATE;
      DatabendConstant databendConstant1 = databendConstant0.cast(databendSchema_DatabendDataType0);
      assertEquals("NULL", databendConstant1.toString());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant((String) null);
      String string0 = databendConstant_DatabendStringConstant0.asString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createStringConstant("sqlancer.common.schema.AbstractSchema");
      String string0 = databendConstant0.asString();
      assertEquals("sqlancer.common.schema.AbstractSchema", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("");
      String string0 = databendConstant_DatabendStringConstant0.asString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createIntConstant(0L);
      long long0 = databendConstant0.asInt();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createIntConstant(3062L);
      long long0 = databendConstant0.asInt();
      assertEquals(3062L, long0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createIntConstant((-1632L));
      long long0 = databendConstant0.asInt();
      assertEquals((-1632L), long0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(0L);
      double double0 = databendConstant_DatabendFloatConstant0.asFloat();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createFloatConstant(1L);
      double double0 = databendConstant0.asFloat();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(Double.NEGATIVE_INFINITY);
      double double0 = databendConstant_DatabendFloatConstant0.asFloat();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(true);
      boolean boolean0 = databendConstant0.asBoolean();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(false);
      boolean boolean0 = databendConstant_DatabendBooleanConstant0.asBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(true);
      // Undeclared exception!
      try { 
        databendConstant0.isLessThan((DatabendConstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.ast.DatabendConstant$DatabendBooleanConstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(false);
      // Undeclared exception!
      try { 
        databendConstant0.isEquals((DatabendConstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.ast.DatabendConstant$DatabendBooleanConstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant((String) null);
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
      // Undeclared exception!
      try { 
        databendConstant_DatabendStringConstant0.cast(databendSchema_DatabendDataType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.ast.DatabendConstant$DatabendStringConstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(1L);
      boolean boolean0 = databendConstant_DatabendIntConstant0.isString();
      assertEquals("1", databendConstant_DatabendIntConstant0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant((-1859.08326067));
      databendConstant_DatabendFloatConstant0.isNull();
      assertEquals((-1859.08326067), databendConstant_DatabendFloatConstant0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DatabendConstant.DatabendDateConstant databendConstant_DatabendDateConstant0 = (DatabendConstant.DatabendDateConstant)DatabendConstant.createDateConstant(2616L);
      boolean boolean0 = databendConstant_DatabendDateConstant0.isBoolean();
      assertEquals("1970-01-01", databendConstant_DatabendDateConstant0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DatabendConstant.DatabendDateConstant databendConstant_DatabendDateConstant0 = (DatabendConstant.DatabendDateConstant)DatabendConstant.createDateConstant(2229L);
      boolean boolean0 = databendConstant_DatabendDateConstant0.isFloat();
      assertFalse(boolean0);
      assertEquals("1970-01-01", databendConstant_DatabendDateConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createStringConstant("");
      boolean boolean0 = databendConstant0.isInt();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(false);
      DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(true);
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant1 = (DatabendConstant.DatabendBooleanConstant)databendConstant_DatabendBooleanConstant0.isLessThan(databendConstant0);
      assertTrue(databendConstant0.asBoolean());
      assertTrue(databendConstant_DatabendBooleanConstant1.getValue());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(1354L);
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(1354L);
      DatabendConstant databendConstant0 = databendConstant_DatabendFloatConstant0.isLessThan(databendConstant_DatabendIntConstant0);
      DatabendConstant databendConstant1 = databendConstant0.isLessThan(databendConstant0);
      assertEquals(1354L, databendConstant_DatabendIntConstant0.asInt());
      assertEquals("false", databendConstant1.toString());
      assertFalse(databendConstant0.asBoolean());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant)DatabendConstant.createBooleanConstant(true);
      databendConstant_DatabendBooleanConstant0.isLessThan(databendConstant_DatabendNullConstant0);
      assertTrue(databendConstant_DatabendBooleanConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(true);
      DatabendConstant databendConstant1 = databendConstant0.isLessThan(databendConstant0);
      assertFalse(databendConstant0.isNull());
      
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant)databendConstant1.isEquals(databendConstant0);
      assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
      DatabendConstant databendConstant1 = DatabendConstant.createBooleanConstant(true);
      databendConstant1.isEquals(databendConstant0);
      assertEquals("true", databendConstant1.toString());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(true);
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.VARCHAR;
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = (DatabendConstant.DatabendStringConstant)databendConstant0.cast(databendSchema_DatabendDataType0);
      assertEquals("1", databendConstant_DatabendStringConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(false);
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.FLOAT;
      DatabendConstant databendConstant0 = databendConstant_DatabendBooleanConstant0.cast(databendSchema_DatabendDataType0);
      assertEquals(0.0, databendConstant0.asFloat(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(true);
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.INT;
      DatabendConstant databendConstant0 = databendConstant_DatabendBooleanConstant0.cast(databendSchema_DatabendDataType0);
      assertEquals(1L, databendConstant0.asInt());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = databendConstant_DatabendNullConstant0.getExpectedType();
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant)DatabendConstant.createBooleanConstant(true);
      databendConstant_DatabendBooleanConstant0.cast(databendSchema_DatabendDataType0);
      assertTrue(databendConstant_DatabendBooleanConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant((-1993L));
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
      DatabendConstant databendConstant0 = databendConstant_DatabendIntConstant0.cast(databendSchema_DatabendDataType0);
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant)databendConstant0.cast(databendSchema_DatabendDataType0);
      assertTrue(databendConstant_DatabendBooleanConstant0.getValue());
      assertEquals("-1993", databendConstant_DatabendIntConstant0.toString());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(false);
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.VARCHAR;
      DatabendConstant databendConstant1 = databendConstant0.cast(databendSchema_DatabendDataType0);
      assertEquals("0", databendConstant1.asString());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(false);
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.INT;
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = (DatabendConstant.DatabendIntConstant)databendConstant0.cast(databendSchema_DatabendDataType0);
      assertEquals(0L, databendConstant_DatabendIntConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant(":'tV=<_4nkt7/41V<a");
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant1 = new DatabendConstant.DatabendStringConstant("column_name");
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant)databendConstant_DatabendStringConstant0.isLessThan(databendConstant_DatabendStringConstant1);
      assertFalse(databendConstant_DatabendStringConstant1.isNull());
      assertTrue(databendConstant_DatabendBooleanConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
      DatabendConstant databendConstant1 = DatabendConstant.createStringConstant("INT16");
      DatabendConstant databendConstant2 = databendConstant1.isLessThan(databendConstant0);
      assertFalse(databendConstant2.isInt());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("true");
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant)databendConstant_DatabendStringConstant0.cast(databendSchema_DatabendDataType0);
      assertTrue(databendConstant_DatabendBooleanConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("false");
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant)databendConstant_DatabendStringConstant0.cast(databendSchema_DatabendDataType0);
      assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("");
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.TIMESTAMP;
      DatabendConstant databendConstant0 = databendConstant_DatabendStringConstant0.cast(databendSchema_DatabendDataType0);
      assertNull(databendConstant0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("");
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.FLOAT;
      DatabendConstant databendConstant0 = databendConstant_DatabendStringConstant0.cast(databendSchema_DatabendDataType0);
      assertEquals("-1.0", databendConstant0.toString());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("lg-c]([`X.H|u2o4v");
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.VARCHAR;
      DatabendConstant databendConstant0 = databendConstant_DatabendStringConstant0.cast(databendSchema_DatabendDataType0);
      assertFalse(databendConstant0.isInt());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createStringConstant("Y8_^A:");
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
      // Undeclared exception!
      try { 
        databendConstant0.cast(databendSchema_DatabendDataType0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // string: Y8_^A:, cannot be forced to boolean
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("W?/r,Ex)YfzRa(vOi@");
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.INT;
      DatabendConstant databendConstant0 = databendConstant_DatabendStringConstant0.cast(databendSchema_DatabendDataType0);
      assertEquals((-1L), databendConstant0.asInt());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant((-271.34037));
      DatabendConstant databendConstant0 = DatabendConstant.createFloatConstant(1462.067);
      DatabendConstant databendConstant1 = databendConstant_DatabendFloatConstant0.isLessThan(databendConstant0);
      assertFalse(databendConstant0.isNull());
      assertTrue(databendConstant1.asBoolean());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(2521.61);
      DatabendConstant.DatabendDateConstant databendConstant_DatabendDateConstant0 = new DatabendConstant.DatabendDateConstant(4860L);
      // Undeclared exception!
      try { 
        databendConstant_DatabendFloatConstant0.isLessThan(databendConstant_DatabendDateConstant0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // DATE '1970-01-01'
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(1L);
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(0.0);
      DatabendConstant databendConstant0 = databendConstant_DatabendFloatConstant0.isLessThan(databendConstant_DatabendIntConstant0);
      assertFalse(databendConstant_DatabendFloatConstant0.isNull());
      assertEquals("true", databendConstant0.toString());
      assertEquals(0.0, databendConstant_DatabendFloatConstant0.asFloat(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant((-271.34037));
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant)databendConstant_DatabendFloatConstant0.isLessThan(databendConstant_DatabendFloatConstant0);
      assertEquals("-271.34037", databendConstant_DatabendFloatConstant0.toString());
      assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
      assertFalse(databendConstant_DatabendFloatConstant0.isNull());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = (DatabendConstant.DatabendFloatConstant)DatabendConstant.createFloatConstant(4704.906294455);
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant)databendConstant_DatabendFloatConstant0.cast(databendSchema_DatabendDataType0);
      assertEquals(4704.906294455, databendConstant_DatabendFloatConstant0.getValue(), 0.01);
      assertTrue(databendConstant_DatabendBooleanConstant0.asBoolean());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createFloatConstant(1.0);
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.TIMESTAMP;
      databendConstant0.cast(databendSchema_DatabendDataType0);
      assertEquals("1.0", databendConstant0.toString());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant((-1650.3346));
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.FLOAT;
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant1 = (DatabendConstant.DatabendFloatConstant)databendConstant_DatabendFloatConstant0.cast(databendSchema_DatabendDataType0);
      assertEquals((-1650.3346), databendConstant_DatabendFloatConstant1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(0.0);
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant)databendConstant_DatabendFloatConstant0.cast(databendSchema_DatabendDataType0);
      assertEquals(0.0, databendConstant_DatabendFloatConstant0.getValue(), 0.01);
      assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createFloatConstant(2521.61);
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.VARCHAR;
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = (DatabendConstant.DatabendStringConstant)databendConstant0.cast(databendSchema_DatabendDataType0);
      assertEquals("2521.61", databendConstant_DatabendStringConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(true);
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.FLOAT;
      DatabendConstant databendConstant1 = databendConstant0.cast(databendSchema_DatabendDataType0);
      // Undeclared exception!
      try { 
        databendConstant0.isEquals(databendConstant1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // 1.0
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(Double.POSITIVE_INFINITY);
      String string0 = databendConstant_DatabendFloatConstant0.toString();
      assertEquals("3.40282347e+38", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(Double.NEGATIVE_INFINITY);
      String string0 = databendConstant_DatabendFloatConstant0.toString();
      assertEquals("-3.40282347e+38", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(Double.POSITIVE_INFINITY);
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(2723L);
      DatabendConstant databendConstant0 = databendConstant_DatabendIntConstant0.isLessThan(databendConstant_DatabendFloatConstant0);
      assertFalse(databendConstant_DatabendIntConstant0.isNull());
      assertEquals("true", databendConstant0.toString());
      assertEquals(2723L, databendConstant_DatabendIntConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(214L);
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant1 = new DatabendConstant.DatabendIntConstant(1713L);
      DatabendConstant databendConstant0 = databendConstant_DatabendIntConstant0.isLessThan(databendConstant_DatabendIntConstant1);
      assertFalse(databendConstant_DatabendIntConstant1.isNull());
      assertEquals("true", databendConstant0.toString());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(214L);
      DatabendConstant databendConstant0 = databendConstant_DatabendIntConstant0.isLessThan(databendConstant_DatabendIntConstant0);
      assertFalse(databendConstant_DatabendIntConstant0.isNull());
      assertEquals(214L, databendConstant_DatabendIntConstant0.asInt());
      assertFalse(databendConstant0.asBoolean());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendConstant databendConstant0 = DatabendConstant.createIntConstant(819L);
      databendConstant0.isLessThan(databendConstant_DatabendNullConstant0);
      assertEquals("819", databendConstant0.toString());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant((-3660L));
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant1 = new DatabendConstant.DatabendIntConstant((-1L));
      assertTrue(databendConstant_DatabendIntConstant1.isInt());
      
      DatabendConstant databendConstant0 = databendConstant_DatabendIntConstant0.isEquals(databendConstant_DatabendIntConstant1);
      assertFalse(databendConstant_DatabendIntConstant1.isNull());
      assertEquals((-1L), databendConstant_DatabendIntConstant1.asInt());
      assertEquals("false", databendConstant0.toString());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
      DatabendConstant databendConstant1 = DatabendConstant.createIntConstant((-1L));
      databendConstant1.isEquals(databendConstant0);
      assertEquals((-1L), databendConstant1.asInt());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(0L);
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant)databendConstant_DatabendIntConstant0.cast(databendSchema_DatabendDataType0);
      assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant((-1962L));
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.TIMESTAMP;
      DatabendConstant.DatabendTimestampConstant databendConstant_DatabendTimestampConstant0 = (DatabendConstant.DatabendTimestampConstant)databendConstant_DatabendIntConstant0.cast(databendSchema_DatabendDataType0);
      assertEquals("1969-12-31 23:59:58", databendConstant_DatabendTimestampConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant((-2391L));
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.DATE;
      DatabendConstant.DatabendDateConstant databendConstant_DatabendDateConstant0 = (DatabendConstant.DatabendDateConstant)databendConstant_DatabendIntConstant0.cast(databendSchema_DatabendDataType0);
      assertEquals("1969-12-31", databendConstant_DatabendDateConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(1L);
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.NULL;
      databendConstant_DatabendIntConstant0.cast(databendSchema_DatabendDataType0);
      assertEquals(1L, databendConstant_DatabendIntConstant0.asInt());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(3845L);
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.FLOAT;
      databendConstant_DatabendIntConstant0.cast(databendSchema_DatabendDataType0);
      assertEquals("3845", databendConstant_DatabendIntConstant0.toString());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(3372L);
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant)databendConstant_DatabendIntConstant0.cast(databendSchema_DatabendDataType0);
      assertTrue(databendConstant_DatabendBooleanConstant0.getValue());
      assertEquals(3372L, databendConstant_DatabendIntConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant((-4L));
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.INT;
      DatabendConstant databendConstant0 = databendConstant_DatabendIntConstant0.cast(databendSchema_DatabendDataType0);
      assertEquals("-4", databendConstant0.toString());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
      DatabendConstant.DatabendTimestampConstant databendConstant_DatabendTimestampConstant0 = (DatabendConstant.DatabendTimestampConstant)DatabendConstant.createTimestampConstant(3845L);
      databendConstant_DatabendTimestampConstant0.isLessThan(databendConstant0);
      assertEquals("1970-01-01 00:00:03", databendConstant_DatabendTimestampConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
      DatabendConstant.DatabendTimestampConstant databendConstant_DatabendTimestampConstant0 = (DatabendConstant.DatabendTimestampConstant)DatabendConstant.createTimestampConstant((-656L));
      databendConstant_DatabendTimestampConstant0.isEquals(databendConstant0);
      assertEquals("1969-12-31 23:59:59", databendConstant_DatabendTimestampConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DatabendConstant.DatabendTimestampConstant databendConstant_DatabendTimestampConstant0 = new DatabendConstant.DatabendTimestampConstant(1L);
      String string0 = databendConstant_DatabendTimestampConstant0.toString();
      assertEquals("TIMESTAMP '1970-01-01 00:00:00'", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DatabendConstant.DatabendTimestampConstant databendConstant_DatabendTimestampConstant0 = new DatabendConstant.DatabendTimestampConstant((-4474L));
      String string0 = databendConstant_DatabendTimestampConstant0.getValue();
      assertEquals("1969-12-31 23:59:55", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
      assertTrue(databendConstant0.isNull());
      
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = (DatabendConstant.DatabendFloatConstant)DatabendConstant.createFloatConstant((-3532.378337481288));
      databendConstant_DatabendFloatConstant0.isLessThan(databendConstant0);
      assertEquals((-3532.378337481288), databendConstant_DatabendFloatConstant0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = databendConstant_DatabendNullConstant0.getExpectedType();
      DatabendConstant databendConstant0 = databendConstant_DatabendNullConstant0.cast(databendSchema_DatabendDataType0);
      assertTrue(databendConstant0.isNull());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      String string0 = databendConstant_DatabendNullConstant0.toString();
      assertEquals("NULL", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      // Undeclared exception!
      try { 
        databendConstant_DatabendNullConstant0.asString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // sqlancer.databend.ast.DatabendConstant$DatabendNullConstant@0000000001
         //
         verifyException("sqlancer.databend.ast.DatabendConstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(2723L);
      // Undeclared exception!
      try { 
        databendConstant_DatabendIntConstant0.asBoolean();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // sqlancer.databend.ast.DatabendConstant$DatabendIntConstant@0000000001
         //
         verifyException("sqlancer.databend.ast.DatabendConstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
      // Undeclared exception!
      try { 
        databendConstant0.asInt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // sqlancer.databend.ast.DatabendConstant$DatabendNullConstant@0000000001
         //
         verifyException("sqlancer.databend.ast.DatabendConstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createFloatConstant((-346.0));
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.INT;
      DatabendConstant databendConstant1 = databendConstant0.cast(databendSchema_DatabendDataType0);
      assertEquals((-346L), databendConstant1.asInt());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
      // Undeclared exception!
      try { 
        databendConstant0.asFloat();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // sqlancer.databend.ast.DatabendConstant$DatabendNullConstant@0000000001
         //
         verifyException("sqlancer.databend.ast.DatabendConstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(false);
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(0L);
      // Undeclared exception!
      try { 
        databendConstant_DatabendIntConstant0.isLessThan(databendConstant0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // false
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DatabendConstant.DatabendDateConstant databendConstant_DatabendDateConstant0 = new DatabendConstant.DatabendDateConstant(0L);
      DatabendConstant databendConstant0 = DatabendConstant.createStringConstant("1970-01-01");
      // Undeclared exception!
      try { 
        databendConstant0.isLessThan(databendConstant_DatabendDateConstant0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // DATE '1970-01-01'
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DatabendConstant.DatabendDateConstant databendConstant_DatabendDateConstant0 = (DatabendConstant.DatabendDateConstant)DatabendConstant.createDateConstant(2775L);
      String string0 = databendConstant_DatabendDateConstant0.getValue();
      assertEquals("1970-01-01", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(0.0);
      double double0 = databendConstant_DatabendFloatConstant0.getValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(1038L);
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(1038L);
      assertTrue(databendConstant_DatabendFloatConstant0.isFloat());
      assertFalse(databendConstant_DatabendFloatConstant0.isInt());
      
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant)databendConstant_DatabendIntConstant0.isLessThan(databendConstant_DatabendFloatConstant0);
      assertEquals(1038.0, databendConstant_DatabendFloatConstant0.asFloat(), 0.01);
      assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
      assertFalse(databendConstant_DatabendFloatConstant0.isNull());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("W<t(Ee_3Te}");
      String string0 = databendConstant_DatabendStringConstant0.getValue();
      assertEquals("W<t(Ee_3Te}", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createStringConstant("&U!:\\1KCy}Xo");
      assertTrue(databendConstant0.isString());
      
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant)databendConstant0.isEquals(databendConstant0);
      assertFalse(databendConstant0.isNull());
      assertTrue(databendConstant_DatabendBooleanConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createStringConstant("SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE table_schema = '%s' and table_type='BASE TABLE' ");
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(true);
      // Undeclared exception!
      try { 
        databendConstant_DatabendBooleanConstant0.isLessThan(databendConstant0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // 'SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE table_schema = ''%s'' and table_type=''BASE TABLE'' '
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(1L);
      databendConstant_DatabendIntConstant0.getExpectedType();
      assertEquals(1L, databendConstant_DatabendIntConstant0.asInt());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant((-3558L));
      long long0 = databendConstant_DatabendIntConstant0.getValue();
      assertEquals((-3558L), long0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant((-2516L));
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.VARCHAR;
      DatabendConstant databendConstant0 = databendConstant_DatabendIntConstant0.cast(databendSchema_DatabendDataType0);
      // Undeclared exception!
      try { 
        databendConstant0.isEquals(databendConstant_DatabendIntConstant0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // -2516
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(false);
      boolean boolean0 = databendConstant_DatabendBooleanConstant0.getValue();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(true);
      assertTrue(databendConstant_DatabendBooleanConstant0.isBoolean());
      
      DatabendConstant databendConstant0 = databendConstant_DatabendBooleanConstant0.isEquals(databendConstant_DatabendBooleanConstant0);
      assertFalse(databendConstant_DatabendBooleanConstant0.isNull());
      assertEquals("true", databendConstant0.toString());
  }
}
