/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 08:54:01 GMT 2025
 */

package sqlancer.databend.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.databend.DatabendSchema;
import sqlancer.databend.ast.DatabendBinaryArithmeticOperation;
import sqlancer.databend.ast.DatabendColumnValue;
import sqlancer.databend.ast.DatabendConstant;
import sqlancer.databend.ast.DatabendExpression;
import sqlancer.databend.ast.DatabendLikeOperation;
import sqlancer.databend.ast.DatabendPostFixText;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatabendLikeOperation_ESTest extends DatabendLikeOperation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(false);
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(databendSchema_DatabendDataType0, (-982));
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("82|^_\"L>)nuQl&O tB", databendSchema_DatabendCompositeDataType0, false, true);
      DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create(databendSchema_DatabendColumn0, databendConstant_DatabendBooleanConstant0);
      DatabendConstant databendConstant0 = DatabendConstant.createStringConstant("82|^_\"L>)nuQl&O tB");
      DatabendColumnValue databendColumnValue1 = DatabendColumnValue.create(databendSchema_DatabendColumn0, databendConstant0);
      DatabendLikeOperation.DatabendLikeOperator databendLikeOperation_DatabendLikeOperator0 = DatabendLikeOperation.DatabendLikeOperator.LIKE_OPERATOR;
      DatabendLikeOperation databendLikeOperation0 = new DatabendLikeOperation(databendColumnValue1, databendColumnValue0, databendLikeOperation_DatabendLikeOperator0);
      // Undeclared exception!
      try { 
        databendLikeOperation0.getExpectedValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // sqlancer.databend.ast.DatabendConstant$DatabendBooleanConstant@0000000001
         //
         verifyException("sqlancer.databend.ast.DatabendConstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DatabendLikeOperation.DatabendLikeOperator databendLikeOperation_DatabendLikeOperator0 = DatabendLikeOperation.DatabendLikeOperator.LIKE_OPERATOR;
      String string0 = databendLikeOperation_DatabendLikeOperator0.getTextRepresentation();
      assertEquals("LIKE", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createFloatConstant((-934.3));
      DatabendConstant databendConstant1 = DatabendConstant.createIntConstant((-1961L));
      DatabendLikeOperation.DatabendLikeOperator databendLikeOperation_DatabendLikeOperator0 = DatabendLikeOperation.DatabendLikeOperator.LIKE_OPERATOR;
      DatabendLikeOperation databendLikeOperation0 = new DatabendLikeOperation(databendConstant0, databendConstant1, databendLikeOperation_DatabendLikeOperator0);
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = (DatabendConstant.DatabendIntConstant)databendLikeOperation0.getRightExpr();
      assertEquals((-1961L), databendConstant_DatabendIntConstant0.asInt());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DatabendPostFixText databendPostFixText0 = new DatabendPostFixText((DatabendExpression) null, "B");
      DatabendLikeOperation.DatabendLikeOperator databendLikeOperation_DatabendLikeOperator0 = DatabendLikeOperation.DatabendLikeOperator.LIKE_OPERATOR;
      DatabendLikeOperation databendLikeOperation0 = new DatabendLikeOperation((DatabendExpression) null, databendPostFixText0, databendLikeOperation_DatabendLikeOperator0);
      DatabendExpression databendExpression0 = databendLikeOperation0.getLeftExpr();
      assertNull(databendExpression0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DatabendLikeOperation.DatabendLikeOperator databendLikeOperation_DatabendLikeOperator0 = DatabendLikeOperation.DatabendLikeOperator.LIKE_OPERATOR;
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("X;U kz,]<N$;g", databendSchema_DatabendCompositeDataType0, false, false);
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("82|^_\"L>)nuQl&O tB");
      DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create(databendSchema_DatabendColumn0, databendConstant_DatabendStringConstant0);
      DatabendLikeOperation databendLikeOperation0 = new DatabendLikeOperation(databendColumnValue0, databendColumnValue0, databendLikeOperation_DatabendLikeOperator0);
      DatabendConstant databendConstant0 = databendLikeOperation0.getExpectedValue();
      assertNotNull(databendConstant0);
      assertEquals("true", databendConstant0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DatabendLikeOperation.DatabendLikeOperator databendLikeOperation_DatabendLikeOperator0 = DatabendLikeOperation.DatabendLikeOperator.LIKE_OPERATOR;
      DatabendLikeOperation databendLikeOperation0 = new DatabendLikeOperation((DatabendExpression) null, (DatabendExpression) null, databendLikeOperation_DatabendLikeOperator0);
      // Undeclared exception!
      try { 
        databendLikeOperation0.getExpectedValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.ast.DatabendLikeOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DatabendLikeOperation.DatabendLikeOperator databendLikeOperation_DatabendLikeOperator0 = DatabendLikeOperation.DatabendLikeOperator.LIKE_OPERATOR;
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(true);
      DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create((DatabendSchema.DatabendColumn) null, databendConstant_DatabendBooleanConstant0);
      DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(databendColumnValue0, databendColumnValue0, databendLikeOperation_DatabendLikeOperator0);
      DatabendLikeOperation databendLikeOperation0 = new DatabendLikeOperation(databendBinaryArithmeticOperation0, databendConstant_DatabendBooleanConstant0, databendLikeOperation_DatabendLikeOperator0);
      // Undeclared exception!
      try { 
        databendLikeOperation0.getExpectedValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class sqlancer.databend.ast.DatabendLikeOperation$DatabendLikeOperator cannot be cast to class sqlancer.databend.ast.DatabendBinaryArithmeticOperation$DatabendBinaryArithmeticOperator (sqlancer.databend.ast.DatabendLikeOperation$DatabendLikeOperator and sqlancer.databend.ast.DatabendBinaryArithmeticOperation$DatabendBinaryArithmeticOperator are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @5c8114b6)
         //
         verifyException("sqlancer.databend.ast.DatabendBinaryArithmeticOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendLikeOperation.DatabendLikeOperator databendLikeOperation_DatabendLikeOperator0 = DatabendLikeOperation.DatabendLikeOperator.LIKE_OPERATOR;
      DatabendLikeOperation databendLikeOperation0 = new DatabendLikeOperation(databendConstant_DatabendNullConstant0, (DatabendExpression) null, databendLikeOperation_DatabendLikeOperator0);
      DatabendExpression databendExpression0 = databendLikeOperation0.getRightExpr();
      assertNull(databendExpression0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DatabendPostFixText databendPostFixText0 = new DatabendPostFixText((DatabendExpression) null, "B");
      DatabendLikeOperation.DatabendLikeOperator databendLikeOperation_DatabendLikeOperator0 = DatabendLikeOperation.DatabendLikeOperator.LIKE_OPERATOR;
      DatabendLikeOperation databendLikeOperation0 = new DatabendLikeOperation(databendPostFixText0, databendPostFixText0, databendLikeOperation_DatabendLikeOperator0);
      DatabendExpression databendExpression0 = databendLikeOperation0.getLeftExpr();
      assertSame(databendExpression0, databendPostFixText0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
      DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create((DatabendSchema.DatabendColumn) null, databendConstant0);
      DatabendLikeOperation.DatabendLikeOperator databendLikeOperation_DatabendLikeOperator0 = DatabendLikeOperation.DatabendLikeOperator.LIKE_OPERATOR;
      DatabendLikeOperation databendLikeOperation0 = new DatabendLikeOperation(databendColumnValue0, databendColumnValue0, databendLikeOperation_DatabendLikeOperator0);
      DatabendConstant databendConstant1 = databendLikeOperation0.getExpectedValue();
      assertEquals(DatabendSchema.DatabendDataType.NULL, databendConstant1.getExpectedType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DatabendLikeOperation.DatabendLikeOperator databendLikeOperation_DatabendLikeOperator0 = DatabendLikeOperation.DatabendLikeOperator.LIKE_OPERATOR;
      DatabendConstant databendConstant0 = DatabendConstant.createTimestampConstant(1L);
      DatabendColumnValue databendColumnValue0 = new DatabendColumnValue((DatabendSchema.DatabendColumn) null, databendConstant0);
      DatabendLikeOperation databendLikeOperation0 = new DatabendLikeOperation(databendColumnValue0, databendConstant0, databendLikeOperation_DatabendLikeOperator0);
      DatabendConstant databendConstant1 = databendLikeOperation0.getExpectedValue();
      assertNull(databendConstant1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DatabendLikeOperation.DatabendLikeOperator databendLikeOperation_DatabendLikeOperator0 = DatabendLikeOperation.DatabendLikeOperator.LIKE_OPERATOR;
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendLikeOperation databendLikeOperation0 = new DatabendLikeOperation(databendConstant_DatabendNullConstant0, databendConstant_DatabendNullConstant0, databendLikeOperation_DatabendLikeOperator0);
      DatabendConstant databendConstant0 = databendLikeOperation0.getExpectedValue();
      assertNull(databendConstant0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DatabendLikeOperation.DatabendLikeOperator databendLikeOperation_DatabendLikeOperator0 = DatabendLikeOperation.DatabendLikeOperator.LIKE_OPERATOR;
      DatabendLikeOperation databendLikeOperation0 = new DatabendLikeOperation((DatabendExpression) null, (DatabendExpression) null, databendLikeOperation_DatabendLikeOperator0);
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = databendLikeOperation0.getExpectedType();
      assertEquals(DatabendSchema.DatabendDataType.BOOLEAN, databendSchema_DatabendDataType0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DatabendLikeOperation.DatabendLikeOperator databendLikeOperation_DatabendLikeOperator0 = DatabendLikeOperation.DatabendLikeOperator.LIKE_OPERATOR;
      DatabendLikeOperation databendLikeOperation0 = new DatabendLikeOperation((DatabendExpression) null, (DatabendExpression) null, databendLikeOperation_DatabendLikeOperator0);
      DatabendLikeOperation.DatabendLikeOperator databendLikeOperation_DatabendLikeOperator1 = databendLikeOperation0.getOp();
      assertSame(databendLikeOperation_DatabendLikeOperator1, databendLikeOperation_DatabendLikeOperator0);
  }
}
