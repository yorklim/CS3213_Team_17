/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 08:34:00 GMT 2025
 */

package sqlancer.databend.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.databend.DatabendSchema;
import sqlancer.databend.ast.DatabendBinaryArithmeticOperation;
import sqlancer.databend.ast.DatabendBinaryComparisonOperation;
import sqlancer.databend.ast.DatabendBinaryLogicalOperation;
import sqlancer.databend.ast.DatabendColumnValue;
import sqlancer.databend.ast.DatabendConstant;
import sqlancer.databend.ast.DatabendExpression;
import sqlancer.databend.ast.DatabendUnaryPrefixOperation;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatabendBinaryLogicalOperation_ESTest extends DatabendBinaryLogicalOperation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendConstant databendConstant0 = DatabendConstant.createIntConstant((-336L));
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.AND;
      DatabendConstant databendConstant1 = databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0.apply(databendConstant_DatabendNullConstant0, databendConstant0);
      assertEquals("NULL", databendConstant1.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.getRandom();
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(260.885189477);
      DatabendConstant databendConstant0 = databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0.apply(databendConstant_DatabendFloatConstant0, databendConstant_DatabendFloatConstant0);
      assertFalse(databendConstant0.isNull());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn((String) null, databendSchema_DatabendCompositeDataType0, true, true);
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant((-4024.57005972));
      DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create(databendSchema_DatabendColumn0, databendConstant_DatabendFloatConstant0);
      DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0 = DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator.NOT;
      DatabendUnaryPrefixOperation databendUnaryPrefixOperation0 = new DatabendUnaryPrefixOperation(databendColumnValue0, databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0);
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.AND;
      DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation(databendUnaryPrefixOperation0, databendColumnValue0, databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = (DatabendConstant.DatabendBooleanConstant)databendBinaryLogicalOperation0.getExpectedValue();
      assertNotNull(databendConstant_DatabendBooleanConstant0);
      assertFalse(databendConstant_DatabendBooleanConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.AND;
      DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation(databendConstant0, databendConstant0, databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = (DatabendConstant.DatabendNullConstant)databendBinaryLogicalOperation0.getRightExpr();
      assertFalse(databendConstant_DatabendNullConstant0.isInt());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.OR;
      DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation((DatabendExpression) null, (DatabendExpression) null, databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
      DatabendExpression databendExpression0 = databendBinaryLogicalOperation0.getLeftExpr();
      assertNull(databendExpression0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.OR;
      DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation((DatabendExpression) null, (DatabendExpression) null, databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
      // Undeclared exception!
      try { 
        databendBinaryLogicalOperation0.getExpectedValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.ast.DatabendBinaryLogicalOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.AND;
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(databendSchema_DatabendDataType0, 1);
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("", databendSchema_DatabendCompositeDataType0, true, true);
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(true);
      DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0, databendConstant_DatabendBooleanConstant0);
      DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(databendColumnValue0, databendColumnValue0, databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
      DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation(databendBinaryArithmeticOperation0, databendConstant_DatabendBooleanConstant0, databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
      // Undeclared exception!
      try { 
        databendBinaryLogicalOperation0.getExpectedValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class sqlancer.databend.ast.DatabendBinaryLogicalOperation$DatabendBinaryLogicalOperator$1 cannot be cast to class sqlancer.databend.ast.DatabendBinaryArithmeticOperation$DatabendBinaryArithmeticOperator (sqlancer.databend.ast.DatabendBinaryLogicalOperation$DatabendBinaryLogicalOperator$1 and sqlancer.databend.ast.DatabendBinaryArithmeticOperation$DatabendBinaryArithmeticOperator are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @261704fd)
         //
         verifyException("sqlancer.databend.ast.DatabendBinaryArithmeticOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("-D(w4@V", databendSchema_DatabendCompositeDataType0, true, false);
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("");
      DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create(databendSchema_DatabendColumn0, databendConstant_DatabendStringConstant0);
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.AND;
      DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation(databendColumnValue0, databendColumnValue0, databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
      // Undeclared exception!
      try { 
        databendBinaryLogicalOperation0.getExpectedValue();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // string: , cannot be forced to boolean
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.AND;
      DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation((DatabendExpression) null, (DatabendExpression) null, databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
      DatabendExpression databendExpression0 = databendBinaryLogicalOperation0.getRightExpr();
      assertNull(databendExpression0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.getRandom();
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(true);
      DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation(databendConstant_DatabendBooleanConstant0, databendConstant_DatabendBooleanConstant0, databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant1 = (DatabendConstant.DatabendBooleanConstant)databendBinaryLogicalOperation0.getLeftExpr();
      assertTrue(databendConstant_DatabendBooleanConstant1.isBoolean());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(false);
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.OR;
      DatabendConstant databendConstant1 = databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0.apply(databendConstant_DatabendBooleanConstant0, databendConstant0);
      assertNotSame(databendConstant1, databendConstant0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.OR;
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant(260.885189477);
      DatabendConstant databendConstant0 = databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0.apply(databendConstant_DatabendFloatConstant0, databendConstant_DatabendFloatConstant0);
      assertEquals("true", databendConstant0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("SzS51'L", databendSchema_DatabendCompositeDataType0, false, true);
      DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
      DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0, databendConstant0);
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.OR;
      DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation(databendColumnValue0, databendColumnValue0, databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
      DatabendConstant databendConstant1 = databendBinaryLogicalOperation0.getExpectedValue();
      assertEquals("NULL", databendConstant1.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createIntConstant(0L);
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.OR;
      DatabendConstant databendConstant1 = databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0.apply(databendConstant0, databendConstant0);
      assertEquals("false", databendConstant1.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(true);
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.OR;
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendConstant databendConstant0 = databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0.apply(databendConstant_DatabendNullConstant0, databendConstant_DatabendBooleanConstant0);
      assertEquals("true", databendConstant0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.getRandom();
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendConstant databendConstant0 = databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0.apply(databendConstant_DatabendNullConstant0, databendConstant_DatabendNullConstant0);
      assertFalse(databendConstant0.isFloat());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(true);
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.AND;
      DatabendConstant databendConstant1 = databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0.apply(databendConstant0, databendConstant_DatabendNullConstant0);
      assertFalse(databendConstant1.isInt());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(false);
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.AND;
      DatabendConstant databendConstant1 = databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0.apply(databendConstant0, databendConstant_DatabendBooleanConstant0);
      assertEquals("false", databendConstant1.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.getRandom();
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("", databendSchema_DatabendCompositeDataType0, true, true);
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.IS_DISTINCT;
      DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
      DatabendConstant databendConstant1 = databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0.apply(databendConstant0, databendConstant0);
      DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0, databendConstant1);
      DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation(databendColumnValue0, databendConstant1, databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
      DatabendConstant databendConstant2 = databendBinaryLogicalOperation0.getExpectedValue();
      assertNull(databendConstant2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.getRandom();
      String string0 = databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0.getTextRepresentation();
      assertEquals("and", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.OR;
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator1 = databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0.getRandomOp();
      assertFalse(databendBinaryLogicalOperation_DatabendBinaryLogicalOperator1.equals((Object)databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.OR;
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation(databendConstant_DatabendNullConstant0, databendConstant_DatabendNullConstant0, databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = databendBinaryLogicalOperation0.getExpectedType();
      assertEquals(DatabendSchema.DatabendDataType.BOOLEAN, databendSchema_DatabendDataType0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.getRandom();
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(true);
      DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation(databendConstant_DatabendBooleanConstant0, databendConstant_DatabendBooleanConstant0, databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator1 = databendBinaryLogicalOperation0.getOp();
      assertSame(databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0, databendBinaryLogicalOperation_DatabendBinaryLogicalOperator1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.getRandom();
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(true);
      DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation(databendConstant_DatabendBooleanConstant0, databendConstant_DatabendBooleanConstant0, databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
      DatabendConstant databendConstant0 = databendBinaryLogicalOperation0.getExpectedValue();
      assertNull(databendConstant0);
  }
}
