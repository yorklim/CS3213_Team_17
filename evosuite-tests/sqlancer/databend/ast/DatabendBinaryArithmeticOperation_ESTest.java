/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 08:29:52 GMT 2025
 */

package sqlancer.databend.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.function.BinaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import sqlancer.common.ast.BinaryOperatorNode;
import sqlancer.databend.DatabendSchema;
import sqlancer.databend.ast.DatabendBinaryArithmeticOperation;
import sqlancer.databend.ast.DatabendBinaryComparisonOperation;
import sqlancer.databend.ast.DatabendCastOperation;
import sqlancer.databend.ast.DatabendColumnValue;
import sqlancer.databend.ast.DatabendConstant;
import sqlancer.databend.ast.DatabendExpression;
import sqlancer.databend.ast.DatabendLikeOperation;
import sqlancer.databend.ast.DatabendUnaryPrefixOperation;
import sqlancer.h2.H2ExpressionGenerator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatabendBinaryArithmeticOperation_ESTest extends DatabendBinaryArithmeticOperation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn(",H}HeG43", databendSchema_DatabendCompositeDataType0, false, false);
      DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0, databendConstant_DatabendNullConstant0);
      DatabendCastOperation databendCastOperation0 = new DatabendCastOperation(databendColumnValue0, databendSchema_DatabendCompositeDataType0);
      DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(databendCastOperation0, databendColumnValue0, (BinaryOperatorNode.Operator) null);
      // Undeclared exception!
      try { 
        databendBinaryArithmeticOperation0.getExpectedValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.ast.DatabendBinaryArithmeticOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(false);
      DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.MODULO;
      DatabendConstant databendConstant1 = databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0.apply(databendConstant0, databendConstant0);
      DatabendConstant databendConstant2 = databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0.apply(databendConstant0, databendConstant1);
      assertEquals("-1", databendConstant1.toString());
      assertEquals(0L, databendConstant2.asInt());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.DIVISION;
      DatabendConstant databendConstant0 = DatabendConstant.createIntConstant(46L);
      DatabendConstant databendConstant1 = databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0.apply(databendConstant0, databendConstant0);
      assertEquals(1L, databendConstant1.asInt());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(false);
      DatabendConstant databendConstant1 = DatabendConstant.createBooleanConstant(true);
      DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.MULTIPLICATION;
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = (DatabendConstant.DatabendIntConstant)databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0.apply(databendConstant1, databendConstant0);
      assertEquals(0L, databendConstant_DatabendIntConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(true);
      DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(true);
      DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.MULTIPLICATION;
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = (DatabendConstant.DatabendIntConstant)databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0.apply(databendConstant_DatabendBooleanConstant0, databendConstant0);
      assertEquals(1L, databendConstant_DatabendIntConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(true);
      DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.SUBTRACTION;
      DatabendConstant databendConstant1 = DatabendConstant.createStringConstant("7C=");
      DatabendConstant databendConstant2 = databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0.apply(databendConstant1, databendConstant0);
      assertEquals("-2", databendConstant2.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(false);
      DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.DIVISION;
      DatabendConstant databendConstant1 = databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0.apply(databendConstant0, databendConstant0);
      DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator1 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.ADDITION;
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = (DatabendConstant.DatabendIntConstant)databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator1.apply(databendConstant0, databendConstant1);
      assertEquals((-1L), databendConstant_DatabendIntConstant0.getValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.DIVISION;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      BinaryOperator<Long> binaryOperator0 = BinaryOperator.minBy((Comparator<? super Long>) comparator0);
      DatabendConstant databendConstant0 = databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0.applyOperation(databendConstant_DatabendNullConstant0, databendConstant_DatabendNullConstant0, binaryOperator0);
      assertNotSame(databendConstant0, databendConstant_DatabendNullConstant0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.SUBTRACTION;
      String string0 = databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0.getTextRepresentation();
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER_EQUALS;
      DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(databendConstant_DatabendNullConstant0, databendConstant_DatabendNullConstant0, databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant1 = (DatabendConstant.DatabendNullConstant)databendBinaryArithmeticOperation0.getRightExpr();
      assertTrue(databendConstant_DatabendNullConstant1.isNull());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(true);
      DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.ADDITION;
      DatabendConstant databendConstant1 = databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0.apply(databendConstant0, databendConstant0);
      DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(databendConstant0, databendConstant1, databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0);
      databendBinaryArithmeticOperation0.getOp();
      assertEquals("2", databendConstant1.toString());
      assertEquals(2L, databendConstant1.asInt());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("CG$a,", databendSchema_DatabendCompositeDataType0, true, true);
      DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
      DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0, databendConstant0);
      DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0 = DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator.UNARY_PLUS;
      DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(databendColumnValue0, databendColumnValue0, databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0);
      DatabendExpression databendExpression0 = databendBinaryArithmeticOperation0.getLeftExpr();
      assertSame(databendExpression0, databendColumnValue0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER_EQUALS;
      DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(databendConstant_DatabendNullConstant0, databendConstant_DatabendNullConstant0, databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
      // Undeclared exception!
      try { 
        databendBinaryArithmeticOperation0.getOp();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class sqlancer.databend.ast.DatabendBinaryComparisonOperation$DatabendBinaryComparisonOperator$8 cannot be cast to class sqlancer.databend.ast.DatabendBinaryArithmeticOperation$DatabendBinaryArithmeticOperator (sqlancer.databend.ast.DatabendBinaryComparisonOperation$DatabendBinaryComparisonOperator$8 and sqlancer.databend.ast.DatabendBinaryArithmeticOperation$DatabendBinaryArithmeticOperator are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @1d8f8448)
         //
         verifyException("sqlancer.databend.ast.DatabendBinaryArithmeticOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DatabendConstant.DatabendTimestampConstant databendConstant_DatabendTimestampConstant0 = new DatabendConstant.DatabendTimestampConstant(1218L);
      DatabendColumnValue databendColumnValue0 = DatabendColumnValue.create((DatabendSchema.DatabendColumn) null, databendConstant_DatabendTimestampConstant0);
      DatabendLikeOperation.DatabendLikeOperator databendLikeOperation_DatabendLikeOperator0 = DatabendLikeOperation.DatabendLikeOperator.LIKE_OPERATOR;
      DatabendLikeOperation databendLikeOperation0 = new DatabendLikeOperation(databendColumnValue0, databendColumnValue0, databendLikeOperation_DatabendLikeOperator0);
      DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(databendLikeOperation0, databendLikeOperation0, databendLikeOperation_DatabendLikeOperator0);
      // Undeclared exception!
      try { 
        databendBinaryArithmeticOperation0.getExpectedValue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // sqlancer.databend.ast.DatabendConstant$DatabendTimestampConstant@0000000001
         //
         verifyException("sqlancer.databend.ast.DatabendConstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.LESS;
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("", (DatabendSchema.DatabendCompositeDataType) null, true, true);
      DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0, databendConstant_DatabendNullConstant0);
      DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(databendColumnValue0, databendColumnValue0, databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
      // Undeclared exception!
      try { 
        databendBinaryArithmeticOperation0.getExpectedValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class sqlancer.databend.ast.DatabendBinaryComparisonOperation$DatabendBinaryComparisonOperator$5 cannot be cast to class sqlancer.databend.ast.DatabendBinaryArithmeticOperation$DatabendBinaryArithmeticOperator (sqlancer.databend.ast.DatabendBinaryComparisonOperation$DatabendBinaryComparisonOperator$5 and sqlancer.databend.ast.DatabendBinaryArithmeticOperation$DatabendBinaryArithmeticOperator are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @1d8f8448)
         //
         verifyException("sqlancer.databend.ast.DatabendBinaryArithmeticOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      H2ExpressionGenerator.H2UnaryPostfixOperator h2ExpressionGenerator_H2UnaryPostfixOperator0 = H2ExpressionGenerator.H2UnaryPostfixOperator.IS_NOT_TRUE;
      DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation((DatabendExpression) null, (DatabendExpression) null, h2ExpressionGenerator_H2UnaryPostfixOperator0);
      DatabendExpression databendExpression0 = databendBinaryArithmeticOperation0.getRightExpr();
      assertNull(databendExpression0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(true);
      DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(databendConstant_DatabendBooleanConstant0, databendConstant_DatabendBooleanConstant0, (BinaryOperatorNode.Operator) null);
      databendBinaryArithmeticOperation0.getOp();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DatabendConstant.DatabendDateConstant databendConstant_DatabendDateConstant0 = new DatabendConstant.DatabendDateConstant(1L);
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.IS_DISTINCT;
      DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation((DatabendExpression) null, databendConstant_DatabendDateConstant0, databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
      DatabendExpression databendExpression0 = databendBinaryArithmeticOperation0.getLeftExpr();
      assertNull(databendExpression0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.LESS;
      DatabendColumnValue databendColumnValue0 = new DatabendColumnValue((DatabendSchema.DatabendColumn) null, databendConstant_DatabendNullConstant0);
      DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(databendColumnValue0, databendConstant_DatabendNullConstant0, databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
      DatabendConstant databendConstant0 = databendBinaryArithmeticOperation0.getExpectedValue();
      assertNull(databendConstant0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.EQUALS;
      DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(databendConstant_DatabendNullConstant0, databendConstant_DatabendNullConstant0, databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
      DatabendConstant databendConstant0 = databendBinaryArithmeticOperation0.getExpectedValue();
      assertNull(databendConstant0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.MODULO;
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(2946L);
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant1 = (DatabendConstant.DatabendIntConstant)databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0.apply(databendConstant_DatabendIntConstant0, databendConstant_DatabendIntConstant0);
      assertEquals(0L, databendConstant_DatabendIntConstant1.getValue());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(false);
      DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.DIVISION;
      DatabendConstant databendConstant1 = databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0.apply(databendConstant0, databendConstant0);
      DatabendConstant databendConstant2 = databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0.apply(databendConstant0, databendConstant1);
      assertEquals(0L, databendConstant2.asInt());
      assertEquals("-1", databendConstant1.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("", (DatabendSchema.DatabendCompositeDataType) null, true, true);
      DatabendColumnValue databendColumnValue0 = new DatabendColumnValue(databendSchema_DatabendColumn0, databendConstant_DatabendNullConstant0);
      DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.MULTIPLICATION;
      DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(databendColumnValue0, databendColumnValue0, databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0);
      DatabendConstant databendConstant0 = databendBinaryArithmeticOperation0.getExpectedValue();
      assertNotSame(databendConstant_DatabendNullConstant0, databendConstant0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendConstant databendConstant0 = DatabendConstant.createFloatConstant((-503.1241));
      DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0 = DatabendBinaryArithmeticOperation.DatabendBinaryArithmeticOperator.ADDITION;
      DatabendConstant databendConstant1 = databendBinaryArithmeticOperation_DatabendBinaryArithmeticOperator0.apply(databendConstant0, databendConstant_DatabendNullConstant0);
      assertFalse(databendConstant1.isBoolean());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      H2ExpressionGenerator.H2UnaryPostfixOperator h2ExpressionGenerator_H2UnaryPostfixOperator0 = H2ExpressionGenerator.H2UnaryPostfixOperator.IS_NOT_NULL;
      DatabendBinaryArithmeticOperation databendBinaryArithmeticOperation0 = new DatabendBinaryArithmeticOperation(databendConstant_DatabendNullConstant0, databendConstant_DatabendNullConstant0, h2ExpressionGenerator_H2UnaryPostfixOperator0);
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = databendBinaryArithmeticOperation0.getExpectedType();
      assertEquals(DatabendSchema.DatabendDataType.INT, databendSchema_DatabendDataType0);
  }
}
