/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Mon Apr 14 08:48:42 GMT 2025
 */

package sqlancer.databend.ast;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class DatabendSelect_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "sqlancer.databend.ast.DatabendSelect"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "E:\\Y2S2\\CS3213\\Sqlancer_original"); 
    java.lang.System.setProperty("java.io.tmpdir", "C:\\Users\\hp\\AppData\\Local\\Temp\\"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DatabendSelect_ESTest_scaffolding.class.getClassLoader() ,
      "sqlancer.databend.DatabendSchema$DatabendTable",
      "sqlancer.common.ast.newast.ColumnReferenceNode",
      "sqlancer.common.ast.newast.NewOrderingTerm",
      "sqlancer.databend.ast.DatabendJoin$OuterType",
      "sqlancer.common.ast.newast.NewPostfixTextNode",
      "sqlancer.SQLProviderAdapter",
      "sqlancer.databend.DatabendProvider",
      "sqlancer.databend.DatabendProvider$DatabendGlobalState",
      "sqlancer.common.ast.newast.NewFunctionNode",
      "sqlancer.common.ast.newast.NewToStringVisitor",
      "sqlancer.common.schema.AbstractTableColumn",
      "sqlancer.databend.ast.DatabendConstant",
      "sqlancer.common.ast.newast.NewCaseOperatorNode",
      "sqlancer.common.ast.newast.NewAliasNode",
      "sqlancer.databend.DatabendSchema",
      "sqlancer.databend.ast.DatabendJoin$JoinType",
      "sqlancer.common.ast.newast.Expression",
      "sqlancer.SQLGlobalState",
      "sqlancer.common.ast.newast.NewTernaryNode",
      "sqlancer.common.schema.AbstractTable",
      "sqlancer.databend.DatabendSchema$DatabendCompositeDataType",
      "sqlancer.common.ast.newast.NewBinaryOperatorNode",
      "sqlancer.GlobalState",
      "sqlancer.common.ast.newast.Select",
      "sqlancer.databend.DatabendSchema$DatabendRowValue",
      "sqlancer.common.schema.AbstractSchema",
      "sqlancer.common.ast.newast.Join",
      "sqlancer.databend.ast.DatabendJoin",
      "sqlancer.databend.DatabendSchema$DatabendColumn",
      "sqlancer.DatabaseProvider",
      "sqlancer.databend.DatabendSchema$DatabendDataType",
      "sqlancer.databend.ast.DatabendFunctionOperation",
      "sqlancer.common.ast.newast.NewBetweenOperatorNode",
      "sqlancer.common.ast.newast.NewInOperatorNode",
      "sqlancer.common.schema.AbstractRelationalTable",
      "sqlancer.databend.ast.DatabendSelect",
      "sqlancer.common.ast.newast.NewUnaryPrefixOperatorNode",
      "sqlancer.common.ast.SelectBase",
      "sqlancer.common.schema.AbstractRowValue",
      "sqlancer.databend.ast.DatabendExpression",
      "sqlancer.ProviderAdapter",
      "sqlancer.databend.DatabendToStringVisitor",
      "sqlancer.databend.ast.DatabendTableReference",
      "sqlancer.common.ast.newast.NewUnaryPostfixOperatorNode",
      "sqlancer.common.ast.newast.TableReferenceNode"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DatabendSelect_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "sqlancer.common.ast.SelectBase",
      "sqlancer.databend.ast.DatabendSelect",
      "sqlancer.common.ast.newast.NewToStringVisitor",
      "sqlancer.databend.DatabendToStringVisitor",
      "sqlancer.Randomly$StringGenerationStrategy$4",
      "sqlancer.Randomly$StringGenerationStrategy",
      "sqlancer.Randomly",
      "sqlancer.databend.DatabendSchema$DatabendCompositeDataType",
      "sqlancer.common.ast.newast.NewUnaryPostfixOperatorNode",
      "sqlancer.databend.ast.DatabendCastOperation",
      "sqlancer.databend.ast.DatabendCastOperation$1",
      "sqlancer.databend.ast.DatabendConstant",
      "sqlancer.databend.ast.DatabendConstant$DatabendFloatConstant",
      "sqlancer.databend.ast.DatabendConstant$DatabendTimestampConstant",
      "sqlancer.databend.ast.DatabendConstant$DatabendBooleanConstant",
      "sqlancer.common.ast.newast.NewInOperatorNode",
      "sqlancer.databend.ast.DatabendInOperation",
      "sqlancer.common.schema.AbstractTableColumn",
      "sqlancer.databend.DatabendSchema$DatabendColumn",
      "sqlancer.databend.ast.DatabendConstant$DatabendDateConstant",
      "sqlancer.databend.ast.DatabendConstant$DatabendStringConstant",
      "sqlancer.GlobalState",
      "sqlancer.SQLGlobalState",
      "sqlancer.databend.DatabendProvider$DatabendGlobalState",
      "sqlancer.databend.ast.DatabendJoin",
      "sqlancer.databend.ast.DatabendConstant$DatabendNullConstant",
      "sqlancer.common.schema.AbstractTable",
      "sqlancer.common.schema.AbstractRelationalTable",
      "sqlancer.databend.DatabendSchema$DatabendTable",
      "sqlancer.databend.ast.DatabendConstant$DatabendIntConstant",
      "sqlancer.common.ast.newast.NewBinaryOperatorNode",
      "sqlancer.databend.ast.DatabendBinaryComparisonOperation",
      "sqlancer.common.schema.AbstractTables",
      "sqlancer.common.ast.newast.TableReferenceNode",
      "sqlancer.databend.ast.DatabendTableReference",
      "sqlancer.common.ast.newast.ColumnReferenceNode",
      "sqlancer.databend.ast.DatabendColumnValue",
      "sqlancer.oceanbase.ast.OceanBaseUnaryPrefixOperation$OceanBaseUnaryPrefixOperator",
      "sqlancer.databend.ast.DatabendBinaryArithmeticOperation",
      "sqlancer.common.ast.newast.NewUnaryPrefixOperatorNode",
      "sqlancer.databend.ast.DatabendUnaryPrefixOperation",
      "sqlancer.common.ast.newast.NewFunctionNode",
      "sqlancer.databend.ast.DatabendFunctionOperation",
      "sqlancer.databend.ast.DatabendAggregateOperation",
      "sqlancer.databend.ast.DatabendUnaryPostfixOperation",
      "sqlancer.presto.PrestoSchema$PrestoCompositeDataType",
      "sqlancer.presto.PrestoSchema$PrestoColumn",
      "sqlancer.presto.PrestoSchema$PrestoTable",
      "sqlancer.common.query.ExpectedErrors",
      "sqlancer.databend.ast.DatabendLikeOperation",
      "sqlancer.databend.ast.DatabendColumnReference",
      "sqlancer.common.ast.newast.NewBetweenOperatorNode",
      "sqlancer.databend.ast.DatabendBetweenOperation",
      "sqlancer.databend.ast.DatabendBinaryLogicalOperation",
      "sqlancer.doris.DorisSchema$DorisDataType",
      "sqlancer.doris.ast.DorisUnaryPrefixOperation$DorisUnaryPrefixOperator",
      "sqlancer.cockroachdb.ast.CockroachDBUnaryPostfixOperation$CockroachDBUnaryPostfixOperator",
      "sqlancer.materialize.ast.MaterializeBinaryBitOperation$MaterializeBinaryBitOperator",
      "sqlancer.databend.ast.DatabendBinaryOperation",
      "sqlancer.common.ast.newast.NewAliasNode",
      "sqlancer.databend.ast.DatabendAlias",
      "sqlancer.postgres.ast.PostgresBinaryLogicalOperation$BinaryLogicalOperator",
      "sqlancer.postgres.ast.PostgresBinaryBitOperation$PostgresBinaryBitOperator",
      "sqlancer.common.ast.newast.NewPostfixTextNode",
      "sqlancer.databend.ast.DatabendPostFixText",
      "sqlancer.cockroachdb.ast.CockroachDBBinaryComparisonOperator$CockroachDBComparisonOperator",
      "sqlancer.common.query.Query",
      "sqlancer.common.query.SQLQueryAdapter",
      "sqlancer.common.query.SQLQueryResultCheckAdapter",
      "sqlancer.IgnoreMeException",
      "sqlancer.materialize.ast.MaterializePostfixOperation$PostfixOperator",
      "sqlancer.common.ast.newast.NewOrderingTerm",
      "sqlancer.databend.ast.DatabendOrderByTerm",
      "sqlancer.postgres.ast.PostgresPostfixOperation$PostfixOperator",
      "sqlancer.postgres.ast.PostgresConstant",
      "sqlancer.postgres.ast.PostgresConstant$BooleanConstant",
      "sqlancer.postgres.ast.PostgresConstant$PostgresConstantBase",
      "sqlancer.postgres.ast.PostgresConstant$DecimalConstant",
      "sqlancer.mysql.ast.MySQLUnaryPrefixOperation$MySQLUnaryPrefixOperator",
      "sqlancer.doris.ast.DorisBinaryComparisonOperation$DorisBinaryComparisonOperator",
      "sqlancer.h2.H2ExpressionGenerator$H2BinaryComparisonOperator",
      "sqlancer.tidb.ast.TiDBRegexOperation$TiDBRegexOperator",
      "sqlancer.postgres.ast.PostgresBinaryComparisonOperation$PostgresBinaryComparisonOperator",
      "sqlancer.postgres.ast.PostgresAlias",
      "sqlancer.materialize.ast.MaterializeBinaryArithmeticOperation$MaterializeBinaryOperator",
      "sqlancer.materialize.ast.MaterializePOSIXRegularExpression$POSIXRegex",
      "sqlancer.h2.H2ExpressionGenerator$H2UnaryPostfixOperator",
      "sqlancer.materialize.ast.MaterializeBinaryComparisonOperation$MaterializeBinaryComparisonOperator",
      "sqlancer.tidb.ast.TiDBBinaryComparisonOperation$TiDBComparisonOperator",
      "sqlancer.tidb.ast.TiDBUnaryPrefixOperation$TiDBUnaryPrefixOperator",
      "sqlancer.postgres.ast.PostgresPOSIXRegularExpression$POSIXRegex",
      "sqlancer.materialize.MaterializeSchema$MaterializeDataType",
      "sqlancer.materialize.ast.MaterializePrefixOperation$PrefixOperator",
      "sqlancer.materialize.ast.MaterializeBinaryLogicalOperation$BinaryLogicalOperator",
      "sqlancer.h2.H2ExpressionGenerator$H2BinaryArithmeticOperator",
      "sqlancer.doris.ast.DorisUnaryPostfixOperation$DorisUnaryPostfixOperator",
      "sqlancer.tidb.ast.TiDBBinaryArithmeticOperation$TiDBBinaryArithmeticOperator",
      "sqlancer.tidb.ast.TiDBUnaryPostfixOperation$TiDBUnaryPostfixOperator",
      "sqlancer.common.query.ExpectedErrors$ExpectedErrorsBuilder",
      "sqlancer.presto.ast.PrestoUnaryPostfixOperation$PrestoUnaryPostfixOperator",
      "sqlancer.doris.ast.DorisBinaryLogicalOperation$DorisBinaryLogicalOperator",
      "sqlancer.tidb.ast.TiDBBinaryBitOperation$TiDBBinaryBitOperator",
      "sqlancer.materialize.ast.MaterializeBinaryRangeOperation$MaterializeBinaryRangeOperator",
      "sqlancer.postgres.ast.PostgresBinaryRangeOperation$PostgresBinaryRangeOperator",
      "sqlancer.postgres.ast.PostgresBinaryArithmeticOperation$PostgresBinaryOperator",
      "sqlancer.mysql.ast.MySQLConstant",
      "sqlancer.mysql.ast.MySQLConstant$MySQLIntConstant",
      "sqlancer.mysql.ast.MySQLConstant$MySQLNullConstant",
      "sqlancer.databend.ast.DatabendJoin$JoinType"
    );
  }
}
