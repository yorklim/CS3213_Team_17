/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 08:52:38 GMT 2025
 */

package sqlancer.databend;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.databend.DatabendSchema;
import sqlancer.databend.DatabendToStringVisitor;
import sqlancer.databend.ast.DatabendCastOperation;
import sqlancer.databend.ast.DatabendConstant;
import sqlancer.databend.ast.DatabendExpression;
import sqlancer.databend.ast.DatabendJoin;
import sqlancer.databend.ast.DatabendSelect;
import sqlancer.databend.ast.DatabendTableReference;
import sqlancer.databend.ast.DatabendUnaryPrefixOperation;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatabendToStringVisitor_ESTest extends DatabendToStringVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<DatabendSchema.DatabendColumn> linkedList0 = new LinkedList<DatabendSchema.DatabendColumn>();
      DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable("", linkedList0, true);
      DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
      String string0 = DatabendToStringVisitor.asString(databendTableReference0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DatabendToStringVisitor databendToStringVisitor0 = new DatabendToStringVisitor();
      DatabendTableReference databendTableReference0 = new DatabendTableReference((DatabendSchema.DatabendTable) null);
      // Undeclared exception!
      try { 
        databendToStringVisitor0.visitSpecific((DatabendExpression) databendTableReference0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // class sqlancer.databend.ast.DatabendTableReference
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("a");
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.FLOAT;
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(databendSchema_DatabendDataType0, 4160);
      DatabendCastOperation databendCastOperation0 = new DatabendCastOperation(databendConstant_DatabendStringConstant0, databendSchema_DatabendCompositeDataType0);
      DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0 = DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator.UNARY_MINUS;
      DatabendUnaryPrefixOperation databendUnaryPrefixOperation0 = new DatabendUnaryPrefixOperation(databendCastOperation0, databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0);
      // Undeclared exception!
      try { 
        DatabendToStringVisitor.asString(databendUnaryPrefixOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // 4160
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DatabendToStringVisitor databendToStringVisitor0 = new DatabendToStringVisitor();
      LinkedList<DatabendSchema.DatabendColumn> linkedList0 = new LinkedList<DatabendSchema.DatabendColumn>();
      DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable("", linkedList0, true);
      DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
      DatabendJoin databendJoin0 = DatabendJoin.createRightOuterJoin(databendTableReference0, databendTableReference0, databendTableReference0);
      databendToStringVisitor0.visitSpecific((DatabendExpression) databendJoin0);
      assertEquals(" RIGHT  JOIN  ON ", databendToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DatabendToStringVisitor databendToStringVisitor0 = new DatabendToStringVisitor();
      DatabendConstant databendConstant0 = DatabendConstant.createBooleanConstant(false);
      databendToStringVisitor0.visitSpecific((DatabendExpression) databendConstant0);
      assertFalse(databendConstant0.isNull());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DatabendSelect databendSelect0 = new DatabendSelect();
      databendSelect0.setDistinct(true);
      // Undeclared exception!
      try { 
        DatabendToStringVisitor.asString(databendSelect0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<DatabendSchema.DatabendColumn> linkedList0 = new LinkedList<DatabendSchema.DatabendColumn>();
      DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable("6@", linkedList0, false);
      DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
      DatabendJoin.OuterType databendJoin_OuterType0 = DatabendJoin.OuterType.LEFT;
      DatabendJoin databendJoin0 = DatabendJoin.createNaturalJoin(databendTableReference0, databendTableReference0, databendJoin_OuterType0);
      String string0 = DatabendToStringVisitor.asString(databendJoin0);
      assertEquals("6@ NATURAL LEFT JOIN 6@", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DatabendJoin databendJoin0 = DatabendJoin.createRightOuterJoin((DatabendTableReference) null, (DatabendTableReference) null, (DatabendExpression) null);
      // Undeclared exception!
      try { 
        DatabendToStringVisitor.asString(databendJoin0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.newast.NewToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DatabendSelect databendSelect0 = new DatabendSelect();
      DatabendToStringVisitor databendToStringVisitor0 = new DatabendToStringVisitor();
      // Undeclared exception!
      try { 
        databendToStringVisitor0.visitSpecific((DatabendExpression) databendSelect0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DatabendToStringVisitor databendToStringVisitor0 = new DatabendToStringVisitor();
      // Undeclared exception!
      try { 
        databendToStringVisitor0.visitSpecific((DatabendExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.DatabendToStringVisitor", e);
      }
  }
}
