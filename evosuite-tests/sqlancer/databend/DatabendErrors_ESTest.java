/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 08:24:19 GMT 2025
 */

package sqlancer.databend;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.common.query.ExpectedErrors;
import sqlancer.databend.DatabendErrors;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatabendErrors_ESTest extends DatabendErrors_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Pattern> linkedList1 = new LinkedList<Pattern>();
      ExpectedErrors expectedErrors0 = new ExpectedErrors(linkedList0, linkedList1);
      DatabendErrors.addGroupByErrors(expectedErrors0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ExpectedErrors expectedErrors0 = new ExpectedErrors();
      DatabendErrors.addExpressionErrors(expectedErrors0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatabendErrors.addInsertErrors((ExpectedErrors) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.DatabendErrors", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      List<String> list0 = DatabendErrors.getExpressionErrors();
      assertEquals(16, list0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      List<String> list0 = DatabendErrors.getGroupByErrors();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ExpectedErrors expectedErrors0 = ExpectedErrors.from(stringArray0);
      DatabendErrors.addInsertErrors(expectedErrors0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      List<String> list0 = DatabendErrors.getInsertErrors();
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatabendErrors.addExpressionErrors((ExpectedErrors) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.DatabendErrors", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatabendErrors.addGroupByErrors((ExpectedErrors) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.DatabendErrors", e);
      }
  }
}
