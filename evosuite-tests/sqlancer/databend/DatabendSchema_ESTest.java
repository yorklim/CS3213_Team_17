/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 08:28:17 GMT 2025
 */

package sqlancer.databend;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import sqlancer.SQLConnection;
import sqlancer.databend.DatabendSchema;
import sqlancer.databend.ast.DatabendConstant;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatabendSchema_ESTest extends DatabendSchema_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.DATE;
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(databendSchema_DatabendDataType0, (-1389167889));
      int int0 = databendSchema_DatabendCompositeDataType0.getSize();
      assertEquals((-1389167889), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = databendSchema_DatabendCompositeDataType0.getPrimitiveDataType();
      assertEquals(DatabendSchema.DatabendDataType.INT, databendSchema_DatabendDataType0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<DatabendSchema.DatabendTable> linkedList0 = new LinkedList<DatabendSchema.DatabendTable>();
      DatabendSchema databendSchema0 = new DatabendSchema(linkedList0);
      linkedList0.add((DatabendSchema.DatabendTable) null);
      // Undeclared exception!
      try { 
        databendSchema0.getRandomTableNonEmptyTables();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.schema.AbstractTables", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<DatabendSchema.DatabendTable> linkedList0 = new LinkedList<DatabendSchema.DatabendTable>();
      DatabendSchema databendSchema0 = new DatabendSchema(linkedList0);
      // Undeclared exception!
      try { 
        databendSchema0.getRandomTableNonEmptyTables();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // [] 1
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<DatabendSchema.DatabendTable> linkedList0 = new LinkedList<DatabendSchema.DatabendTable>();
      linkedList0.add((DatabendSchema.DatabendTable) null);
      DatabendSchema databendSchema0 = new DatabendSchema(linkedList0);
      // Undeclared exception!
      try { 
        databendSchema0.getRandomTableNonEmptyAndViewTables();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.DatabendSchema", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<DatabendSchema.DatabendTable> linkedList0 = new LinkedList<DatabendSchema.DatabendTable>();
      DatabendSchema databendSchema0 = new DatabendSchema(linkedList0);
      // Undeclared exception!
      try { 
        databendSchema0.getRandomTableNonEmptyAndViewTables();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // [] 1
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DatabendSchema.DatabendDataType.getRandomWithoutNull();
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(databendSchema_DatabendDataType0, 176095624);
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType1 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      databendSchema_DatabendCompositeDataType0.getSize();
      databendSchema_DatabendCompositeDataType0.getSize();
      databendSchema_DatabendCompositeDataType1.getSize();
      databendSchema_DatabendCompositeDataType1.toString();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "sqlancer.cockroachdb.CockroachDBProvider$CockroachDBGlobalState", "DECIMAL&&R[j7u>").when(resultSet0).getString(anyString());
      doReturn(true, true, true, false).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery(anyString());
      DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      Statement statement0 = sQLConnection0.prepareStatement("INT");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, (Statement) null).when(connection1).createStatement();
      SQLConnection sQLConnection1 = new SQLConnection(connection1);
      // Undeclared exception!
      try { 
        DatabendSchema.fromConnection(sQLConnection1, "LUhx4{(a3Zd12`>mS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DatabendSchema databendSchema0 = null;
      try {
        databendSchema0 = new DatabendSchema((List<DatabendSchema.DatabendTable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      String string0 = databendSchema_DatabendCompositeDataType0.toString();
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("INT16", string0);
      
      DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType1 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      //  // Unstable assertion: assertEquals(DatabendSchema.DatabendDataType.DATE, databendSchema_DatabendCompositeDataType1.getPrimitiveDataType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<DatabendSchema.DatabendColumn> linkedList0 = new LinkedList<DatabendSchema.DatabendColumn>();
      DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable((String) null, linkedList0, true);
      assertTrue(databendSchema_DatabendTable0.isView());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("INT", "CREATE_VIEW").when(resultSet0).getString(anyString());
      doReturn(true, true, false).when(resultSet0).next();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(resultSet1).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0, resultSet1, resultSet1).when(preparedStatement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      Statement statement0 = sQLConnection0.prepareStatement("INT");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, statement0, statement0).when(connection1).createStatement();
      SQLConnection sQLConnection1 = new SQLConnection(connection1);
      DatabendSchema databendSchema0 = DatabendSchema.fromConnection(sQLConnection1, "INT");
      List<DatabendSchema.DatabendTable> list0 = databendSchema0.getDatabaseTablesWithoutViews();
      DatabendSchema databendSchema1 = new DatabendSchema(list0);
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("INT16", "INT16").when(resultSet0).getString(anyString());
      doReturn(true, true, false).when(resultSet0).next();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(resultSet1).getString(anyString());
      doReturn(true).when(resultSet1).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0, resultSet1).when(preparedStatement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      Statement statement0 = sQLConnection0.prepareStatement("INT16");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, statement0, (Statement) null).when(connection1).createStatement();
      SQLConnection sQLConnection1 = new SQLConnection(connection1);
      // Undeclared exception!
      try { 
        DatabendSchema.fromConnection(sQLConnection1, "INT16");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("INT16", "CREATE_VIEW").when(resultSet0).getString(anyString());
      doReturn(true, true, false).when(resultSet0).next();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet1).getBoolean(anyString());
      doReturn("DECIMALNullableCREATE_VItW", "Nullable").when(resultSet1).getString(anyString());
      doReturn(true).when(resultSet1).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0, resultSet1).when(preparedStatement0).executeQuery(anyString());
      PreparedStatement preparedStatement1 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSet) null).when(preparedStatement1).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0, preparedStatement1).when(connection0).prepareStatement(anyString());
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      Statement statement0 = sQLConnection0.prepareStatement("INT16");
      Statement statement1 = sQLConnection0.prepareStatement("INT16");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, statement0, statement1).when(connection1).createStatement();
      SQLConnection sQLConnection1 = new SQLConnection(connection1);
      DatabendSchema databendSchema0 = DatabendSchema.fromConnection(sQLConnection1, "INT16");
      assertNotNull(databendSchema0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLConnection sQLConnection0 = new SQLConnection((Connection) null);
      // Undeclared exception!
      try { 
        DatabendSchema.fromConnection(sQLConnection0, "INT16");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.SQLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      // Undeclared exception!
      try { 
        DatabendSchema.fromConnection(sQLConnection0, "INT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.DatabendSchema", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.getRandomWithoutNull();
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(databendSchema_DatabendDataType0, 176095624);
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType1 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      databendSchema_DatabendCompositeDataType0.getSize();
      databendSchema_DatabendCompositeDataType0.getSize();
      databendSchema_DatabendCompositeDataType1.getSize();
      databendSchema_DatabendCompositeDataType1.toString();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).getString(anyString());
      doReturn(true, false).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      Statement statement0 = sQLConnection0.prepareStatement("INT");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, (Statement) null).when(connection1).createStatement();
      SQLConnection sQLConnection1 = new SQLConnection(connection1);
      // Undeclared exception!
      try { 
        DatabendSchema.fromConnection(sQLConnection1, "INT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSet) null).when(preparedStatement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      Statement statement0 = sQLConnection0.prepareStatement("INT");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection1).createStatement();
      SQLConnection sQLConnection1 = new SQLConnection(connection1);
      // Undeclared exception!
      try { 
        DatabendSchema.fromConnection(sQLConnection1, "INT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.DatabendSchema", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.getRandomWithoutNull();
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(databendSchema_DatabendDataType0, 176095624);
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType1 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      databendSchema_DatabendCompositeDataType0.getSize();
      databendSchema_DatabendCompositeDataType0.getSize();
      databendSchema_DatabendCompositeDataType1.getSize();
      databendSchema_DatabendCompositeDataType1.toString();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("INT", "CREATE_VIEW").when(resultSet0).getString(anyString());
      doReturn(true, true, false).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      Statement statement0 = sQLConnection0.prepareStatement("INT");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, (Statement) null).when(connection1).createStatement();
      SQLConnection sQLConnection1 = new SQLConnection(connection1);
      // Undeclared exception!
      try { 
        DatabendSchema.fromConnection(sQLConnection1, "INT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("INT16").when(resultSet0).getString(anyString());
      doReturn(true, false).when(resultSet0).next();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet1).getBoolean(anyString());
      doReturn("CREATE_VIEW", "CREATE_VIEW").when(resultSet1).getString(anyString());
      doReturn(true).when(resultSet1).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0, resultSet1).when(preparedStatement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      Statement statement0 = sQLConnection0.prepareStatement("INT16");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, statement0).when(connection1).createStatement();
      SQLConnection sQLConnection1 = new SQLConnection(connection1);
      // Undeclared exception!
      try { 
        DatabendSchema.fromConnection(sQLConnection1, "INT16");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // CREATE_VIEW
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DatabendSchema.DatabendDataType.getRandomWithoutNull();
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.BOOLEAN;
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(databendSchema_DatabendDataType0, 176095624);
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType1 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      databendSchema_DatabendCompositeDataType0.getSize();
      databendSchema_DatabendCompositeDataType0.getSize();
      databendSchema_DatabendCompositeDataType1.getSize();
      databendSchema_DatabendCompositeDataType1.toString();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("INT", "INT", "INT").when(resultSet0).getString(anyString());
      doReturn(true, true, true, false).when(resultSet0).next();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet1).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0, resultSet1).when(preparedStatement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      Statement statement0 = sQLConnection0.prepareStatement("INT");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, statement0, (Statement) null).when(connection1).createStatement();
      SQLConnection sQLConnection1 = new SQLConnection(connection1);
      // Undeclared exception!
      try { 
        DatabendSchema.fromConnection(sQLConnection1, "LUhx4{(a3Zd12`>mS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("INT", "CREATE_VIEW").when(resultSet0).getString(anyString());
      doReturn(true, true, false).when(resultSet0).next();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(resultSet1).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0, resultSet1, resultSet1).when(preparedStatement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      Statement statement0 = sQLConnection0.prepareStatement("INT");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, statement0, statement0).when(connection1).createStatement();
      SQLConnection sQLConnection1 = new SQLConnection(connection1);
      DatabendSchema databendSchema0 = DatabendSchema.fromConnection(sQLConnection1, "INT");
      DatabendSchema.DatabendTables databendSchema_DatabendTables0 = databendSchema0.getRandomTableNonEmptyTables();
      // Undeclared exception!
      try { 
        databendSchema_DatabendTables0.getRandomRowValue(sQLConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.DatabendSchema$DatabendTables", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      databendSchema_DatabendCompositeDataType0.toString();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("INT16", "CREATE_VIEW").when(resultSet0).getString(anyString());
      doReturn(true, true, false).when(resultSet0).next();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet1).next();
      ResultSet resultSet2 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0, resultSet1).when(preparedStatement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0, (PreparedStatement) null).when(connection0).prepareStatement(anyString());
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      Statement statement0 = sQLConnection0.prepareStatement("INT16");
      Statement statement1 = sQLConnection0.prepareStatement("INT16");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, statement0, statement1).when(connection1).createStatement();
      SQLConnection sQLConnection1 = new SQLConnection(connection1);
      // Undeclared exception!
      try { 
        DatabendSchema.fromConnection(sQLConnection1, "INT16");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.FLOAT;
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(databendSchema_DatabendDataType0, 0);
      // Undeclared exception!
      try { 
        databendSchema_DatabendCompositeDataType0.toString();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      String string0 = databendSchema_DatabendCompositeDataType0.toString();
      //  // Unstable assertion: assertEquals("FLOAT", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.getRandomWithoutNull();
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(databendSchema_DatabendDataType0, (-83));
      // Undeclared exception!
      try { 
        databendSchema_DatabendCompositeDataType0.toString();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // -83
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendDataType.getRandomWithoutNull();
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType1 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      databendSchema_DatabendCompositeDataType1.toString();
      String string0 = databendSchema_DatabendCompositeDataType0.toString();
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("INT16", string0);
      
      DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType2 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("INT16", databendSchema_DatabendCompositeDataType2, false, true);
      String string1 = databendSchema_DatabendColumn0.toString();
      //  // Unstable assertion: assertFalse(databendSchema_DatabendColumn0.isPrimaryKey());
      //  // Unstable assertion: assertEquals("INT16: INT64", string1);
      //  // Unstable assertion: assertTrue(databendSchema_DatabendColumn0.isNullable());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.getRandomWithoutNullAndVarchar();
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(databendSchema_DatabendDataType0, 5);
      // Undeclared exception!
      try { 
        databendSchema_DatabendCompositeDataType0.toString();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // 5
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.INT;
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(databendSchema_DatabendDataType0, 3);
      // Undeclared exception!
      try { 
        databendSchema_DatabendCompositeDataType0.toString();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // 3
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendDataType.getRandomWithoutNull();
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType1 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      databendSchema_DatabendCompositeDataType1.toString();
      String string0 = databendSchema_DatabendCompositeDataType0.toString();
      //  // Unstable assertion: assertEquals("SMALLINT", string0);
      //  // Unstable assertion: assertNotNull(string0);
      
      DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType2 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("SMALLINT", databendSchema_DatabendCompositeDataType2, false, true);
      String string1 = databendSchema_DatabendColumn0.toString();
      //  // Unstable assertion: assertEquals("SMALLINT: TINYINT", string1);
      //  // Unstable assertion: assertTrue(databendSchema_DatabendColumn0.isNullable());
      //  // Unstable assertion: assertFalse(databendSchema_DatabendColumn0.isPrimaryKey());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendDataType.getRandomWithoutNull();
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      //  // Unstable assertion: assertEquals(DatabendSchema.DatabendDataType.BOOLEAN, databendSchema_DatabendCompositeDataType0.getPrimitiveDataType());
      
      DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType1 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      String string0 = databendSchema_DatabendCompositeDataType1.toString();
      //  // Unstable assertion: assertEquals("DATE", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.NULL;
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(databendSchema_DatabendDataType0, (-1058));
      String string0 = databendSchema_DatabendCompositeDataType0.toString();
      assertEquals("NULL", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DatabendSchema.DatabendDataType.getRandomWithoutNull();
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      String string0 = databendSchema_DatabendCompositeDataType0.toString();
      //  // Unstable assertion: assertEquals("INT", string0);
      //  // Unstable assertion: assertNotNull(string0);
      
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.getRandomWithoutNullAndVarchar();
      //  // Unstable assertion: assertEquals(DatabendSchema.DatabendDataType.BOOLEAN, databendSchema_DatabendDataType0);
      
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType1 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      String string1 = databendSchema_DatabendCompositeDataType1.toString();
      //  // Unstable assertion: assertEquals("DOUBLE", string1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendDataType.getRandomWithoutNull();
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType1 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      String string0 = databendSchema_DatabendCompositeDataType1.toString();
      //  // Unstable assertion: assertEquals("BOOLEAN", string0);
      
      String string1 = databendSchema_DatabendCompositeDataType0.toString();
      //  // Unstable assertion: assertEquals("INT16", string1);
      //  // Unstable assertion: assertNotNull(string1);
      
      DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType2 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      String string2 = databendSchema_DatabendCompositeDataType2.toString();
      //  // Unstable assertion: assertEquals("TIMESTAMP", string2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DatabendSchema.DatabendDataType.getRandomWithoutNullAndVarchar();
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.getRandomWithoutNullAndVarchar();
      assertEquals(DatabendSchema.DatabendDataType.INT, databendSchema_DatabendDataType0);
      
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      String string0 = databendSchema_DatabendCompositeDataType0.toString();
      assertEquals("VARCHAR", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      assertEquals(DatabendSchema.DatabendDataType.INT, databendSchema_DatabendCompositeDataType0.getPrimitiveDataType());
      
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.getRandomWithoutNullAndVarchar();
      assertEquals(DatabendSchema.DatabendDataType.BOOLEAN, databendSchema_DatabendDataType0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendDataType.getRandomWithoutNull();
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType1 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      String string0 = databendSchema_DatabendCompositeDataType1.toString();
      //  // Unstable assertion: assertEquals("BOOLEAN", string0);
      
      String string1 = databendSchema_DatabendCompositeDataType0.toString();
      //  // Unstable assertion: assertEquals("INT16", string1);
      //  // Unstable assertion: assertNotNull(string1);
      
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.getRandomWithoutNullAndVarchar();
      //  // Unstable assertion: assertEquals(DatabendSchema.DatabendDataType.DATE, databendSchema_DatabendDataType0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn((String) null, databendSchema_DatabendCompositeDataType0, false, true);
      boolean boolean0 = databendSchema_DatabendColumn0.isPrimaryKey();
      assertFalse(boolean0);
      assertTrue(databendSchema_DatabendColumn0.isNullable());
      assertEquals(DatabendSchema.DatabendDataType.INT, databendSchema_DatabendCompositeDataType0.getPrimitiveDataType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("Y;G+*@*i", databendSchema_DatabendCompositeDataType0, true, true);
      boolean boolean0 = databendSchema_DatabendColumn0.isNullable();
      assertTrue(boolean0);
      assertEquals(DatabendSchema.DatabendDataType.INT, databendSchema_DatabendCompositeDataType0.getPrimitiveDataType());
      assertTrue(databendSchema_DatabendColumn0.isPrimaryKey());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<DatabendSchema.DatabendTable> linkedList0 = new LinkedList<DatabendSchema.DatabendTable>();
      DatabendSchema.DatabendTables databendSchema_DatabendTables0 = new DatabendSchema.DatabendTables(linkedList0);
      HashMap<DatabendSchema.DatabendColumn, DatabendConstant> hashMap0 = new HashMap<DatabendSchema.DatabendColumn, DatabendConstant>();
      DatabendSchema.DatabendRowValue databendSchema_DatabendRowValue0 = new DatabendSchema.DatabendRowValue(databendSchema_DatabendTables0, hashMap0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      databendSchema_DatabendCompositeDataType0.toString();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("INT16", "CREATE_VIEW").when(resultSet0).getString(anyString());
      doReturn(true, true, false).when(resultSet0).next();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet1).getBoolean(anyString());
      doReturn("DECIMALNullableCREATE_VItW", "Nullable").when(resultSet1).getString(anyString());
      doReturn(true).when(resultSet1).next();
      ResultSet resultSet2 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(resultSet2).getString(anyString());
      doReturn(true).when(resultSet2).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0, resultSet1, resultSet2, (ResultSet) null).when(preparedStatement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      Statement statement0 = sQLConnection0.prepareStatement("INT16");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, statement0, statement0, statement0).when(connection1).createStatement();
      SQLConnection sQLConnection1 = new SQLConnection(connection1);
      DatabendSchema databendSchema0 = DatabendSchema.fromConnection(sQLConnection1, "INT16");
      DatabendSchema.DatabendTables databendSchema_DatabendTables0 = databendSchema0.getRandomTableNonEmptyTables();
      // Undeclared exception!
      try { 
        databendSchema_DatabendTables0.getRandomRowValue(sQLConnection1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.DatabendSchema$DatabendTables", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("INT16", "CREATE_VIEW").when(resultSet0).getString(anyString());
      doReturn(true, true, false).when(resultSet0).next();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(resultSet1).getString(anyString());
      doReturn(true).when(resultSet1).next();
      ResultSet resultSet2 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0, resultSet1).when(preparedStatement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      SQLConnection sQLConnection0 = new SQLConnection(connection0);
      Statement statement0 = sQLConnection0.prepareStatement("INT16");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0, statement0, (Statement) null).when(connection1).createStatement();
      SQLConnection sQLConnection1 = new SQLConnection(connection1);
      // Undeclared exception!
      try { 
        DatabendSchema.fromConnection(sQLConnection1, "INT16");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
