/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 08:14:43 GMT 2025
 */

package sqlancer.databend;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.common.ast.BinaryOperatorNode;
import sqlancer.common.ast.newast.NewOrderingTerm;
import sqlancer.databend.DatabendExpectedValueVisitor;
import sqlancer.databend.DatabendSchema;
import sqlancer.databend.ast.DatabendAggregateOperation;
import sqlancer.databend.ast.DatabendAlias;
import sqlancer.databend.ast.DatabendBetweenOperation;
import sqlancer.databend.ast.DatabendBinaryComparisonOperation;
import sqlancer.databend.ast.DatabendBinaryLogicalOperation;
import sqlancer.databend.ast.DatabendBinaryOperation;
import sqlancer.databend.ast.DatabendCastOperation;
import sqlancer.databend.ast.DatabendColumnReference;
import sqlancer.databend.ast.DatabendConstant;
import sqlancer.databend.ast.DatabendExpression;
import sqlancer.databend.ast.DatabendFunctionOperation;
import sqlancer.databend.ast.DatabendInOperation;
import sqlancer.databend.ast.DatabendJoin;
import sqlancer.databend.ast.DatabendLikeOperation;
import sqlancer.databend.ast.DatabendOrderByTerm;
import sqlancer.databend.ast.DatabendPostFixText;
import sqlancer.databend.ast.DatabendSelect;
import sqlancer.databend.ast.DatabendTableReference;
import sqlancer.databend.ast.DatabendUnaryPostfixOperation;
import sqlancer.databend.ast.DatabendUnaryPrefixOperation;
import sqlancer.h2.H2ExpressionGenerator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatabendExpectedValueVisitor_ESTest extends DatabendExpectedValueVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(0L);
      DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0 = DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator.UNARY_MINUS;
      DatabendUnaryPrefixOperation databendUnaryPrefixOperation0 = new DatabendUnaryPrefixOperation(databendConstant_DatabendIntConstant0, databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0);
      databendExpectedValueVisitor0.visit(databendUnaryPrefixOperation0);
      assertEquals("-", databendUnaryPrefixOperation0.getOperatorRepresentation());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      LinkedList<DatabendExpression> linkedList0 = new LinkedList<DatabendExpression>();
      DatabendFunctionOperation<DatabendExpectedValueVisitor> databendFunctionOperation0 = new DatabendFunctionOperation<DatabendExpectedValueVisitor>(linkedList0, databendExpectedValueVisitor0);
      DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0 = DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator.IS_NULL;
      DatabendUnaryPostfixOperation databendUnaryPostfixOperation0 = new DatabendUnaryPostfixOperation(databendFunctionOperation0, databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0);
      databendExpectedValueVisitor0.visit(databendUnaryPostfixOperation0);
      assertEquals(DatabendSchema.DatabendDataType.BOOLEAN, databendUnaryPostfixOperation0.getExpectedType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      LinkedList<DatabendSchema.DatabendColumn> linkedList0 = new LinkedList<DatabendSchema.DatabendColumn>();
      DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable("", linkedList0, false);
      DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
      databendExpectedValueVisitor0.visit(databendTableReference0);
      assertEquals(" -- null\n", databendExpectedValueVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendSelect databendSelect0 = new DatabendSelect();
      DatabendConstant databendConstant0 = DatabendConstant.createFloatConstant(0.0);
      databendSelect0.setWhereClause(databendConstant0);
      databendExpectedValueVisitor0.visit(databendSelect0);
      assertFalse(databendSelect0.isDistinct());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(0L);
      NewOrderingTerm.Ordering newOrderingTerm_Ordering0 = NewOrderingTerm.Ordering.DESC;
      DatabendOrderByTerm databendOrderByTerm0 = new DatabendOrderByTerm(databendConstant_DatabendIntConstant0, newOrderingTerm_Ordering0);
      databendExpectedValueVisitor0.visit(databendOrderByTerm0);
      assertEquals(NewOrderingTerm.Ordering.DESC, databendOrderByTerm0.getOrdering());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant((-384L));
      LinkedList<DatabendSchema.DatabendColumn> linkedList0 = new LinkedList<DatabendSchema.DatabendColumn>();
      DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable("", linkedList0, true);
      DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
      DatabendJoin databendJoin0 = DatabendJoin.createInnerJoin(databendTableReference0, databendTableReference0, databendConstant_DatabendIntConstant0);
      databendExpectedValueVisitor0.visit(databendJoin0);
      assertNull(databendJoin0.getOuterType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendSelect databendSelect0 = new DatabendSelect();
      List<DatabendExpression> list0 = databendSelect0.getGroupByClause();
      DatabendFunctionOperation<DatabendExpectedValueVisitor> databendFunctionOperation0 = new DatabendFunctionOperation<DatabendExpectedValueVisitor>(list0, databendExpectedValueVisitor0);
      DatabendInOperation databendInOperation0 = new DatabendInOperation(databendFunctionOperation0, list0, true);
      databendExpectedValueVisitor0.visit(databendInOperation0);
      assertTrue(databendInOperation0.isNegated());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendSelect databendSelect0 = new DatabendSelect();
      List<DatabendExpression> list0 = databendSelect0.getGroupByExpressions();
      DatabendFunctionOperation<Object> databendFunctionOperation0 = new DatabendFunctionOperation<Object>(list0, list0);
      databendExpectedValueVisitor0.visit(databendFunctionOperation0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      databendExpectedValueVisitor0.visit((DatabendConstant) databendConstant_DatabendNullConstant0);
      assertTrue(databendConstant_DatabendNullConstant0.isNull());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.NULL;
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(databendSchema_DatabendDataType0, (-1));
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn((String) null, databendSchema_DatabendCompositeDataType0, false, true);
      DatabendColumnReference databendColumnReference0 = new DatabendColumnReference(databendSchema_DatabendColumn0);
      databendExpectedValueVisitor0.visit(databendColumnReference0);
      assertEquals("null -- null\n", databendExpectedValueVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(0L);
      DatabendBetweenOperation databendBetweenOperation0 = new DatabendBetweenOperation(databendConstant_DatabendIntConstant0, databendConstant_DatabendIntConstant0, databendConstant_DatabendIntConstant0, false);
      databendExpectedValueVisitor0.visit(databendBetweenOperation0);
      assertEquals(DatabendSchema.DatabendDataType.BOOLEAN, databendBetweenOperation0.getExpectedType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendSelect databendSelect0 = new DatabendSelect();
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      databendSelect0.setWhereClause(databendConstant_DatabendNullConstant0);
      databendExpectedValueVisitor0.visit((DatabendExpression) databendSelect0);
      assertFalse(databendSelect0.isDistinct());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(0L);
      NewOrderingTerm.Ordering newOrderingTerm_Ordering0 = NewOrderingTerm.Ordering.DESC;
      DatabendOrderByTerm databendOrderByTerm0 = new DatabendOrderByTerm(databendConstant_DatabendIntConstant0, newOrderingTerm_Ordering0);
      databendExpectedValueVisitor0.visit((DatabendExpression) databendOrderByTerm0);
      assertEquals(NewOrderingTerm.Ordering.DESC, databendOrderByTerm0.getOrdering());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(false);
      DatabendSelect databendSelect0 = new DatabendSelect();
      List<DatabendExpression> list0 = databendSelect0.getGroupByClause();
      DatabendInOperation databendInOperation0 = new DatabendInOperation(databendConstant_DatabendBooleanConstant0, list0, false);
      DatabendAlias databendAlias0 = new DatabendAlias(databendInOperation0, "");
      databendExpectedValueVisitor0.visit(databendAlias0);
      assertEquals("", databendAlias0.getAlias());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      H2ExpressionGenerator.H2UnaryPostfixOperator h2ExpressionGenerator_H2UnaryPostfixOperator0 = H2ExpressionGenerator.H2UnaryPostfixOperator.IS_NOT_FALSE;
      DatabendBinaryOperation databendBinaryOperation0 = new DatabendBinaryOperation(databendConstant_DatabendNullConstant0, databendConstant_DatabendNullConstant0, h2ExpressionGenerator_H2UnaryPostfixOperator0);
      DatabendAlias databendAlias0 = new DatabendAlias(databendBinaryOperation0, "sqlancer.materialize.MaterializeGlobalState");
      databendExpectedValueVisitor0.visit(databendAlias0);
      assertEquals("sqlancer.materialize.MaterializeGlobalState", databendAlias0.getAlias());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendConstant.DatabendTimestampConstant databendConstant_DatabendTimestampConstant0 = new DatabendConstant.DatabendTimestampConstant((-1102L));
      DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0 = DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator.UNARY_MINUS;
      DatabendUnaryPrefixOperation databendUnaryPrefixOperation0 = new DatabendUnaryPrefixOperation(databendConstant_DatabendTimestampConstant0, databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0);
      DatabendAlias databendAlias0 = new DatabendAlias(databendUnaryPrefixOperation0, "1969-12-31 23:59:58");
      databendExpectedValueVisitor0.visit(databendAlias0);
      assertEquals("1969-12-31 23:59:58", databendAlias0.getAlias());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      H2ExpressionGenerator.H2UnaryPostfixOperator h2ExpressionGenerator_H2UnaryPostfixOperator0 = H2ExpressionGenerator.H2UnaryPostfixOperator.IS_NOT_FALSE;
      DatabendBinaryOperation databendBinaryOperation0 = new DatabendBinaryOperation(databendConstant_DatabendNullConstant0, databendConstant_DatabendNullConstant0, h2ExpressionGenerator_H2UnaryPostfixOperator0);
      databendExpectedValueVisitor0.visit(databendBinaryOperation0);
      assertEquals("IS NOT FALSE", databendBinaryOperation0.getOperatorRepresentation());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(0L);
      DatabendPostFixText databendPostFixText0 = new DatabendPostFixText(databendConstant_DatabendIntConstant0, "");
      databendExpectedValueVisitor0.visit(databendPostFixText0);
      String string0 = databendExpectedValueVisitor0.get();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendSelect databendSelect0 = new DatabendSelect();
      DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0 = DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator.UNARY_PLUS;
      DatabendUnaryPrefixOperation databendUnaryPrefixOperation0 = new DatabendUnaryPrefixOperation(databendSelect0, databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0);
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit(databendUnaryPrefixOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendCastOperation databendCastOperation0 = new DatabendCastOperation(databendConstant_DatabendNullConstant0, databendSchema_DatabendCompositeDataType0);
      DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0 = DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator.NOT;
      DatabendUnaryPrefixOperation databendUnaryPrefixOperation0 = new DatabendUnaryPrefixOperation(databendCastOperation0, databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0);
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit(databendUnaryPrefixOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // sqlancer.databend.ast.DatabendCastOperation@5
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0 = DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator.IS_NULL;
      DatabendUnaryPostfixOperation databendUnaryPostfixOperation0 = new DatabendUnaryPostfixOperation((DatabendExpression) null, databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0);
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit(databendUnaryPostfixOperation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.DatabendToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendConstant databendConstant0 = DatabendConstant.createDateConstant(0L);
      DatabendLikeOperation.DatabendLikeOperator databendLikeOperation_DatabendLikeOperator0 = DatabendLikeOperation.DatabendLikeOperator.LIKE_OPERATOR;
      DatabendLikeOperation databendLikeOperation0 = new DatabendLikeOperation(databendConstant0, databendConstant0, databendLikeOperation_DatabendLikeOperator0);
      DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0 = DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator.IS_NULL;
      DatabendUnaryPostfixOperation databendUnaryPostfixOperation0 = new DatabendUnaryPostfixOperation(databendLikeOperation0, databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0);
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit(databendUnaryPostfixOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // sqlancer.databend.ast.DatabendLikeOperation@3
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendSelect databendSelect0 = new DatabendSelect();
      DatabendPostFixText databendPostFixText0 = new DatabendPostFixText(databendSelect0, (String) null);
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit(databendPostFixText0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(false);
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendCastOperation databendCastOperation0 = new DatabendCastOperation(databendConstant_DatabendBooleanConstant0, databendSchema_DatabendCompositeDataType0);
      DatabendPostFixText databendPostFixText0 = new DatabendPostFixText(databendCastOperation0, "fmAn%X*m0*I J7.");
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit(databendPostFixText0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // sqlancer.databend.ast.DatabendCastOperation@5
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendSelect databendSelect0 = new DatabendSelect();
      NewOrderingTerm.Ordering newOrderingTerm_Ordering0 = NewOrderingTerm.Ordering.DESC;
      DatabendOrderByTerm databendOrderByTerm0 = new DatabendOrderByTerm(databendSelect0, newOrderingTerm_Ordering0);
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit(databendOrderByTerm0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(0L);
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.EQUALS;
      DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(databendConstant_DatabendIntConstant0, databendConstant_DatabendIntConstant0, databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
      NewOrderingTerm.Ordering newOrderingTerm_Ordering0 = NewOrderingTerm.Ordering.ASC;
      DatabendOrderByTerm databendOrderByTerm0 = new DatabendOrderByTerm(databendBinaryComparisonOperation0, newOrderingTerm_Ordering0);
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit(databendOrderByTerm0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // sqlancer.databend.ast.DatabendBinaryComparisonOperation@3
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit((DatabendJoin) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.DatabendExpectedValueVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendSelect databendSelect0 = new DatabendSelect();
      H2ExpressionGenerator.H2UnaryPrefixOperator h2ExpressionGenerator_H2UnaryPrefixOperator0 = H2ExpressionGenerator.H2UnaryPrefixOperator.NOT;
      DatabendBinaryOperation databendBinaryOperation0 = new DatabendBinaryOperation(databendSelect0, databendSelect0, h2ExpressionGenerator_H2UnaryPrefixOperator0);
      List<DatabendExpression> list0 = databendSelect0.getJoinList();
      DatabendInOperation databendInOperation0 = new DatabendInOperation(databendBinaryOperation0, list0, false);
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit(databendInOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendConstant databendConstant0 = DatabendConstant.createTimestampConstant(0L);
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.LESS_EQUALS;
      DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(databendConstant0, databendConstant0, databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
      DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0 = DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator.NOT;
      DatabendUnaryPrefixOperation databendUnaryPrefixOperation0 = new DatabendUnaryPrefixOperation(databendBinaryComparisonOperation0, databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0);
      List<DatabendExpression> list0 = List.of((DatabendExpression) databendBinaryComparisonOperation0, (DatabendExpression) databendBinaryComparisonOperation0, (DatabendExpression) databendConstant0, (DatabendExpression) databendBinaryComparisonOperation0, (DatabendExpression) databendUnaryPrefixOperation0, (DatabendExpression) databendConstant0);
      DatabendInOperation databendInOperation0 = new DatabendInOperation(databendBinaryComparisonOperation0, list0, true);
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit(databendInOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // sqlancer.databend.ast.DatabendBinaryComparisonOperation@3
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      LinkedList<DatabendExpression> linkedList0 = new LinkedList<DatabendExpression>();
      DatabendAggregateOperation.DatabendAggregateFunction databendAggregateOperation_DatabendAggregateFunction0 = DatabendAggregateOperation.DatabendAggregateFunction.MIN;
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("UQ", databendSchema_DatabendCompositeDataType0, false, false);
      DatabendColumnReference databendColumnReference0 = new DatabendColumnReference(databendSchema_DatabendColumn0);
      DatabendInOperation databendInOperation0 = new DatabendInOperation(databendColumnReference0, linkedList0, true);
      linkedList0.add((DatabendExpression) databendInOperation0);
      DatabendAggregateOperation databendAggregateOperation0 = new DatabendAggregateOperation(linkedList0, databendAggregateOperation_DatabendAggregateFunction0);
      // Undeclared exception!
      databendExpectedValueVisitor0.visit((DatabendExpression) databendAggregateOperation0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DatabendSelect databendSelect0 = new DatabendSelect();
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.AND;
      DatabendBinaryOperation databendBinaryOperation0 = new DatabendBinaryOperation(databendSelect0, databendSelect0, databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit(databendBinaryOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendConstant.DatabendStringConstant databendConstant_DatabendStringConstant0 = new DatabendConstant.DatabendStringConstant("sCv");
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendCastOperation databendCastOperation0 = new DatabendCastOperation(databendConstant_DatabendStringConstant0, databendSchema_DatabendCompositeDataType0);
      H2ExpressionGenerator.H2UnaryPostfixOperator h2ExpressionGenerator_H2UnaryPostfixOperator0 = H2ExpressionGenerator.H2UnaryPostfixOperator.IS_NOT_TRUE;
      DatabendBinaryOperation databendBinaryOperation0 = new DatabendBinaryOperation(databendCastOperation0, databendConstant_DatabendStringConstant0, h2ExpressionGenerator_H2UnaryPostfixOperator0);
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit(databendBinaryOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // sqlancer.databend.ast.DatabendCastOperation@5
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit((DatabendBetweenOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.DatabendToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendSelect databendSelect0 = new DatabendSelect();
      DatabendBetweenOperation databendBetweenOperation0 = new DatabendBetweenOperation(databendSelect0, databendSelect0, databendSelect0, false);
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit(databendBetweenOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendSelect databendSelect0 = new DatabendSelect();
      DatabendAlias databendAlias0 = new DatabendAlias(databendSelect0, "5OK9cE:eMla|W L");
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit(databendAlias0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendConstant.DatabendFloatConstant databendConstant_DatabendFloatConstant0 = new DatabendConstant.DatabendFloatConstant((-2023.66));
      DatabendConstant databendConstant0 = DatabendConstant.createTimestampConstant(2427L);
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.IS_NOT_DISTINCT;
      DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(databendConstant_DatabendFloatConstant0, databendConstant0, databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
      DatabendAlias databendAlias0 = new DatabendAlias(databendBinaryComparisonOperation0, (String) null);
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit(databendAlias0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // sqlancer.databend.ast.DatabendBinaryComparisonOperation@4
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit((List<DatabendExpression>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.DatabendExpectedValueVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DatabendSelect databendSelect0 = new DatabendSelect();
      DatabendLikeOperation.DatabendLikeOperator databendLikeOperation_DatabendLikeOperator0 = DatabendLikeOperation.DatabendLikeOperator.LIKE_OPERATOR;
      DatabendLikeOperation databendLikeOperation0 = new DatabendLikeOperation(databendSelect0, databendSelect0, databendLikeOperation_DatabendLikeOperator0);
      databendSelect0.setWhereClause(databendLikeOperation0);
      // Undeclared exception!
      try { 
        DatabendExpectedValueVisitor.asExpectedValues(databendSelect0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendConstant databendConstant0 = DatabendConstant.createFloatConstant((-2400.58));
      DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0 = DatabendBinaryLogicalOperation.DatabendBinaryLogicalOperator.AND;
      DatabendBinaryLogicalOperation databendBinaryLogicalOperation0 = new DatabendBinaryLogicalOperation((DatabendExpression) null, databendConstant0, databendBinaryLogicalOperation_DatabendBinaryLogicalOperator0);
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit((DatabendExpression) databendBinaryLogicalOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // sqlancer.databend.ast.DatabendBinaryLogicalOperation@3
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(false);
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.FLOAT;
      DatabendConstant databendConstant0 = databendConstant_DatabendBooleanConstant0.cast(databendSchema_DatabendDataType0);
      DatabendJoin databendJoin0 = DatabendJoin.createLeftOuterJoin((DatabendTableReference) null, (DatabendTableReference) null, databendConstant0);
      databendExpectedValueVisitor0.visit((DatabendExpression) databendJoin0);
      assertEquals(DatabendJoin.JoinType.LEFT, databendJoin0.getJoinType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      databendExpectedValueVisitor0.visit((DatabendExpression) databendConstant_DatabendNullConstant0);
      assertFalse(databendConstant_DatabendNullConstant0.isFloat());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      LinkedList<DatabendSchema.DatabendColumn> linkedList0 = new LinkedList<DatabendSchema.DatabendColumn>();
      DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable("", linkedList0, false);
      DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
      DatabendJoin.JoinType databendJoin_JoinType0 = DatabendJoin.JoinType.RIGHT;
      DatabendJoin databendJoin0 = new DatabendJoin(databendTableReference0, databendTableReference0, databendJoin_JoinType0, databendTableReference0);
      DatabendPostFixText databendPostFixText0 = new DatabendPostFixText(databendJoin0, "");
      databendExpectedValueVisitor0.visit((DatabendExpression) databendPostFixText0);
      assertEquals(" RIGHT  JOIN  ON  -- null\n -- null\n", databendExpectedValueVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant(0L);
      DatabendPostFixText databendPostFixText0 = new DatabendPostFixText(databendConstant_DatabendIntConstant0, "bn#UiQKpON");
      DatabendAlias databendAlias0 = new DatabendAlias(databendPostFixText0, " \"~ZV'YJ");
      databendExpectedValueVisitor0.visit((DatabendExpression) databendAlias0);
      assertEquals(" \"~ZV'YJ", databendAlias0.getAlias());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendSelect databendSelect0 = new DatabendSelect();
      NewOrderingTerm.Ordering newOrderingTerm_Ordering0 = NewOrderingTerm.Ordering.DESC;
      DatabendOrderByTerm databendOrderByTerm0 = new DatabendOrderByTerm(databendSelect0, newOrderingTerm_Ordering0);
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit((DatabendExpression) databendOrderByTerm0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(false);
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.VARCHAR;
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(databendSchema_DatabendDataType0, 0);
      DatabendCastOperation databendCastOperation0 = new DatabendCastOperation(databendConstant_DatabendBooleanConstant0, databendSchema_DatabendCompositeDataType0);
      H2ExpressionGenerator.H2BinaryLogicalOperator h2ExpressionGenerator_H2BinaryLogicalOperator0 = H2ExpressionGenerator.H2BinaryLogicalOperator.OR;
      DatabendBinaryOperation databendBinaryOperation0 = new DatabendBinaryOperation(databendCastOperation0, databendConstant_DatabendBooleanConstant0, h2ExpressionGenerator_H2BinaryLogicalOperator0);
      DatabendSelect databendSelect0 = new DatabendSelect();
      List<DatabendExpression> list0 = databendSelect0.getJoinList();
      DatabendInOperation databendInOperation0 = new DatabendInOperation(databendBinaryOperation0, list0, false);
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit((DatabendExpression) databendInOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // sqlancer.databend.ast.DatabendCastOperation@5
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendConstant.DatabendIntConstant databendConstant_DatabendIntConstant0 = new DatabendConstant.DatabendIntConstant((-1L));
      DatabendBetweenOperation databendBetweenOperation0 = new DatabendBetweenOperation(databendConstant_DatabendIntConstant0, databendConstant_DatabendIntConstant0, databendConstant_DatabendIntConstant0, true);
      databendExpectedValueVisitor0.visit((DatabendExpression) databendBetweenOperation0);
      assertTrue(databendBetweenOperation0.isTrue());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = DatabendSchema.DatabendCompositeDataType.getRandomWithoutNull();
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("&zAaAdN(#sJwrrp", databendSchema_DatabendCompositeDataType0, true, true);
      List<DatabendSchema.DatabendColumn> list0 = List.of(databendSchema_DatabendColumn0, databendSchema_DatabendColumn0);
      DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable("&zAaAdN(#sJwrrp", list0, true);
      DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
      databendExpectedValueVisitor0.visit((DatabendExpression) databendTableReference0);
      assertEquals("&zAaAdN(#sJwrrp -- null\n", databendExpectedValueVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendSelect databendSelect0 = new DatabendSelect();
      H2ExpressionGenerator.H2BinaryComparisonOperator h2ExpressionGenerator_H2BinaryComparisonOperator0 = H2ExpressionGenerator.H2BinaryComparisonOperator.IS_DISTINCT_FROM;
      DatabendBinaryOperation databendBinaryOperation0 = new DatabendBinaryOperation(databendSelect0, databendSelect0, h2ExpressionGenerator_H2BinaryComparisonOperator0);
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit((DatabendExpression) databendBinaryOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendSelect databendSelect0 = new DatabendSelect();
      DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0 = DatabendUnaryPrefixOperation.DatabendUnaryPrefixOperator.NOT;
      DatabendUnaryPrefixOperation databendUnaryPrefixOperation0 = new DatabendUnaryPrefixOperation(databendSelect0, databendUnaryPrefixOperation_DatabendUnaryPrefixOperator0);
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit((DatabendExpression) databendUnaryPrefixOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      LinkedList<DatabendExpression> linkedList0 = new LinkedList<DatabendExpression>();
      DatabendFunctionOperation<DatabendExpectedValueVisitor> databendFunctionOperation0 = new DatabendFunctionOperation<DatabendExpectedValueVisitor>(linkedList0, databendExpectedValueVisitor0);
      DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0 = DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator.IS_NULL;
      DatabendUnaryPostfixOperation databendUnaryPostfixOperation0 = new DatabendUnaryPostfixOperation(databendFunctionOperation0, databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0);
      databendExpectedValueVisitor0.visit((DatabendExpression) databendUnaryPostfixOperation0);
      assertEquals(DatabendSchema.DatabendDataType.BOOLEAN, databendUnaryPostfixOperation0.getExpectedType());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendSchema.DatabendDataType databendSchema_DatabendDataType0 = DatabendSchema.DatabendDataType.FLOAT;
      DatabendSchema.DatabendCompositeDataType databendSchema_DatabendCompositeDataType0 = new DatabendSchema.DatabendCompositeDataType(databendSchema_DatabendDataType0, (-1));
      DatabendSchema.DatabendColumn databendSchema_DatabendColumn0 = new DatabendSchema.DatabendColumn("jhF", databendSchema_DatabendCompositeDataType0, false, false);
      DatabendColumnReference databendColumnReference0 = new DatabendColumnReference(databendSchema_DatabendColumn0);
      databendExpectedValueVisitor0.visit((DatabendExpression) databendColumnReference0);
      assertEquals("jhF -- null\n", databendExpectedValueVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit((DatabendExpression) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendSelect databendSelect0 = new DatabendSelect();
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit((DatabendExpression) databendSelect0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.DatabendToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      String string0 = databendExpectedValueVisitor0.get();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit((DatabendUnaryPrefixOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.DatabendToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit((DatabendConstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.DatabendToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendPostFixText databendPostFixText0 = new DatabendPostFixText((DatabendExpression) null, " -- ");
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit(databendPostFixText0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.DatabendToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit((DatabendTableReference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.DatabendToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendSelect databendSelect0 = new DatabendSelect();
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit(databendSelect0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.DatabendToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit((DatabendBinaryOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.DatabendToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendSelect databendSelect0 = new DatabendSelect();
      DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0 = DatabendUnaryPostfixOperation.DatabendUnaryPostfixOperator.IS_NOT_NULL;
      DatabendUnaryPostfixOperation databendUnaryPostfixOperation0 = new DatabendUnaryPostfixOperation(databendSelect0, databendUnaryPostfixOperation_DatabendUnaryPostfixOperator0);
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit(databendUnaryPostfixOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit((DatabendColumnReference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.DatabendToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit((DatabendAlias) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.DatabendToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit((DatabendOrderByTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.DatabendToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit((DatabendInOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.DatabendToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit((DatabendFunctionOperation<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.DatabendToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendSelect databendSelect0 = new DatabendSelect();
      List<DatabendSchema.DatabendColumn> list0 = List.of();
      DatabendSchema.DatabendTable databendSchema_DatabendTable0 = new DatabendSchema.DatabendTable((String) null, list0, false);
      DatabendTableReference databendTableReference0 = new DatabendTableReference(databendSchema_DatabendTable0);
      DatabendJoin databendJoin0 = DatabendJoin.createLeftOuterJoin(databendTableReference0, databendTableReference0, databendSelect0);
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit(databendJoin0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(true);
      DatabendConstant databendConstant0 = DatabendConstant.createNullConstant();
      List<DatabendExpression> list0 = List.of((DatabendExpression) databendConstant0, (DatabendExpression) databendConstant0, (DatabendExpression) databendConstant_DatabendBooleanConstant0, (DatabendExpression) databendConstant_DatabendBooleanConstant0, (DatabendExpression) databendConstant_DatabendBooleanConstant0, (DatabendExpression) databendConstant_DatabendBooleanConstant0, (DatabendExpression) databendConstant_DatabendBooleanConstant0, (DatabendExpression) databendConstant0, (DatabendExpression) databendConstant_DatabendBooleanConstant0);
      databendExpectedValueVisitor0.visit(list0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DatabendExpectedValueVisitor databendExpectedValueVisitor0 = new DatabendExpectedValueVisitor();
      DatabendConstant.DatabendBooleanConstant databendConstant_DatabendBooleanConstant0 = new DatabendConstant.DatabendBooleanConstant(true);
      DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0 = DatabendBinaryComparisonOperation.DatabendBinaryComparisonOperator.GREATER;
      DatabendBinaryComparisonOperation databendBinaryComparisonOperation0 = new DatabendBinaryComparisonOperation(databendConstant_DatabendBooleanConstant0, databendConstant_DatabendBooleanConstant0, databendBinaryComparisonOperation_DatabendBinaryComparisonOperator0);
      DatabendBetweenOperation databendBetweenOperation0 = new DatabendBetweenOperation(databendBinaryComparisonOperation0, databendConstant_DatabendBooleanConstant0, databendConstant_DatabendBooleanConstant0, true);
      // Undeclared exception!
      try { 
        databendExpectedValueVisitor0.visit(databendBetweenOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // sqlancer.databend.ast.DatabendBinaryComparisonOperation@3
         //
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatabendExpectedValueVisitor.asExpectedValues((DatabendExpression) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DatabendBinaryOperation databendBinaryOperation0 = new DatabendBinaryOperation((DatabendExpression) null, (DatabendExpression) null, (BinaryOperatorNode.Operator) null);
      // Undeclared exception!
      try { 
        DatabendExpectedValueVisitor.asExpectedValues(databendBinaryOperation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.DatabendToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DatabendConstant.DatabendNullConstant databendConstant_DatabendNullConstant0 = new DatabendConstant.DatabendNullConstant();
      String string0 = DatabendExpectedValueVisitor.asExpectedValues(databendConstant_DatabendNullConstant0);
      assertNotNull(string0);
  }
}
