/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 08:31:06 GMT 2025
 */

package sqlancer.databend;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.databend.DatabendOptions;
import sqlancer.databend.DatabendOracleFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatabendOptions_ESTest extends DatabendOptions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DatabendOptions databendOptions0 = new DatabendOptions();
      databendOptions0.oracles = null;
      databendOptions0.getTestOracleFactory();
      assertTrue(databendOptions0.testStringConstants);
      assertEquals(1, databendOptions0.maxNumViews);
      assertTrue(databendOptions0.testBinaryLogicals);
      assertTrue(databendOptions0.testFloatConstants);
      assertTrue(databendOptions0.testNotNullConstraints);
      assertTrue(databendOptions0.testDefaultValues);
      assertTrue(databendOptions0.testBooleanConstants);
      assertTrue(databendOptions0.testCase);
      assertTrue(databendOptions0.testTimestampConstants);
      assertEquals(5, databendOptions0.maxNumUpdates);
      assertTrue(databendOptions0.testBetween);
      assertTrue(databendOptions0.testCheckConstraints);
      assertTrue(databendOptions0.testIntConstants);
      assertTrue(databendOptions0.testBinaryComparisons);
      assertTrue(databendOptions0.testFunctions);
      assertTrue(databendOptions0.testDateConstants);
      assertTrue(databendOptions0.testCasts);
      assertEquals(1, databendOptions0.maxNumDeletes);
      assertTrue(databendOptions0.testIn);
      assertTrue(databendOptions0.testIndexes);
      assertTrue(databendOptions0.testRowid);
      assertTrue(databendOptions0.testCollate);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DatabendOptions databendOptions0 = new DatabendOptions();
      LinkedList<DatabendOracleFactory> linkedList0 = new LinkedList<DatabendOracleFactory>();
      databendOptions0.oracles = (List<DatabendOracleFactory>) linkedList0;
      databendOptions0.getTestOracleFactory();
      assertTrue(databendOptions0.testCollate);
      assertEquals(1, databendOptions0.maxNumViews);
      assertTrue(databendOptions0.testFloatConstants);
      assertTrue(databendOptions0.testBinaryLogicals);
      assertTrue(databendOptions0.testIn);
      assertEquals(1, databendOptions0.maxNumDeletes);
      assertTrue(databendOptions0.testBinaryComparisons);
      assertTrue(databendOptions0.testNotNullConstraints);
      assertTrue(databendOptions0.testCase);
      assertTrue(databendOptions0.testDefaultValues);
      assertTrue(databendOptions0.testBetween);
      assertTrue(databendOptions0.testStringConstants);
      assertTrue(databendOptions0.testBooleanConstants);
      assertTrue(databendOptions0.testCasts);
      assertTrue(databendOptions0.testIntConstants);
      assertEquals(5, databendOptions0.maxNumUpdates);
      assertTrue(databendOptions0.testTimestampConstants);
      assertTrue(databendOptions0.testFunctions);
      assertTrue(databendOptions0.testIndexes);
      assertTrue(databendOptions0.testCheckConstraints);
      assertTrue(databendOptions0.testDateConstants);
      assertTrue(databendOptions0.testRowid);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DatabendOptions databendOptions0 = new DatabendOptions();
      LinkedList<DatabendOracleFactory> linkedList0 = new LinkedList<DatabendOracleFactory>();
      databendOptions0.oracles = (List<DatabendOracleFactory>) linkedList0;
      DatabendOracleFactory databendOracleFactory0 = DatabendOracleFactory.PQS;
      linkedList0.add(databendOracleFactory0);
      databendOptions0.getTestOracleFactory();
      assertTrue(databendOptions0.testRowid);
      assertTrue(databendOptions0.testIndexes);
      assertTrue(databendOptions0.testBooleanConstants);
      assertTrue(databendOptions0.testStringConstants);
      assertEquals(5, databendOptions0.maxNumUpdates);
      assertEquals(1, databendOptions0.maxNumViews);
      assertTrue(databendOptions0.testCheckConstraints);
      assertTrue(databendOptions0.testBinaryLogicals);
      assertTrue(databendOptions0.testCasts);
      assertTrue(databendOptions0.testIntConstants);
      assertTrue(databendOptions0.testDateConstants);
      assertTrue(databendOptions0.testBinaryComparisons);
      assertTrue(databendOptions0.testDefaultValues);
      assertTrue(databendOptions0.testCase);
      assertTrue(databendOptions0.testCollate);
      assertTrue(databendOptions0.testBetween);
      assertTrue(databendOptions0.testFunctions);
      assertEquals(1, databendOptions0.maxNumDeletes);
      assertTrue(databendOptions0.testIn);
      assertTrue(databendOptions0.testNotNullConstraints);
      assertTrue(databendOptions0.testFloatConstants);
      assertTrue(databendOptions0.testTimestampConstants);
  }
}
