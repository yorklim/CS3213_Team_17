/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 08:44:44 GMT 2025
 */

package sqlancer.databend;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.common.oracle.TestOracle;
import sqlancer.databend.DatabendOracleFactory;
import sqlancer.databend.DatabendProvider;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatabendOracleFactory_ESTest extends DatabendOracleFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DatabendProvider.DatabendGlobalState databendProvider_DatabendGlobalState0 = new DatabendProvider.DatabendGlobalState();
      DatabendOracleFactory databendOracleFactory0 = DatabendOracleFactory.HAVING;
      TestOracle<DatabendProvider.DatabendGlobalState> testOracle0 = databendOracleFactory0.create(databendProvider_DatabendGlobalState0);
      assertNotNull(testOracle0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DatabendProvider.DatabendGlobalState databendProvider_DatabendGlobalState0 = new DatabendProvider.DatabendGlobalState();
      DatabendOracleFactory databendOracleFactory0 = DatabendOracleFactory.NOREC;
      try { 
        databendOracleFactory0.create(databendProvider_DatabendGlobalState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.gen.DatabendNewExpressionGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DatabendProvider.DatabendGlobalState databendProvider_DatabendGlobalState0 = new DatabendProvider.DatabendGlobalState();
      DatabendOracleFactory databendOracleFactory0 = DatabendOracleFactory.GROUP_BY;
      TestOracle<DatabendProvider.DatabendGlobalState> testOracle0 = databendOracleFactory0.create(databendProvider_DatabendGlobalState0);
      assertNotNull(testOracle0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DatabendProvider.DatabendGlobalState databendProvider_DatabendGlobalState0 = new DatabendProvider.DatabendGlobalState();
      DatabendOracleFactory databendOracleFactory0 = DatabendOracleFactory.DISTINCT;
      TestOracle<DatabendProvider.DatabendGlobalState> testOracle0 = databendOracleFactory0.create(databendProvider_DatabendGlobalState0);
      assertNotNull(testOracle0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DatabendProvider.DatabendGlobalState databendProvider_DatabendGlobalState0 = new DatabendProvider.DatabendGlobalState();
      DatabendOracleFactory databendOracleFactory0 = DatabendOracleFactory.AGGREGATE;
      TestOracle<DatabendProvider.DatabendGlobalState> testOracle0 = databendOracleFactory0.create(databendProvider_DatabendGlobalState0);
      assertNotNull(testOracle0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DatabendProvider.DatabendGlobalState databendProvider_DatabendGlobalState0 = new DatabendProvider.DatabendGlobalState();
      DatabendOracleFactory databendOracleFactory0 = DatabendOracleFactory.PQS;
      TestOracle<DatabendProvider.DatabendGlobalState> testOracle0 = databendOracleFactory0.create(databendProvider_DatabendGlobalState0);
      assertNotNull(testOracle0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DatabendProvider.DatabendGlobalState databendProvider_DatabendGlobalState0 = new DatabendProvider.DatabendGlobalState();
      DatabendOracleFactory databendOracleFactory0 = DatabendOracleFactory.QUERY_PARTITIONING;
      try { 
        databendOracleFactory0.create(databendProvider_DatabendGlobalState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.databend.gen.DatabendNewExpressionGenerator", e);
      }
  }
}
