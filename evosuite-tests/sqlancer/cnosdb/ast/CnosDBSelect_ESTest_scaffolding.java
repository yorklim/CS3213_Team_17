/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sun Apr 13 14:26:26 GMT 2025
 */

package sqlancer.cnosdb.ast;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class CnosDBSelect_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "sqlancer.cnosdb.ast.CnosDBSelect"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "E:\\Y2S2\\CS3213\\Sqlancer_original"); 
    java.lang.System.setProperty("java.io.tmpdir", "C:\\Users\\hp\\AppData\\Local\\Temp\\"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(CnosDBSelect_ESTest_scaffolding.class.getClassLoader() ,
      "sqlancer.MainOptions",
      "sqlancer.cnosdb.ast.CnosDBConstant",
      "sqlancer.Randomly",
      "sqlancer.cnosdb.CnosDBSchema$CnosDBRowValue",
      "sqlancer.cnosdb.ast.CnosDBExpression",
      "sqlancer.cnosdb.ast.CnosDBSelect$CnosDBSubquery",
      "sqlancer.cnosdb.ast.CnosDBSelect$SelectType",
      "sqlancer.common.schema.AbstractTableColumn",
      "sqlancer.cnosdb.ast.CnosDBJoin",
      "sqlancer.Randomly$StringGenerationStrategy",
      "sqlancer.cnosdb.CnosDBSchema$CnosDBTable",
      "sqlancer.cnosdb.CnosDBSchema$CnosDBColumn",
      "sqlancer.cnosdb.CnosDBSchema",
      "sqlancer.Randomly$StringGenerationStrategy$4",
      "sqlancer.common.schema.AbstractTable",
      "sqlancer.Randomly$StringGenerationStrategy$3",
      "sqlancer.Randomly$StringGenerationStrategy$2",
      "sqlancer.Randomly$StringGenerationStrategy$1",
      "sqlancer.GlobalState",
      "sqlancer.cnosdb.ast.CnosDBSelect",
      "sqlancer.common.schema.AbstractSchema",
      "sqlancer.IgnoreMeException",
      "sqlancer.common.ast.SelectBase",
      "sqlancer.cnosdb.ast.CnosDBInOperation",
      "sqlancer.cnosdb.CnosDBGlobalState",
      "sqlancer.common.schema.AbstractRowValue",
      "sqlancer.common.schema.TableIndex",
      "sqlancer.cnosdb.CnosDBSchema$CnosDBDataType",
      "sqlancer.cnosdb.ast.CnosDBSelect$CnosDBFromTable",
      "sqlancer.cnosdb.CnosDBSchema$CnosDBFieldColumn"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(CnosDBSelect_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "sqlancer.common.ast.SelectBase",
      "sqlancer.cnosdb.ast.CnosDBSelect",
      "sqlancer.cnosdb.ast.CnosDBSelect$SelectType",
      "sqlancer.cnosdb.ast.CnosDBSelect$CnosDBSubquery",
      "sqlancer.cnosdb.ast.CnosDBJoin",
      "sqlancer.cnosdb.ast.CnosDBAlias",
      "sqlancer.Randomly$StringGenerationStrategy$4",
      "sqlancer.Randomly$StringGenerationStrategy",
      "sqlancer.Randomly",
      "sqlancer.GlobalState",
      "sqlancer.cnosdb.CnosDBGlobalState",
      "sqlancer.cnosdb.gen.CnosDBExpressionGenerator",
      "sqlancer.cnosdb.ast.CnosDBConstant",
      "sqlancer.cnosdb.ast.CnosDBConstant$CnosDBNullConstant",
      "sqlancer.common.schema.AbstractTableColumn",
      "sqlancer.cnosdb.CnosDBSchema$CnosDBColumn",
      "sqlancer.common.schema.AbstractTable",
      "sqlancer.cnosdb.CnosDBSchema$CnosDBTable",
      "sqlancer.cnosdb.ast.CnosDBSelect$CnosDBFromTable",
      "sqlancer.cnosdb.ast.CnosDBColumnValue",
      "sqlancer.cnosdb.ast.CnosDBConstant$TimeStampConstant",
      "sqlancer.cnosdb.ast.CnosDBConstant$IntConstant",
      "sqlancer.cnosdb.ast.CnosDBInOperation",
      "sqlancer.cnosdb.ast.CnosDBConstant$StringConstant",
      "sqlancer.common.ast.BinaryNode",
      "sqlancer.common.ast.BinaryOperatorNode",
      "sqlancer.cnosdb.ast.CnosDBBinaryArithmeticOperation",
      "sqlancer.IgnoreMeException",
      "sqlancer.cnosdb.ast.CnosDBConcatOperation",
      "sqlancer.cnosdb.ast.CnosDBBinaryComparisonOperation",
      "sqlancer.cnosdb.ast.CnosDBConstant$DoubleConstant",
      "sqlancer.cnosdb.ast.CnosDBConstant$BooleanConstant",
      "sqlancer.cnosdb.ast.CnosDBPostfixOperation",
      "sqlancer.cnosdb.CnosDBCompoundDataType",
      "sqlancer.cnosdb.ast.CnosDBCastOperation",
      "sqlancer.cnosdb.ast.CnosDBPrefixOperation",
      "sqlancer.cnosdb.ast.CnosDBLikeOperation",
      "sqlancer.cnosdb.ast.CnosDBBetweenOperation",
      "sqlancer.cnosdb.ast.CnosDBBinaryLogicalOperation",
      "sqlancer.cnosdb.ast.CnosDBFunction",
      "sqlancer.common.ast.FunctionNode",
      "sqlancer.cnosdb.ast.CnosDBAggregate",
      "sqlancer.SQLGlobalState",
      "sqlancer.databend.DatabendProvider$DatabendGlobalState",
      "sqlancer.common.query.Query",
      "sqlancer.cnosdb.ast.CnosDBPostfixText",
      "sqlancer.cnosdb.ast.CnosDBOrderByTerm",
      "sqlancer.materialize.MaterializeGlobalState",
      "sqlancer.cnosdb.ast.CnosDBSimilarTo",
      "sqlancer.cnosdb.CnosDBSchema$CnosDBTimeColumn",
      "sqlancer.cnosdb.CnosDBSchema$CnosDBDataType"
    );
  }
}
