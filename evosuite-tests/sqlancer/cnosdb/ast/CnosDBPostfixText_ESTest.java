/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 04:08:25 GMT 2025
 */

package sqlancer.cnosdb.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.cnosdb.CnosDBSchema;
import sqlancer.cnosdb.ast.CnosDBBinaryComparisonOperation;
import sqlancer.cnosdb.ast.CnosDBConstant;
import sqlancer.cnosdb.ast.CnosDBExpression;
import sqlancer.cnosdb.ast.CnosDBPostfixText;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CnosDBPostfixText_ESTest extends CnosDBPostfixText_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CnosDBConstant.CnosDBNullConstant cnosDBConstant_CnosDBNullConstant0 = new CnosDBConstant.CnosDBNullConstant();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.DOUBLE;
      CnosDBPostfixText cnosDBPostfixText0 = new CnosDBPostfixText(cnosDBConstant_CnosDBNullConstant0, (String) null, cnosDBSchema_CnosDBDataType0);
      String string0 = cnosDBPostfixText0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CnosDBBinaryComparisonOperation.CnosDBBinaryComparisonOperator cnosDBBinaryComparisonOperation_CnosDBBinaryComparisonOperator0 = CnosDBBinaryComparisonOperation.CnosDBBinaryComparisonOperator.NOT_EQUALS;
      CnosDBBinaryComparisonOperation cnosDBBinaryComparisonOperation0 = new CnosDBBinaryComparisonOperation((CnosDBExpression) null, (CnosDBExpression) null, cnosDBBinaryComparisonOperation_CnosDBBinaryComparisonOperator0);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.DOUBLE;
      CnosDBPostfixText cnosDBPostfixText0 = new CnosDBPostfixText(cnosDBBinaryComparisonOperation0, "", cnosDBSchema_CnosDBDataType0);
      String string0 = cnosDBPostfixText0.getText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant((String) null);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.INT;
      CnosDBPostfixText cnosDBPostfixText0 = new CnosDBPostfixText(cnosDBConstant_StringConstant0, (String) null, cnosDBSchema_CnosDBDataType0);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType1 = cnosDBPostfixText0.getExpressionType();
      assertSame(cnosDBSchema_CnosDBDataType0, cnosDBSchema_CnosDBDataType1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = new CnosDBConstant.IntConstant((-9223372036854775808L), true);
      CnosDBConstant cnosDBConstant0 = cnosDBConstant_IntConstant0.isLessThan(cnosDBConstant_IntConstant0);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.TIMESTAMP;
      CnosDBPostfixText cnosDBPostfixText0 = new CnosDBPostfixText(cnosDBConstant0, "sqlancer.doris.DorisProvider$Action", cnosDBSchema_CnosDBDataType0);
      CnosDBExpression cnosDBExpression0 = cnosDBPostfixText0.getExpr();
      assertEquals(CnosDBSchema.CnosDBDataType.BOOLEAN, cnosDBExpression0.getExpressionType());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
      CnosDBPostfixText cnosDBPostfixText0 = new CnosDBPostfixText((CnosDBExpression) null, "EqXSNH!2TI)^I.", cnosDBSchema_CnosDBDataType0);
      String string0 = cnosDBPostfixText0.getText();
      assertEquals("EqXSNH!2TI)^I.", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
      CnosDBPostfixText cnosDBPostfixText0 = new CnosDBPostfixText((CnosDBExpression) null, (String) null, cnosDBSchema_CnosDBDataType0);
      CnosDBExpression cnosDBExpression0 = cnosDBPostfixText0.getExpr();
      assertNull(cnosDBExpression0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CnosDBPostfixText cnosDBPostfixText0 = new CnosDBPostfixText((CnosDBExpression) null, "", (CnosDBSchema.CnosDBDataType) null);
      cnosDBPostfixText0.getExpressionType();
  }
}
