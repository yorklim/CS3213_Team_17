/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 03:50:31 GMT 2025
 */

package sqlancer.cnosdb.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.cnosdb.CnosDBSchema;
import sqlancer.cnosdb.ast.CnosDBConstant;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CnosDBConstant_ESTest extends CnosDBConstant_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = new CnosDBConstant.IntConstant(788L, false);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.BOOLEAN;
      CnosDBConstant cnosDBConstant0 = cnosDBConstant_IntConstant0.cast(cnosDBSchema_CnosDBDataType0);
      assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBConstant_IntConstant0.getExpressionType());
      assertEquals(788L, cnosDBConstant_IntConstant0.asInt());
      assertTrue(cnosDBConstant0.asBoolean());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = new CnosDBConstant.IntConstant(0L, false);
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createStringConstant("0");
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_IntConstant0.isLessThan(cnosDBConstant0);
      assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBConstant_IntConstant0.getExpressionType());
      assertFalse(cnosDBConstant0.isNull());
      assertFalse(cnosDBConstant1.asBoolean());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("");
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createUintConstant((-4385L));
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_StringConstant0.isLessThan(cnosDBConstant0);
      assertEquals(CnosDBSchema.CnosDBDataType.UINT, cnosDBConstant0.getExpressionType());
      assertFalse(cnosDBConstant0.isNull());
      assertFalse(cnosDBConstant1.asBoolean());
      assertEquals((-4385.0), cnosDBConstant0.asDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = new CnosDBConstant.IntConstant(0L, false);
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createStringConstant("C]0liwc");
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_IntConstant0.isEquals(cnosDBConstant0);
      assertFalse(cnosDBConstant0.isNull());
      assertEquals("FALSE", cnosDBConstant1.getTextRepresentation());
      assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBConstant_IntConstant0.getExpressionType());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createUintConstant(10L);
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("");
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_StringConstant0.isEquals(cnosDBConstant0);
      assertFalse(cnosDBConstant1.asBoolean());
      assertFalse(cnosDBConstant_StringConstant0.isNull());
      assertEquals(10L, cnosDBConstant0.asInt());
      assertEquals(CnosDBSchema.CnosDBDataType.UINT, cnosDBConstant0.getExpressionType());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CnosDBConstant.BooleanConstant cnosDBConstant_BooleanConstant0 = new CnosDBConstant.BooleanConstant(false);
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createStringConstant("-1");
      CnosDBConstant cnosDBConstant1 = cnosDBConstant0.isEquals(cnosDBConstant_BooleanConstant0);
      assertFalse(cnosDBConstant0.isNull());
      assertFalse(cnosDBConstant1.asBoolean());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("+");
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant1 = new CnosDBConstant.StringConstant("):IU2+MQA _");
      CnosDBConstant cnosDBConstant0 = cnosDBConstant_StringConstant0.isLessThan(cnosDBConstant_StringConstant1);
      assertFalse(cnosDBConstant_StringConstant1.isNull());
      assertFalse(cnosDBConstant0.asBoolean());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CnosDBConstant.TimeStampConstant cnosDBConstant_TimeStampConstant0 = new CnosDBConstant.TimeStampConstant(3446L);
      long long0 = cnosDBConstant_TimeStampConstant0.asInt();
      assertEquals(3446L, long0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("-1953.730088543700048830942250788211822509765625");
      boolean boolean0 = cnosDBConstant_StringConstant0.isString();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("bigint");
      String string0 = cnosDBConstant_StringConstant0.getTextRepresentation();
      assertEquals("'bigint'", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = new CnosDBConstant.IntConstant(0L, true);
      cnosDBConstant_IntConstant0.getTextRepresentation();
      assertEquals(CnosDBSchema.CnosDBDataType.UINT, cnosDBConstant_IntConstant0.getExpressionType());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = new CnosDBConstant.IntConstant(0L, false);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = cnosDBConstant_IntConstant0.getExpressionType();
      assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBSchema_CnosDBDataType0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = new CnosDBConstant.IntConstant((-1L), false);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
      CnosDBConstant cnosDBConstant0 = cnosDBConstant_IntConstant0.cast(cnosDBSchema_CnosDBDataType0);
      assertEquals("-1", cnosDBConstant0.asString());
      assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBConstant_IntConstant0.getExpressionType());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CnosDBConstant.DoubleConstant cnosDBConstant_DoubleConstant0 = new CnosDBConstant.DoubleConstant(300.3505165174159);
      boolean boolean0 = cnosDBConstant_DoubleConstant0.isNull();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CnosDBConstant.DoubleConstant cnosDBConstant_DoubleConstant0 = new CnosDBConstant.DoubleConstant((-1416.8920300896));
      String string0 = cnosDBConstant_DoubleConstant0.getTextRepresentation();
      assertEquals("-1416.892030089599984421511180698871612548828125", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CnosDBConstant.DoubleConstant cnosDBConstant_DoubleConstant0 = new CnosDBConstant.DoubleConstant(0L);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = cnosDBConstant_DoubleConstant0.getExpressionType();
      assertEquals(CnosDBSchema.CnosDBDataType.DOUBLE, cnosDBSchema_CnosDBDataType0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CnosDBConstant.DoubleConstant cnosDBConstant_DoubleConstant0 = new CnosDBConstant.DoubleConstant(2669.2325868);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.UINT;
      CnosDBConstant cnosDBConstant0 = cnosDBConstant_DoubleConstant0.cast(cnosDBSchema_CnosDBDataType0);
      assertNull(cnosDBConstant0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CnosDBConstant.CnosDBNullConstant cnosDBConstant_CnosDBNullConstant0 = new CnosDBConstant.CnosDBNullConstant();
      CnosDBConstant cnosDBConstant0 = cnosDBConstant_CnosDBNullConstant0.isEquals((CnosDBConstant) null);
      assertFalse(cnosDBConstant0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createNullConstant();
      String string0 = cnosDBConstant0.getTextRepresentation();
      assertEquals("NULL", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CnosDBConstant.CnosDBNullConstant cnosDBConstant_CnosDBNullConstant0 = new CnosDBConstant.CnosDBNullConstant();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.BOOLEAN;
      CnosDBConstant cnosDBConstant0 = cnosDBConstant_CnosDBNullConstant0.cast(cnosDBSchema_CnosDBDataType0);
      assertFalse(cnosDBConstant0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CnosDBConstant.BooleanConstant cnosDBConstant_BooleanConstant0 = new CnosDBConstant.BooleanConstant(false);
      cnosDBConstant_BooleanConstant0.isBoolean();
      assertEquals("FALSE", cnosDBConstant_BooleanConstant0.getTextRepresentation());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CnosDBConstant.BooleanConstant cnosDBConstant_BooleanConstant0 = new CnosDBConstant.BooleanConstant(false);
      String string0 = cnosDBConstant_BooleanConstant0.getTextRepresentation();
      assertEquals("FALSE", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CnosDBConstant.BooleanConstant cnosDBConstant_BooleanConstant0 = new CnosDBConstant.BooleanConstant(true);
      boolean boolean0 = cnosDBConstant_BooleanConstant0.asBoolean();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CnosDBConstant.BooleanConstant cnosDBConstant_BooleanConstant0 = new CnosDBConstant.BooleanConstant(true);
      String string0 = cnosDBConstant_BooleanConstant0.toString();
      assertEquals("TRUE", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("bigint");
      boolean boolean0 = cnosDBConstant_StringConstant0.isString();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CnosDBConstant.CnosDBNullConstant cnosDBConstant_CnosDBNullConstant0 = new CnosDBConstant.CnosDBNullConstant();
      boolean boolean0 = cnosDBConstant_CnosDBNullConstant0.isNull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createIntConstant((-2186L));
      cnosDBConstant0.isInt();
      assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBConstant0.getExpressionType());
      assertEquals((-2186L), cnosDBConstant0.asInt());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CnosDBConstant.BooleanConstant cnosDBConstant_BooleanConstant0 = new CnosDBConstant.BooleanConstant(true);
      cnosDBConstant_BooleanConstant0.isBoolean();
      assertTrue(cnosDBConstant_BooleanConstant0.asBoolean());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.BOOLEAN;
      CnosDBConstant cnosDBConstant1 = cnosDBConstant0.cast(cnosDBSchema_CnosDBDataType0);
      assertEquals("FALSE", cnosDBConstant1.getTextRepresentation());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant((String) null);
      String string0 = cnosDBConstant_StringConstant0.asString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("pMzW7k#N9");
      String string0 = cnosDBConstant_StringConstant0.asString();
      assertEquals("pMzW7k#N9", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("");
      String string0 = cnosDBConstant_StringConstant0.asString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createUintConstant(0L);
      cnosDBConstant0.asInt();
      assertEquals(CnosDBSchema.CnosDBDataType.UINT, cnosDBConstant0.getExpressionType());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createUintConstant(1L);
      long long0 = cnosDBConstant0.asInt();
      assertEquals(CnosDBSchema.CnosDBDataType.UINT, cnosDBConstant0.getExpressionType());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createIntConstant(0L);
      cnosDBConstant0.asDouble();
      assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBConstant0.getExpressionType());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createIntConstant((-2186L));
      double double0 = cnosDBConstant0.asDouble();
      assertEquals((-2186.0), double0, 0.01);
      assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBConstant0.getExpressionType());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTrue();
      boolean boolean0 = cnosDBConstant0.asBoolean();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createBooleanConstant(false);
      boolean boolean0 = cnosDBConstant0.asBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      // Undeclared exception!
      try { 
        cnosDBConstant0.isEquals((CnosDBConstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.ast.CnosDBConstant$BooleanConstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant((String) null);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.INT;
      // Undeclared exception!
      try { 
        cnosDBConstant_StringConstant0.cast(cnosDBSchema_CnosDBDataType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.ast.CnosDBConstant$StringConstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant((String) null);
      // Undeclared exception!
      try { 
        cnosDBConstant_StringConstant0.asInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.ast.CnosDBConstant$StringConstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant((String) null);
      // Undeclared exception!
      try { 
        cnosDBConstant_StringConstant0.asDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.ast.CnosDBConstant$StringConstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant((String) null);
      // Undeclared exception!
      try { 
        cnosDBConstant_StringConstant0.asBoolean();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.ast.CnosDBConstant$StringConstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CnosDBConstant.BooleanConstant cnosDBConstant_BooleanConstant0 = new CnosDBConstant.BooleanConstant(false);
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant((String) null);
      // Undeclared exception!
      try { 
        cnosDBConstant_BooleanConstant0.isLessThan(cnosDBConstant_StringConstant0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.ast.CnosDBConstant$StringConstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      // Undeclared exception!
      try { 
        cnosDBConstant0.asDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FALSE
         //
         verifyException("sqlancer.cnosdb.ast.CnosDBConstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CnosDBConstant.DoubleConstant cnosDBConstant_DoubleConstant0 = new CnosDBConstant.DoubleConstant((-4385L));
      boolean boolean0 = cnosDBConstant_DoubleConstant0.isInt();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CnosDBConstant.BooleanConstant cnosDBConstant_BooleanConstant0 = new CnosDBConstant.BooleanConstant(false);
      cnosDBConstant_BooleanConstant0.isString();
      assertFalse(cnosDBConstant_BooleanConstant0.asBoolean());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant((String) null);
      // Undeclared exception!
      try { 
        cnosDBConstant_StringConstant0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.ast.CnosDBConstant$StringConstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createBooleanConstant(false);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.INT;
      CnosDBConstant cnosDBConstant1 = cnosDBConstant0.cast(cnosDBSchema_CnosDBDataType0);
      cnosDBConstant1.isBoolean();
      assertEquals(0.0, cnosDBConstant1.asDouble(), 0.01);
      assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBConstant1.getExpressionType());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createIntConstant(15L);
      boolean boolean0 = cnosDBConstant0.isNull();
      assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBConstant0.getExpressionType());
      assertFalse(boolean0);
      assertEquals(15L, cnosDBConstant0.asInt());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      CnosDBConstant.DoubleConstant cnosDBConstant_DoubleConstant0 = new CnosDBConstant.DoubleConstant((-1.7976931348623157E308));
      // Undeclared exception!
      try { 
        cnosDBConstant_DoubleConstant0.isEquals(cnosDBConstant0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.ast.CnosDBConstant$DoubleConstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createNullConstant();
      CnosDBConstant.DoubleConstant cnosDBConstant_DoubleConstant0 = new CnosDBConstant.DoubleConstant((-1400L));
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_DoubleConstant0.isEquals(cnosDBConstant0);
      assertFalse(cnosDBConstant1.isBoolean());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTrue();
      CnosDBConstant.DoubleConstant cnosDBConstant_DoubleConstant0 = new CnosDBConstant.DoubleConstant(0.0);
      // Undeclared exception!
      try { 
        cnosDBConstant_DoubleConstant0.isLessThan(cnosDBConstant0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.ast.CnosDBConstant$DoubleConstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CnosDBConstant.DoubleConstant cnosDBConstant_DoubleConstant0 = new CnosDBConstant.DoubleConstant((-2221L));
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createNullConstant();
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_DoubleConstant0.isLessThan(cnosDBConstant0);
      assertFalse(cnosDBConstant1.equals((Object)cnosDBConstant0));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createUintConstant(922L);
      CnosDBConstant.DoubleConstant cnosDBConstant_DoubleConstant0 = new CnosDBConstant.DoubleConstant(922L);
      // Undeclared exception!
      try { 
        cnosDBConstant_DoubleConstant0.isLessThan(cnosDBConstant0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // 922
         //
         verifyException("sqlancer.cnosdb.ast.CnosDBConstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("OF");
      CnosDBConstant.DoubleConstant cnosDBConstant_DoubleConstant0 = new CnosDBConstant.DoubleConstant(Double.POSITIVE_INFINITY);
      // Undeclared exception!
      try { 
        cnosDBConstant_StringConstant0.isLessThan(cnosDBConstant_DoubleConstant0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // 0.0
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTimeStampConstant((-1L));
      CnosDBConstant.DoubleConstant cnosDBConstant_DoubleConstant0 = new CnosDBConstant.DoubleConstant((-1L));
      // Undeclared exception!
      try { 
        cnosDBConstant_DoubleConstant0.isEquals(cnosDBConstant0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.ast.CnosDBConstant$DoubleConstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CnosDBConstant.TimeStampConstant cnosDBConstant_TimeStampConstant0 = new CnosDBConstant.TimeStampConstant((-1635L));
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
      CnosDBConstant cnosDBConstant0 = cnosDBConstant_TimeStampConstant0.cast(cnosDBSchema_CnosDBDataType0);
      assertEquals("1969-12-31 11:59:58", cnosDBConstant0.asString());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CnosDBConstant.TimeStampConstant cnosDBConstant_TimeStampConstant0 = new CnosDBConstant.TimeStampConstant(1443L);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.BOOLEAN;
      cnosDBConstant_TimeStampConstant0.cast(cnosDBSchema_CnosDBDataType0);
      assertEquals(1443L, cnosDBConstant_TimeStampConstant0.asInt());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTimeStampConstant((-1L));
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.INT;
      CnosDBConstant cnosDBConstant1 = cnosDBConstant0.cast(cnosDBSchema_CnosDBDataType0);
      assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBConstant1.getExpressionType());
      assertEquals((-1L), cnosDBConstant1.asInt());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CnosDBConstant.TimeStampConstant cnosDBConstant_TimeStampConstant0 = new CnosDBConstant.TimeStampConstant(5L);
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createNullConstant();
      cnosDBConstant_TimeStampConstant0.isLessThan(cnosDBConstant0);
      assertEquals(5L, cnosDBConstant_TimeStampConstant0.asInt());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CnosDBConstant.TimeStampConstant cnosDBConstant_TimeStampConstant0 = new CnosDBConstant.TimeStampConstant(1L);
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createNullConstant();
      cnosDBConstant_TimeStampConstant0.isEquals(cnosDBConstant0);
      assertEquals(1L, cnosDBConstant_TimeStampConstant0.asInt());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      CnosDBConstant cnosDBConstant1 = CnosDBConstant.createUintConstant((-9223372036854775808L));
      CnosDBConstant cnosDBConstant2 = cnosDBConstant1.isEquals(cnosDBConstant0);
      assertEquals(CnosDBSchema.CnosDBDataType.UINT, cnosDBConstant1.getExpressionType());
      assertFalse(cnosDBConstant2.asBoolean());
      assertFalse(cnosDBConstant1.isNull());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createUintConstant(922L);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.TIMESTAMP;
      cnosDBConstant0.cast(cnosDBSchema_CnosDBDataType0);
      assertEquals(922.0, cnosDBConstant0.asDouble(), 0.01);
      assertEquals(CnosDBSchema.CnosDBDataType.UINT, cnosDBConstant0.getExpressionType());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = new CnosDBConstant.IntConstant((-1684L), false);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
      CnosDBConstant cnosDBConstant0 = cnosDBConstant_IntConstant0.cast(cnosDBSchema_CnosDBDataType0);
      assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBConstant_IntConstant0.getExpressionType());
      assertEquals("-1684", cnosDBConstant0.asString());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("etFEwe1W\"D\"_BlB&");
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = (CnosDBConstant.IntConstant)CnosDBConstant.createIntConstant((-7L));
      CnosDBConstant.BooleanConstant cnosDBConstant_BooleanConstant0 = (CnosDBConstant.BooleanConstant)cnosDBConstant_IntConstant0.isLessThan(cnosDBConstant_StringConstant0);
      assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBConstant_IntConstant0.getExpressionType());
      assertEquals((-7L), cnosDBConstant_IntConstant0.asInt());
      assertFalse(cnosDBConstant_IntConstant0.isNull());
      assertTrue(cnosDBConstant_BooleanConstant0.asBoolean());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("F");
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = (CnosDBConstant.IntConstant)CnosDBConstant.createIntConstant(15L);
      CnosDBConstant.BooleanConstant cnosDBConstant_BooleanConstant0 = (CnosDBConstant.BooleanConstant)cnosDBConstant_IntConstant0.isLessThan(cnosDBConstant_StringConstant0);
      assertFalse(cnosDBConstant_BooleanConstant0.asBoolean());
      assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBConstant_IntConstant0.getExpressionType());
      assertFalse(cnosDBConstant_IntConstant0.isNull());
      assertEquals(15L, cnosDBConstant_IntConstant0.asInt());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = (CnosDBConstant.IntConstant)CnosDBConstant.createIntConstant(15L);
      CnosDBConstant.BooleanConstant cnosDBConstant_BooleanConstant0 = (CnosDBConstant.BooleanConstant)CnosDBConstant.createFalse();
      // Undeclared exception!
      try { 
        cnosDBConstant_IntConstant0.isLessThan(cnosDBConstant_BooleanConstant0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // FALSE
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = (CnosDBConstant.IntConstant)CnosDBConstant.createIntConstant(4L);
      CnosDBConstant.BooleanConstant cnosDBConstant_BooleanConstant0 = (CnosDBConstant.BooleanConstant)cnosDBConstant_IntConstant0.isLessThan(cnosDBConstant_IntConstant0);
      assertFalse(cnosDBConstant_IntConstant0.isNull());
      assertEquals("FALSE", cnosDBConstant_BooleanConstant0.getTextRepresentation());
      assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBConstant_IntConstant0.getExpressionType());
      assertEquals(4L, cnosDBConstant_IntConstant0.asInt());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = new CnosDBConstant.IntConstant(0L, true);
      CnosDBConstant.CnosDBNullConstant cnosDBConstant_CnosDBNullConstant0 = new CnosDBConstant.CnosDBNullConstant();
      cnosDBConstant_IntConstant0.isLessThan(cnosDBConstant_CnosDBNullConstant0);
      assertEquals(CnosDBSchema.CnosDBDataType.UINT, cnosDBConstant_IntConstant0.getExpressionType());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createStringConstant("_hRaR5 xf~");
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = new CnosDBConstant.IntConstant((-1368L), false);
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_IntConstant0.isEquals(cnosDBConstant0);
      assertEquals((-1368L), cnosDBConstant_IntConstant0.asInt());
      assertFalse(cnosDBConstant_IntConstant0.isNull());
      assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBConstant_IntConstant0.getExpressionType());
      assertEquals("FALSE", cnosDBConstant1.getTextRepresentation());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTimeStampConstant(1L);
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = new CnosDBConstant.IntConstant(1L, false);
      // Undeclared exception!
      try { 
        cnosDBConstant_IntConstant0.isEquals(cnosDBConstant0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // CAST (1 AS TIMESTAMP)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createUintConstant((-4385L));
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("UINT");
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_StringConstant0.isEquals(cnosDBConstant0);
      assertEquals(CnosDBSchema.CnosDBDataType.UINT, cnosDBConstant0.getExpressionType());
      assertFalse(cnosDBConstant1.asBoolean());
      assertFalse(cnosDBConstant_StringConstant0.isNull());
      assertEquals((-4385L), cnosDBConstant0.asInt());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("~a&=A");
      assertFalse(cnosDBConstant_StringConstant0.isInt());
      
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = new CnosDBConstant.IntConstant((-1L), false);
      CnosDBConstant cnosDBConstant0 = cnosDBConstant_IntConstant0.isEquals(cnosDBConstant_StringConstant0);
      assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBConstant_IntConstant0.getExpressionType());
      assertTrue(cnosDBConstant0.asBoolean());
      assertFalse(cnosDBConstant_IntConstant0.isNull());
      assertEquals((-1.0), cnosDBConstant_IntConstant0.asDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = new CnosDBConstant.IntConstant(0L, true);
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_IntConstant0.isEquals(cnosDBConstant0);
      assertEquals("TRUE", cnosDBConstant1.getTextRepresentation());
      assertEquals(CnosDBSchema.CnosDBDataType.UINT, cnosDBConstant_IntConstant0.getExpressionType());
      assertFalse(cnosDBConstant_IntConstant0.isNull());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CnosDBConstant.CnosDBNullConstant cnosDBConstant_CnosDBNullConstant0 = new CnosDBConstant.CnosDBNullConstant();
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = new CnosDBConstant.IntConstant((-265L), true);
      cnosDBConstant_IntConstant0.isEquals(cnosDBConstant_CnosDBNullConstant0);
      assertEquals(CnosDBSchema.CnosDBDataType.UINT, cnosDBConstant_IntConstant0.getExpressionType());
      assertEquals((-265.0), cnosDBConstant_IntConstant0.asDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createUintConstant(1L);
      CnosDBConstant.TimeStampConstant cnosDBConstant_TimeStampConstant0 = new CnosDBConstant.TimeStampConstant(1L);
      // Undeclared exception!
      try { 
        cnosDBConstant_TimeStampConstant0.isEquals(cnosDBConstant0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // 1
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createIntConstant(537L);
      CnosDBConstant.TimeStampConstant cnosDBConstant_TimeStampConstant0 = new CnosDBConstant.TimeStampConstant(537L);
      // Undeclared exception!
      try { 
        cnosDBConstant_TimeStampConstant0.isLessThan(cnosDBConstant0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // 537
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("false");
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_StringConstant0.isEquals(cnosDBConstant0);
      assertEquals("FALSE", cnosDBConstant0.getTextRepresentation());
      assertFalse(cnosDBConstant_StringConstant0.isNull());
      assertTrue(cnosDBConstant1.asBoolean());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("fals");
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_StringConstant0.isLessThan(cnosDBConstant0);
      assertFalse(cnosDBConstant_StringConstant0.isNull());
      assertEquals("FALSE", cnosDBConstant1.getTextRepresentation());
      assertEquals("FALSE", cnosDBConstant0.getTextRepresentation());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("YES");
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_StringConstant0.isEquals(cnosDBConstant0);
      assertFalse(cnosDBConstant1.isInt());
      assertFalse(cnosDBConstant_StringConstant0.isNull());
      assertEquals("FALSE", cnosDBConstant1.getTextRepresentation());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("tru");
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_StringConstant0.isEquals(cnosDBConstant0);
      assertFalse(cnosDBConstant_StringConstant0.isNull());
      assertFalse(cnosDBConstant1.isInt());
      assertEquals("FALSE", cnosDBConstant1.getTextRepresentation());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("OFF");
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_StringConstant0.isLessThan(cnosDBConstant0);
      assertFalse(cnosDBConstant_StringConstant0.isNull());
      assertEquals("FALSE", cnosDBConstant0.getTextRepresentation());
      assertFalse(cnosDBConstant1.asBoolean());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CnosDBConstant.BooleanConstant cnosDBConstant_BooleanConstant0 = new CnosDBConstant.BooleanConstant(true);
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("YE");
      CnosDBConstant cnosDBConstant0 = cnosDBConstant_StringConstant0.isLessThan(cnosDBConstant_BooleanConstant0);
      assertFalse(cnosDBConstant_StringConstant0.isNull());
      assertFalse(cnosDBConstant0.asBoolean());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("TR");
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_StringConstant0.isEquals(cnosDBConstant0);
      assertFalse(cnosDBConstant_StringConstant0.isNull());
      assertEquals("FALSE", cnosDBConstant1.getTextRepresentation());
      assertFalse(cnosDBConstant1.isInt());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("OF");
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTrue();
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_StringConstant0.isLessThan(cnosDBConstant0);
      assertFalse(cnosDBConstant1.isInt());
      assertTrue(cnosDBConstant1.asBoolean());
      assertTrue(cnosDBConstant0.asBoolean());
      assertFalse(cnosDBConstant0.isNull());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("NO");
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_StringConstant0.isEquals(cnosDBConstant0);
      assertFalse(cnosDBConstant_StringConstant0.isNull());
      assertTrue(cnosDBConstant1.asBoolean());
      assertFalse(cnosDBConstant0.asBoolean());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("FA");
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_StringConstant0.isLessThan(cnosDBConstant0);
      assertFalse(cnosDBConstant0.asBoolean());
      assertFalse(cnosDBConstant_StringConstant0.isNull());
      assertFalse(cnosDBConstant1.asBoolean());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("T");
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_StringConstant0.isEquals(cnosDBConstant0);
      assertFalse(cnosDBConstant1.asBoolean());
      assertFalse(cnosDBConstant1.isInt());
      assertFalse(cnosDBConstant_StringConstant0.isNull());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("N");
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_StringConstant0.isLessThan(cnosDBConstant0);
      assertFalse(cnosDBConstant0.asBoolean());
      assertFalse(cnosDBConstant_StringConstant0.isNull());
      assertFalse(cnosDBConstant1.asBoolean());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      assertFalse(cnosDBConstant0.isString());
      
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("3");
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_StringConstant0.isLessThan(cnosDBConstant0);
      assertFalse(cnosDBConstant_StringConstant0.isNull());
      assertEquals("FALSE", cnosDBConstant0.getTextRepresentation());
      assertFalse(cnosDBConstant1.isInt());
      assertFalse(cnosDBConstant1.asBoolean());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("0");
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_StringConstant0.isEquals(cnosDBConstant0);
      assertFalse(cnosDBConstant1.isInt());
      assertEquals("TRUE", cnosDBConstant1.getTextRepresentation());
      assertFalse(cnosDBConstant_StringConstant0.isNull());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("");
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.TIMESTAMP;
      CnosDBConstant cnosDBConstant0 = cnosDBConstant_StringConstant0.cast(cnosDBSchema_CnosDBDataType0);
      assertNull(cnosDBConstant0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("");
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.UINT;
      CnosDBConstant cnosDBConstant0 = cnosDBConstant_StringConstant0.cast(cnosDBSchema_CnosDBDataType0);
      assertEquals(CnosDBSchema.CnosDBDataType.UINT, cnosDBConstant0.getExpressionType());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("");
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
      CnosDBConstant cnosDBConstant0 = cnosDBConstant_StringConstant0.cast(cnosDBSchema_CnosDBDataType0);
      assertFalse(cnosDBConstant0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("");
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createStringConstant("FALSE");
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_StringConstant0.isLessThan(cnosDBConstant0);
      assertTrue(cnosDBConstant1.asBoolean());
      assertFalse(cnosDBConstant0.isNull());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("F");
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createIntConstant(15L);
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_StringConstant0.isLessThan(cnosDBConstant0);
      assertFalse(cnosDBConstant0.isNull());
      assertTrue(cnosDBConstant1.asBoolean());
      assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBConstant0.getExpressionType());
      assertEquals(15.0, cnosDBConstant0.asDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("T");
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createNullConstant();
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_StringConstant0.isLessThan(cnosDBConstant0);
      assertEquals("NULL", cnosDBConstant1.getTextRepresentation());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTimeStampConstant(1L);
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("");
      // Undeclared exception!
      try { 
        cnosDBConstant_StringConstant0.isEquals(cnosDBConstant0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // CAST (1 AS TIMESTAMP)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("k9r*s2hWxT02hRg:p");
      CnosDBConstant cnosDBConstant0 = cnosDBConstant_StringConstant0.isEquals(cnosDBConstant_StringConstant0);
      assertFalse(cnosDBConstant0.isInt());
      assertFalse(cnosDBConstant_StringConstant0.isNull());
      assertEquals("TRUE", cnosDBConstant0.getTextRepresentation());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant((String) null);
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createNullConstant();
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_StringConstant0.isEquals(cnosDBConstant0);
      assertFalse(cnosDBConstant1.isBoolean());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CnosDBConstant.BooleanConstant cnosDBConstant_BooleanConstant0 = new CnosDBConstant.BooleanConstant(true);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
      CnosDBConstant cnosDBConstant0 = cnosDBConstant_BooleanConstant0.cast(cnosDBSchema_CnosDBDataType0);
      assertEquals("true", cnosDBConstant0.asString());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.UINT;
      CnosDBConstant cnosDBConstant1 = cnosDBConstant0.cast(cnosDBSchema_CnosDBDataType0);
      assertEquals(CnosDBSchema.CnosDBDataType.UINT, cnosDBConstant1.getExpressionType());
      assertEquals(0L, cnosDBConstant1.asInt());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.TIMESTAMP;
      cnosDBConstant0.cast(cnosDBSchema_CnosDBDataType0);
      assertFalse(cnosDBConstant0.asBoolean());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CnosDBConstant.BooleanConstant cnosDBConstant_BooleanConstant0 = new CnosDBConstant.BooleanConstant(true);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.UINT;
      CnosDBConstant cnosDBConstant0 = cnosDBConstant_BooleanConstant0.cast(cnosDBSchema_CnosDBDataType0);
      CnosDBConstant cnosDBConstant1 = cnosDBConstant0.cast(cnosDBSchema_CnosDBDataType0);
      assertEquals(CnosDBSchema.CnosDBDataType.UINT, cnosDBConstant1.getExpressionType());
      assertEquals(1L, cnosDBConstant1.asInt());
      assertEquals(1.0, cnosDBConstant0.asDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.DOUBLE;
      cnosDBConstant0.cast(cnosDBSchema_CnosDBDataType0);
      assertEquals("FALSE", cnosDBConstant0.getTextRepresentation());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
      CnosDBConstant cnosDBConstant1 = cnosDBConstant0.cast(cnosDBSchema_CnosDBDataType0);
      assertEquals("false", cnosDBConstant1.asString());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTrue();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.INT;
      CnosDBConstant cnosDBConstant1 = cnosDBConstant0.cast(cnosDBSchema_CnosDBDataType0);
      assertEquals(1L, cnosDBConstant1.asInt());
      assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBConstant1.getExpressionType());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CnosDBConstant.BooleanConstant cnosDBConstant_BooleanConstant0 = (CnosDBConstant.BooleanConstant)CnosDBConstant.createFalse();
      CnosDBConstant.TimeStampConstant cnosDBConstant_TimeStampConstant0 = (CnosDBConstant.TimeStampConstant)CnosDBConstant.createTimeStampConstant(0L);
      // Undeclared exception!
      try { 
        cnosDBConstant_BooleanConstant0.isLessThan(cnosDBConstant_TimeStampConstant0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CnosDBConstant.BooleanConstant cnosDBConstant_BooleanConstant0 = (CnosDBConstant.BooleanConstant)CnosDBConstant.createFalse();
      assertFalse(cnosDBConstant_BooleanConstant0.isString());
      
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("true");
      CnosDBConstant.BooleanConstant cnosDBConstant_BooleanConstant1 = (CnosDBConstant.BooleanConstant)cnosDBConstant_BooleanConstant0.isLessThan(cnosDBConstant_StringConstant0);
      assertTrue(cnosDBConstant_BooleanConstant1.asBoolean());
      assertFalse(cnosDBConstant_BooleanConstant0.asBoolean());
      assertFalse(cnosDBConstant_StringConstant0.isNull());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CnosDBConstant.BooleanConstant cnosDBConstant_BooleanConstant0 = (CnosDBConstant.BooleanConstant)CnosDBConstant.createFalse();
      CnosDBConstant.CnosDBNullConstant cnosDBConstant_CnosDBNullConstant0 = new CnosDBConstant.CnosDBNullConstant();
      cnosDBConstant_BooleanConstant0.isLessThan(cnosDBConstant_CnosDBNullConstant0);
      assertFalse(cnosDBConstant_BooleanConstant0.asBoolean());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("FAL");
      CnosDBConstant cnosDBConstant1 = cnosDBConstant0.isEquals(cnosDBConstant_StringConstant0);
      assertEquals("FALSE", cnosDBConstant0.getTextRepresentation());
      assertFalse(cnosDBConstant_StringConstant0.isNull());
      assertTrue(cnosDBConstant1.asBoolean());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTrue();
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("c>]A2");
      CnosDBConstant cnosDBConstant1 = cnosDBConstant0.isEquals(cnosDBConstant_StringConstant0);
      assertFalse(cnosDBConstant_StringConstant0.isNull());
      assertEquals("FALSE", cnosDBConstant1.getTextRepresentation());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("ON");
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_StringConstant0.isEquals(cnosDBConstant0);
      assertFalse(cnosDBConstant1.isInt());
      assertEquals("FALSE", cnosDBConstant1.getTextRepresentation());
      assertFalse(cnosDBConstant_StringConstant0.isNull());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("F");
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_StringConstant0.isEquals(cnosDBConstant0);
      assertFalse(cnosDBConstant_StringConstant0.isNull());
      assertEquals("FALSE", cnosDBConstant0.getTextRepresentation());
      assertTrue(cnosDBConstant1.asBoolean());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = new CnosDBConstant.IntConstant(0L, false);
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      // Undeclared exception!
      try { 
        cnosDBConstant0.isEquals(cnosDBConstant_IntConstant0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTrue();
      String string0 = cnosDBConstant0.getTextRepresentation();
      assertEquals("TRUE", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createNullConstant();
      CnosDBConstant cnosDBConstant1 = cnosDBConstant0.isEquals((CnosDBConstant) null);
      assertTrue(cnosDBConstant1.isNull());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CnosDBConstant.BooleanConstant cnosDBConstant_BooleanConstant0 = new CnosDBConstant.BooleanConstant(false);
      CnosDBConstant.CnosDBNullConstant cnosDBConstant_CnosDBNullConstant0 = new CnosDBConstant.CnosDBNullConstant();
      assertTrue(cnosDBConstant_CnosDBNullConstant0.isNull());
      
      cnosDBConstant_BooleanConstant0.isEquals(cnosDBConstant_CnosDBNullConstant0);
      assertFalse(cnosDBConstant_BooleanConstant0.asBoolean());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CnosDBConstant.CnosDBNullConstant cnosDBConstant_CnosDBNullConstant0 = new CnosDBConstant.CnosDBNullConstant();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.TIMESTAMP;
      CnosDBConstant cnosDBConstant0 = cnosDBConstant_CnosDBNullConstant0.cast(cnosDBSchema_CnosDBDataType0);
      assertTrue(cnosDBConstant0.isNull());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CnosDBConstant.CnosDBNullConstant cnosDBConstant_CnosDBNullConstant0 = new CnosDBConstant.CnosDBNullConstant();
      cnosDBConstant_CnosDBNullConstant0.getExpressionType();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      // Undeclared exception!
      try { 
        cnosDBConstant0.asInt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FALSE
         //
         verifyException("sqlancer.cnosdb.ast.CnosDBConstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createUintConstant(1885L);
      // Undeclared exception!
      try { 
        cnosDBConstant0.asBoolean();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // 1885
         //
         verifyException("sqlancer.cnosdb.ast.CnosDBConstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("OFF");
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createDoubleConstant(0.0);
      // Undeclared exception!
      try { 
        cnosDBConstant0.isEquals(cnosDBConstant_StringConstant0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // 0
         //
         verifyException("sqlancer.cnosdb.ast.CnosDBConstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createUintConstant(1L);
      CnosDBConstant.CnosDBNullConstant cnosDBConstant_CnosDBNullConstant0 = new CnosDBConstant.CnosDBNullConstant();
      cnosDBConstant_CnosDBNullConstant0.isLessThan(cnosDBConstant0);
      assertEquals(CnosDBSchema.CnosDBDataType.UINT, cnosDBConstant0.getExpressionType());
      assertEquals(1.0, cnosDBConstant0.asDouble(), 0.01);
      assertEquals(1L, cnosDBConstant0.asInt());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      CnosDBConstant.TimeStampConstant cnosDBConstant_TimeStampConstant0 = new CnosDBConstant.TimeStampConstant((-1635L));
      // Undeclared exception!
      try { 
        cnosDBConstant_TimeStampConstant0.isEquals(cnosDBConstant0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // FALSE
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      assertTrue(cnosDBConstant0.isBoolean());
      assertFalse(cnosDBConstant0.isString());
      
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("y");
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_StringConstant0.isLessThan(cnosDBConstant0);
      assertFalse(cnosDBConstant_StringConstant0.isNull());
      assertEquals("FALSE", cnosDBConstant1.getTextRepresentation());
      assertEquals("FALSE", cnosDBConstant0.getTextRepresentation());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createIntConstant((-1L));
      assertTrue(cnosDBConstant0.isInt());
      
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("FA");
      assertFalse(cnosDBConstant_StringConstant0.isBoolean());
      
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_StringConstant0.isEquals(cnosDBConstant0);
      assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBConstant0.getExpressionType());
      assertFalse(cnosDBConstant_StringConstant0.isNull());
      assertTrue(cnosDBConstant1.asBoolean());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createIntConstant(394L);
      double double0 = cnosDBConstant0.asDouble();
      assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBConstant0.getExpressionType());
      assertEquals(394.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = new CnosDBConstant.IntConstant((-581L), false);
      CnosDBConstant.DoubleConstant cnosDBConstant_DoubleConstant0 = new CnosDBConstant.DoubleConstant((-581L));
      // Undeclared exception!
      try { 
        cnosDBConstant_IntConstant0.isLessThan(cnosDBConstant_DoubleConstant0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.ast.CnosDBConstant$IntConstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("");
      assertTrue(cnosDBConstant_StringConstant0.isString());
      
      CnosDBConstant cnosDBConstant0 = cnosDBConstant_StringConstant0.isLessThan(cnosDBConstant_StringConstant0);
      assertFalse(cnosDBConstant0.isInt());
      assertFalse(cnosDBConstant_StringConstant0.isNull());
      assertFalse(cnosDBConstant_StringConstant0.isBoolean());
      assertFalse(cnosDBConstant0.asBoolean());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTimeStampConstant((-3264L));
      long long0 = cnosDBConstant0.asInt();
      assertEquals((-3264L), long0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CnosDBConstant.TimeStampConstant cnosDBConstant_TimeStampConstant0 = new CnosDBConstant.TimeStampConstant((-2458L));
      // Undeclared exception!
      try { 
        cnosDBConstant_TimeStampConstant0.asString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CAST (-2458 AS TIMESTAMP)
         //
         verifyException("sqlancer.cnosdb.ast.CnosDBConstant", e);
      }
  }
}
