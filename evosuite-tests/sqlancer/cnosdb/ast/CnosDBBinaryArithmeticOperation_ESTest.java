/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 04:06:21 GMT 2025
 */

package sqlancer.cnosdb.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.cnosdb.CnosDBSchema;
import sqlancer.cnosdb.ast.CnosDBBinaryArithmeticOperation;
import sqlancer.cnosdb.ast.CnosDBConstant;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CnosDBBinaryArithmeticOperation_ESTest extends CnosDBBinaryArithmeticOperation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.TIMESTAMP;
      CnosDBBinaryArithmeticOperation.CnosDBBinaryOperator.getRandom(cnosDBSchema_CnosDBDataType0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.UINT;
      CnosDBBinaryArithmeticOperation.CnosDBBinaryOperator.getRandom(cnosDBSchema_CnosDBDataType0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.DOUBLE;
      CnosDBBinaryArithmeticOperation.CnosDBBinaryOperator.getRandom(cnosDBSchema_CnosDBDataType0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
      CnosDBBinaryArithmeticOperation.CnosDBBinaryOperator.getRandom(cnosDBSchema_CnosDBDataType0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTrue();
      CnosDBBinaryArithmeticOperation.CnosDBBinaryOperator cnosDBBinaryArithmeticOperation_CnosDBBinaryOperator0 = CnosDBBinaryArithmeticOperation.CnosDBBinaryOperator.MODULO;
      CnosDBBinaryArithmeticOperation cnosDBBinaryArithmeticOperation0 = new CnosDBBinaryArithmeticOperation(cnosDBConstant0, cnosDBConstant0, cnosDBBinaryArithmeticOperation_CnosDBBinaryOperator0);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = cnosDBBinaryArithmeticOperation0.getExpressionType();
      assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBSchema_CnosDBDataType0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CnosDBBinaryArithmeticOperation.CnosDBBinaryOperator cnosDBBinaryArithmeticOperation_CnosDBBinaryOperator0 = CnosDBBinaryArithmeticOperation.CnosDBBinaryOperator.ADDITION;
      String string0 = cnosDBBinaryArithmeticOperation_CnosDBBinaryOperator0.getTextRepresentation();
      assertEquals("+", string0);
  }
}
