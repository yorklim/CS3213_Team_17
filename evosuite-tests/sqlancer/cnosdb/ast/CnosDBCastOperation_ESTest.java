/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 01:26:24 GMT 2025
 */

package sqlancer.cnosdb.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.Randomly;
import sqlancer.cnosdb.CnosDBCompoundDataType;
import sqlancer.cnosdb.CnosDBSchema;
import sqlancer.cnosdb.ast.CnosDBCastOperation;
import sqlancer.cnosdb.ast.CnosDBConcatOperation;
import sqlancer.cnosdb.ast.CnosDBConstant;
import sqlancer.cnosdb.ast.CnosDBExpression;
import sqlancer.cnosdb.ast.CnosDBSimilarTo;
import sqlancer.cnosdb.gen.CnosDBExpressionGenerator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CnosDBCastOperation_ESTest extends CnosDBCastOperation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Randomly randomly0 = new Randomly();
      Randomly.getBooleanWithRatherLowProbability();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
      CnosDBExpression cnosDBExpression0 = CnosDBExpressionGenerator.generateConstant(randomly0, cnosDBSchema_CnosDBDataType0);
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBExpression0, cnosDBCompoundDataType0);
      cnosDBCastOperation0.getCompoundType();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType1 = CnosDBSchema.CnosDBDataType.STRING;
      CnosDBSchema.CnosDBDataType[] cnosDBSchema_CnosDBDataTypeArray0 = new CnosDBSchema.CnosDBDataType[2];
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType2 = CnosDBSchema.CnosDBDataType.UINT;
      cnosDBSchema_CnosDBDataTypeArray0[0] = cnosDBSchema_CnosDBDataType2;
      cnosDBSchema_CnosDBDataTypeArray0[1] = cnosDBSchema_CnosDBDataType0;
      Randomly.subset(2231, cnosDBSchema_CnosDBDataTypeArray0);
      int int0 = (-107);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTrue();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant0, cnosDBCompoundDataType0);
      cnosDBCastOperation0.getExpression();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.DOUBLE;
      CnosDBCastOperation.canCastTo(cnosDBSchema_CnosDBDataType0);
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createNullConstant();
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant0, cnosDBCompoundDataType0);
      cnosDBCastOperation0.getCompoundType();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType1 = CnosDBSchema.CnosDBDataType.TIMESTAMP;
      CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType1);
      CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType1);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation((CnosDBExpression) null, cnosDBCompoundDataType0);
      // Undeclared exception!
      try { 
        cnosDBCastOperation0.getCompoundType();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CnosDBConstant.TimeStampConstant cnosDBConstant_TimeStampConstant0 = new CnosDBConstant.TimeStampConstant(2947L);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.TIMESTAMP;
      String string0 = cnosDBConstant_TimeStampConstant0.toString();
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant_TimeStampConstant0, cnosDBCompoundDataType0);
      cnosDBCastOperation0.getType();
      CnosDBConstant.createBooleanConstant(false);
      cnosDBCastOperation0.getExpressionType();
      cnosDBCastOperation0.getExpectedValue();
      CnosDBSchema.CnosDBDataType.valueOf(string0);
      // Undeclared exception!
      try { 
        cnosDBCastOperation0.getExpectedValue();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Not impl
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTrue();
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant0, (CnosDBCompoundDataType) null);
      cnosDBCastOperation0.getType();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTrue();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.BOOLEAN;
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant0, cnosDBCompoundDataType0);
      cnosDBCastOperation0.getExpressionType();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.TIMESTAMP;
      CnosDBCastOperation.canCastTo(cnosDBSchema_CnosDBDataType0);
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = new CnosDBConstant.IntConstant(2390L, true);
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createStringConstant("");
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_IntConstant0.isLessThan(cnosDBConstant0);
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBConstant.createStringConstant("rb087Fk5LW1&fyE[");
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant1, cnosDBCompoundDataType0);
      cnosDBCastOperation0.getCompoundType();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.BOOLEAN;
      CnosDBCastOperation.canCastTo(cnosDBSchema_CnosDBDataType0);
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createNullConstant();
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant0, (CnosDBCompoundDataType) null);
      cnosDBCastOperation0.getCompoundType();
      cnosDBCastOperation0.getExpression();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = new CnosDBConstant.IntConstant(0L, false);
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTrue();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.BOOLEAN;
      cnosDBConstant_IntConstant0.getTextRepresentation();
      cnosDBConstant_IntConstant0.isEquals(cnosDBConstant0);
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType1 = CnosDBSchema.CnosDBDataType.INT;
      CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType1);
      cnosDBConstant_IntConstant0.getTextRepresentation();
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant_IntConstant0, cnosDBCompoundDataType0);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType2 = cnosDBCastOperation0.getType();
      CnosDBSchema.CnosDBDataType.getRandomType();
      CnosDBSchema.CnosDBDataType.getRandomType();
      CnosDBConstant.createUintConstant(0L);
      CnosDBSchema.CnosDBDataType.getRandomTypeWithoutTimeStamp();
      cnosDBCastOperation0.getExpression();
      CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType2);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType3 = CnosDBSchema.CnosDBDataType.DOUBLE;
      CnosDBCastOperation.canCastTo(cnosDBSchema_CnosDBDataType3);
      cnosDBCastOperation0.getCompoundType();
      cnosDBCastOperation0.getExpressionType();
      cnosDBCastOperation0.getExpression();
      cnosDBCastOperation0.getExpression();
      CnosDBCastOperation.canCastTo(cnosDBSchema_CnosDBDataType0);
      cnosDBCastOperation0.getExpression();
      cnosDBCastOperation0.getCompoundType();
      cnosDBCastOperation0.getCompoundType();
      cnosDBCastOperation0.getType();
      cnosDBCastOperation0.getExpressionType();
      cnosDBCastOperation0.getType();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType4 = CnosDBSchema.CnosDBDataType.UINT;
      CnosDBCastOperation.canCastTo(cnosDBSchema_CnosDBDataType4);
      cnosDBCastOperation0.getExpression();
      cnosDBCastOperation0.getExpression();
      cnosDBCastOperation0.getExpressionType();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.UINT;
      CnosDBCastOperation.canCastTo(cnosDBSchema_CnosDBDataType0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
      CnosDBCastOperation.canCastTo(cnosDBSchema_CnosDBDataType0);
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = new CnosDBConstant.IntConstant(0L, true);
      CnosDBSimilarTo cnosDBSimilarTo0 = new CnosDBSimilarTo(cnosDBConstant_IntConstant0, cnosDBConstant_IntConstant0);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType1 = CnosDBSchema.CnosDBDataType.UINT;
      CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType1);
      cnosDBSimilarTo0.getExpectedValue();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType2 = CnosDBSchema.CnosDBDataType.DOUBLE;
      // Undeclared exception!
      try { 
        CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Not impl
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.UINT;
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation((CnosDBExpression) null, cnosDBCompoundDataType0);
      // Undeclared exception!
      try { 
        cnosDBCastOperation0.getExpression();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.INT;
      CnosDBCastOperation.canCastTo(cnosDBSchema_CnosDBDataType0);
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = new CnosDBConstant.IntConstant(1690L, true);
      CnosDBConstant.TimeStampConstant cnosDBConstant_TimeStampConstant0 = new CnosDBConstant.TimeStampConstant(1690L);
      CnosDBConstant cnosDBConstant0 = cnosDBConstant_TimeStampConstant0.cast(cnosDBSchema_CnosDBDataType0);
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_IntConstant0.isLessThan(cnosDBConstant0);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType1 = CnosDBSchema.CnosDBDataType.UINT;
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType1);
      CnosDBConstant.createBooleanConstant(false);
      CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType1);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant1, cnosDBCompoundDataType0);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType2 = CnosDBSchema.CnosDBDataType.STRING;
      cnosDBConstant0.asString();
      CnosDBCastOperation.canCastTo(cnosDBSchema_CnosDBDataType2);
      cnosDBCastOperation0.getExpression();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType3 = CnosDBSchema.CnosDBDataType.STRING;
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CnosDBCastOperation.canCastTo((CnosDBSchema.CnosDBDataType) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTrue();
      CnosDBConcatOperation cnosDBConcatOperation0 = new CnosDBConcatOperation(cnosDBConstant0, cnosDBConstant0);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConcatOperation0, (CnosDBCompoundDataType) null);
      cnosDBCastOperation0.getExpressionType();
  }
}
