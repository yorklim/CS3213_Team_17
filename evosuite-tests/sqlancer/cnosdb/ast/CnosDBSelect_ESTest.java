/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 13 14:26:26 GMT 2025
 */

package sqlancer.cnosdb.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.Randomly;
import sqlancer.cnosdb.CnosDBSchema;
import sqlancer.cnosdb.ast.CnosDBExpression;
import sqlancer.cnosdb.ast.CnosDBInOperation;
import sqlancer.cnosdb.ast.CnosDBJoin;
import sqlancer.cnosdb.ast.CnosDBSelect;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CnosDBSelect_ESTest extends CnosDBSelect_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBSelect0.setJoinClauses((List<CnosDBJoin>) null);
      List<CnosDBJoin> list0 = cnosDBSelect0.getJoinClauses();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      LinkedList<CnosDBJoin> linkedList0 = new LinkedList<CnosDBJoin>();
      List<CnosDBJoin> list0 = Randomly.nonEmptySubset((List<CnosDBJoin>) linkedList0, 0);
      cnosDBSelect0.setJoinClauses(list0);
      List<CnosDBJoin> list1 = cnosDBSelect0.getJoinClauses();
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBJoin[] cnosDBJoinArray0 = new CnosDBJoin[1];
      List<CnosDBJoin> list0 = Randomly.nonEmptySubset(cnosDBJoinArray0);
      cnosDBSelect0.setJoinClauses(list0);
      List<CnosDBJoin> list1 = cnosDBSelect0.getJoinClauses();
      assertEquals(1, list1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBSelect.SelectType cnosDBSelect_SelectType0 = CnosDBSelect.SelectType.DISTINCT;
      cnosDBSelect0.setSelectOption(cnosDBSelect_SelectType0);
      assertNull(cnosDBSelect0.getExpressionType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      // Undeclared exception!
      try { 
        cnosDBSelect0.setDistinctOnClause(cnosDBSelect0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.ast.CnosDBSelect", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CnosDBSelect.SelectType cnosDBSelect_SelectType0 = CnosDBSelect.SelectType.getRandom();
      assertEquals(CnosDBSelect.SelectType.DISTINCT, cnosDBSelect_SelectType0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CnosDBSelect.CnosDBFromTable cnosDBSelect_CnosDBFromTable0 = new CnosDBSelect.CnosDBFromTable((CnosDBSchema.CnosDBTable) null);
      cnosDBSelect_CnosDBFromTable0.getExpressionType();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<CnosDBSchema.CnosDBColumn> linkedList0 = new LinkedList<CnosDBSchema.CnosDBColumn>();
      CnosDBSchema.CnosDBTable cnosDBSchema_CnosDBTable0 = new CnosDBSchema.CnosDBTable("", linkedList0);
      CnosDBSelect.CnosDBFromTable cnosDBSelect_CnosDBFromTable0 = new CnosDBSelect.CnosDBFromTable(cnosDBSchema_CnosDBTable0);
      CnosDBSchema.CnosDBTable cnosDBSchema_CnosDBTable1 = cnosDBSelect_CnosDBFromTable0.getTable();
      assertSame(cnosDBSchema_CnosDBTable0, cnosDBSchema_CnosDBTable1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBSelect.CnosDBSubquery cnosDBSelect_CnosDBSubquery0 = new CnosDBSelect.CnosDBSubquery(cnosDBSelect0, "");
      cnosDBSelect_CnosDBSubquery0.getExpressionType();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBSelect.CnosDBSubquery cnosDBSelect_CnosDBSubquery0 = new CnosDBSelect.CnosDBSubquery(cnosDBSelect0, "S^qf[XiB,}<*=Pi");
      String string0 = cnosDBSelect_CnosDBSubquery0.getName();
      assertEquals("S^qf[XiB,}<*=Pi", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBSelect.CnosDBSubquery cnosDBSelect_CnosDBSubquery0 = new CnosDBSelect.CnosDBSubquery(cnosDBSelect0, "S^qf[XiB,}<*=Pi");
      CnosDBSelect cnosDBSelect1 = cnosDBSelect_CnosDBSubquery0.getSelect();
      assertSame(cnosDBSelect0, cnosDBSelect1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBExpression cnosDBExpression0 = cnosDBSelect0.getDistinctOnClause();
      assertNull(cnosDBExpression0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBSelect.SelectType cnosDBSelect_SelectType0 = cnosDBSelect0.getSelectOption();
      assertEquals(CnosDBSelect.SelectType.ALL, cnosDBSelect_SelectType0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBSelect0.getExpressionType();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBSelect.SelectType cnosDBSelect_SelectType0 = CnosDBSelect.SelectType.DISTINCT;
      cnosDBSelect0.setSelectType(cnosDBSelect_SelectType0);
      CnosDBInOperation cnosDBInOperation0 = new CnosDBInOperation(cnosDBSelect0, (List<CnosDBExpression>) null, false);
      cnosDBSelect0.setDistinctOnClause(cnosDBInOperation0);
      CnosDBInOperation cnosDBInOperation1 = (CnosDBInOperation)cnosDBSelect0.getDistinctOnClause();
      assertFalse(cnosDBInOperation1.isTrue());
  }
}
