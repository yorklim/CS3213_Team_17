/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 13 14:17:27 GMT 2025
 */

package sqlancer.cnosdb.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.Randomly;
import sqlancer.cnosdb.CnosDBSchema;
import sqlancer.cnosdb.ast.CnosDBAlias;
import sqlancer.cnosdb.ast.CnosDBBetweenOperation;
import sqlancer.cnosdb.ast.CnosDBConstant;
import sqlancer.cnosdb.ast.CnosDBExpression;
import sqlancer.cnosdb.gen.CnosDBExpressionGenerator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CnosDBBetweenOperation_ESTest extends CnosDBBetweenOperation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = new CnosDBConstant.IntConstant(353L, true);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.DOUBLE;
      CnosDBConstant cnosDBConstant0 = cnosDBConstant_IntConstant0.cast(cnosDBSchema_CnosDBDataType0);
      CnosDBAlias cnosDBAlias0 = new CnosDBAlias(cnosDBConstant_IntConstant0, "Table");
      CnosDBBetweenOperation cnosDBBetweenOperation0 = new CnosDBBetweenOperation(cnosDBConstant0, cnosDBConstant_IntConstant0, cnosDBAlias0);
      assertEquals(CnosDBSchema.CnosDBDataType.BOOLEAN, cnosDBBetweenOperation0.getExpressionType());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Randomly randomly0 = new Randomly((-1L));
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
      CnosDBExpression cnosDBExpression0 = CnosDBExpressionGenerator.generateConstant(randomly0, cnosDBSchema_CnosDBDataType0);
      CnosDBBetweenOperation cnosDBBetweenOperation0 = new CnosDBBetweenOperation(cnosDBExpression0, cnosDBExpression0, cnosDBExpression0);
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = (CnosDBConstant.StringConstant)cnosDBBetweenOperation0.getRight();
      assertFalse(cnosDBConstant_StringConstant0.isInt());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CnosDBBetweenOperation cnosDBBetweenOperation0 = new CnosDBBetweenOperation((CnosDBExpression) null, (CnosDBExpression) null, (CnosDBExpression) null);
      CnosDBExpression cnosDBExpression0 = cnosDBBetweenOperation0.getLeft();
      assertNull(cnosDBExpression0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Randomly randomly0 = new Randomly((-1L));
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
      CnosDBExpression cnosDBExpression0 = CnosDBExpressionGenerator.generateConstant(randomly0, cnosDBSchema_CnosDBDataType0);
      CnosDBBetweenOperation cnosDBBetweenOperation0 = new CnosDBBetweenOperation(cnosDBExpression0, cnosDBExpression0, cnosDBExpression0);
      CnosDBExpression cnosDBExpression1 = cnosDBBetweenOperation0.getExpr();
      assertSame(cnosDBExpression1, cnosDBExpression0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Randomly randomly0 = new Randomly((-1L));
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
      CnosDBExpression cnosDBExpression0 = CnosDBExpressionGenerator.generateConstant(randomly0, cnosDBSchema_CnosDBDataType0);
      CnosDBBetweenOperation cnosDBBetweenOperation0 = new CnosDBBetweenOperation(cnosDBExpression0, cnosDBExpression0, cnosDBExpression0);
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = (CnosDBConstant.StringConstant)cnosDBBetweenOperation0.getLeft();
      assertFalse(cnosDBConstant_StringConstant0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CnosDBBetweenOperation cnosDBBetweenOperation0 = new CnosDBBetweenOperation((CnosDBExpression) null, (CnosDBExpression) null, (CnosDBExpression) null);
      CnosDBExpression cnosDBExpression0 = cnosDBBetweenOperation0.getRight();
      assertNull(cnosDBExpression0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CnosDBBetweenOperation cnosDBBetweenOperation0 = new CnosDBBetweenOperation((CnosDBExpression) null, (CnosDBExpression) null, (CnosDBExpression) null);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = cnosDBBetweenOperation0.getExpressionType();
      assertEquals(CnosDBSchema.CnosDBDataType.BOOLEAN, cnosDBSchema_CnosDBDataType0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CnosDBBetweenOperation cnosDBBetweenOperation0 = new CnosDBBetweenOperation((CnosDBExpression) null, (CnosDBExpression) null, (CnosDBExpression) null);
      CnosDBExpression cnosDBExpression0 = cnosDBBetweenOperation0.getExpr();
      assertNull(cnosDBExpression0);
  }
}
