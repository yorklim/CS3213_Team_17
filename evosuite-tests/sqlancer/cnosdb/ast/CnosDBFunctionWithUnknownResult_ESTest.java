/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 04:01:39 GMT 2025
 */

package sqlancer.cnosdb.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.cnosdb.CnosDBSchema;
import sqlancer.cnosdb.ast.CnosDBFunctionWithUnknownResult;
import sqlancer.cnosdb.gen.CnosDBExpressionGenerator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CnosDBFunctionWithUnknownResult_ESTest extends CnosDBFunctionWithUnknownResult_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CnosDBFunctionWithUnknownResult[] cnosDBFunctionWithUnknownResultArray0 = CnosDBFunctionWithUnknownResult.values();
      assertEquals(52, cnosDBFunctionWithUnknownResultArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CnosDBFunctionWithUnknownResult cnosDBFunctionWithUnknownResult0 = CnosDBFunctionWithUnknownResult.valueOf("TO_TIMESTAMP_MILLIS");
      assertEquals("to_timestamp_millis", cnosDBFunctionWithUnknownResult0.getName());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.TIMESTAMP;
      List<CnosDBFunctionWithUnknownResult> list0 = CnosDBFunctionWithUnknownResult.getSupportedFunctions(cnosDBSchema_CnosDBDataType0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CnosDBFunctionWithUnknownResult cnosDBFunctionWithUnknownResult0 = CnosDBFunctionWithUnknownResult.REVERSE;
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.DOUBLE;
      boolean boolean0 = cnosDBFunctionWithUnknownResult0.isCompatibleWithReturnType(cnosDBSchema_CnosDBDataType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CnosDBFunctionWithUnknownResult cnosDBFunctionWithUnknownResult0 = CnosDBFunctionWithUnknownResult.LPAD2;
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
      boolean boolean0 = cnosDBFunctionWithUnknownResult0.isCompatibleWithReturnType(cnosDBSchema_CnosDBDataType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CnosDBFunctionWithUnknownResult cnosDBFunctionWithUnknownResult0 = CnosDBFunctionWithUnknownResult.BTRIM;
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
      // Undeclared exception!
      try { 
        cnosDBFunctionWithUnknownResult0.getArguments(cnosDBSchema_CnosDBDataType0, (CnosDBExpressionGenerator) null, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.ast.CnosDBFunctionWithUnknownResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CnosDBFunctionWithUnknownResult cnosDBFunctionWithUnknownResult0 = CnosDBFunctionWithUnknownResult.BTRIM;
      String string0 = cnosDBFunctionWithUnknownResult0.getName();
      assertEquals("btrim", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.BOOLEAN;
      List<CnosDBFunctionWithUnknownResult> list0 = CnosDBFunctionWithUnknownResult.getSupportedFunctions(cnosDBSchema_CnosDBDataType0);
      assertEquals(1, list0.size());
  }
}
