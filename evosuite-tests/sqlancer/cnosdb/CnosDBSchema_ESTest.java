/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 03:59:11 GMT 2025
 */

package sqlancer.cnosdb;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import sqlancer.cnosdb.CnosDBGlobalState;
import sqlancer.cnosdb.CnosDBSchema;
import sqlancer.cnosdb.ast.CnosDBConstant;
import sqlancer.cnosdb.client.CnosDBClient;
import sqlancer.cnosdb.client.CnosDBConnection;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CnosDBSchema_ESTest extends CnosDBSchema_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CnosDBConnection cnosDBConnection0 = new CnosDBConnection((CnosDBClient) null);
      try { 
        CnosDBSchema.getTableColumns(cnosDBConnection0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBSchema", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CnosDBConnection cnosDBConnection0 = new CnosDBConnection((CnosDBClient) null);
      try { 
        CnosDBSchema.fromConnection(cnosDBConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBSchema", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<CnosDBSchema.CnosDBTable> linkedList0 = new LinkedList<CnosDBSchema.CnosDBTable>();
      CnosDBSchema cnosDBSchema0 = new CnosDBSchema(linkedList0, "6h?nYSn!y<ir");
      String string0 = cnosDBSchema0.getDatabaseName();
      assertEquals("6h?nYSn!y<ir", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<CnosDBSchema.CnosDBTable> linkedList0 = new LinkedList<CnosDBSchema.CnosDBTable>();
      CnosDBSchema cnosDBSchema0 = new CnosDBSchema(linkedList0, "");
      String string0 = cnosDBSchema0.getDatabaseName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<CnosDBSchema.CnosDBTable> linkedList0 = new LinkedList<CnosDBSchema.CnosDBTable>();
      CnosDBSchema cnosDBSchema0 = new CnosDBSchema(linkedList0, "");
      // Undeclared exception!
      try { 
        cnosDBSchema0.getRandomTableNonEmptyTables();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // [] 1
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        CnosDBSchema.getColumnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBSchema", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CnosDBSchema cnosDBSchema0 = null;
      try {
        cnosDBSchema0 = new CnosDBSchema((List<CnosDBSchema.CnosDBTable>) null, "collate rtrim");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.getColumnType("boolean");
      CnosDBSchema.CnosDBTimeColumn cnosDBSchema_CnosDBTimeColumn0 = new CnosDBSchema.CnosDBTimeColumn();
      CnosDBSchema.CnosDBFieldColumn cnosDBSchema_CnosDBFieldColumn0 = new CnosDBSchema.CnosDBFieldColumn("boolean", cnosDBSchema_CnosDBDataType0);
      List<CnosDBSchema.CnosDBColumn> list0 = List.of((CnosDBSchema.CnosDBColumn) cnosDBSchema_CnosDBTimeColumn0, (CnosDBSchema.CnosDBColumn) cnosDBSchema_CnosDBTimeColumn0, (CnosDBSchema.CnosDBColumn) cnosDBSchema_CnosDBFieldColumn0, (CnosDBSchema.CnosDBColumn) cnosDBSchema_CnosDBFieldColumn0);
      CnosDBSchema.CnosDBTable cnosDBSchema_CnosDBTable0 = new CnosDBSchema.CnosDBTable("", list0);
      List<CnosDBSchema.CnosDBColumn> list1 = cnosDBSchema_CnosDBTable0.getRandomColumnsWithOnlyOneField();
      assertEquals(1, list1.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CnosDBSchema.CnosDBTimeColumn cnosDBSchema_CnosDBTimeColumn0 = new CnosDBSchema.CnosDBTimeColumn();
      CnosDBSchema.CnosDBTagColumn cnosDBSchema_CnosDBTagColumn0 = new CnosDBSchema.CnosDBTagColumn("boolean");
      List<CnosDBSchema.CnosDBColumn> list0 = List.of((CnosDBSchema.CnosDBColumn) cnosDBSchema_CnosDBTimeColumn0, (CnosDBSchema.CnosDBColumn) cnosDBSchema_CnosDBTimeColumn0, (CnosDBSchema.CnosDBColumn) cnosDBSchema_CnosDBTimeColumn0, (CnosDBSchema.CnosDBColumn) cnosDBSchema_CnosDBTagColumn0);
      CnosDBSchema.CnosDBTable cnosDBSchema_CnosDBTable0 = new CnosDBSchema.CnosDBTable("boolean", list0);
      List<CnosDBSchema.CnosDBColumn> list1 = cnosDBSchema_CnosDBTable0.getRandomColumnsWithOnlyOneField();
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CnosDBSchema.CnosDBTimeColumn cnosDBSchema_CnosDBTimeColumn0 = new CnosDBSchema.CnosDBTimeColumn();
      CnosDBSchema.CnosDBColumn cnosDBSchema_CnosDBColumn0 = CnosDBSchema.CnosDBColumn.createDummy("VARCHAR");
      List<CnosDBSchema.CnosDBColumn> list0 = List.of(cnosDBSchema_CnosDBColumn0, cnosDBSchema_CnosDBColumn0, cnosDBSchema_CnosDBColumn0, (CnosDBSchema.CnosDBColumn) cnosDBSchema_CnosDBTimeColumn0);
      CnosDBSchema.CnosDBTable cnosDBSchema_CnosDBTable0 = new CnosDBSchema.CnosDBTable("bigint", list0);
      List<CnosDBSchema.CnosDBColumn> list1 = cnosDBSchema_CnosDBTable0.getRandomNonEmptyColumnSubset();
      assertEquals(2, list1.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<CnosDBSchema.CnosDBColumn> linkedList0 = new LinkedList<CnosDBSchema.CnosDBColumn>();
      CnosDBSchema.CnosDBTable cnosDBSchema_CnosDBTable0 = new CnosDBSchema.CnosDBTable("@^8L-gmX5c*f4v", linkedList0);
      // Undeclared exception!
      try { 
        cnosDBSchema_CnosDBTable0.getRandomColumnsWithOnlyOneField();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.TIMESTAMP;
      CnosDBSchema.CnosDBFieldColumn cnosDBSchema_CnosDBFieldColumn0 = null;
      try {
        cnosDBSchema_CnosDBFieldColumn0 = new CnosDBSchema.CnosDBFieldColumn("7", cnosDBSchema_CnosDBDataType0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        CnosDBSchema.getColumnType("htQb+#R@s");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // htQb+#R@s
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.getColumnType("bigint unsigned");
      assertEquals(CnosDBSchema.CnosDBDataType.UINT, cnosDBSchema_CnosDBDataType0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.getColumnType("unsigned");
      assertEquals(CnosDBSchema.CnosDBDataType.UINT, cnosDBSchema_CnosDBDataType0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.getColumnType("string");
      CnosDBSchema.CnosDBColumn cnosDBSchema_CnosDBColumn0 = new CnosDBSchema.CnosDBColumn("string", cnosDBSchema_CnosDBDataType0);
      assertEquals("string", cnosDBSchema_CnosDBColumn0.getName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.getColumnType("DOUBLE");
      assertEquals(CnosDBSchema.CnosDBDataType.DOUBLE, cnosDBSchema_CnosDBDataType0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.getColumnType("timestamp(nanosecond)");
      assertEquals(CnosDBSchema.CnosDBDataType.TIMESTAMP, cnosDBSchema_CnosDBDataType0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.getRandomTypeWithoutTimeStamp();
      assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBSchema_CnosDBDataType0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.getRandomType();
      assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBSchema_CnosDBDataType0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<CnosDBSchema.CnosDBColumn, CnosDBConstant> hashMap0 = new HashMap<CnosDBSchema.CnosDBColumn, CnosDBConstant>();
      CnosDBSchema.CnosDBRowValue cnosDBSchema_CnosDBRowValue0 = new CnosDBSchema.CnosDBRowValue((CnosDBSchema.CnosDBTables) null, hashMap0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<CnosDBSchema.CnosDBTable> linkedList0 = new LinkedList<CnosDBSchema.CnosDBTable>();
      CnosDBSchema.CnosDBTables cnosDBSchema_CnosDBTables0 = new CnosDBSchema.CnosDBTables(linkedList0);
      CnosDBConnection cnosDBConnection0 = new CnosDBConnection((CnosDBClient) null);
      CnosDBSchema.CnosDBRowValue cnosDBSchema_CnosDBRowValue0 = cnosDBSchema_CnosDBTables0.getRandomRowValue(cnosDBConnection0);
      assertNull(cnosDBSchema_CnosDBRowValue0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CnosDBSchema.getColumnType("bigint");
      Random.setNextRandom(2290);
      CnosDBSchema.CnosDBTable[] cnosDBSchema_CnosDBTableArray0 = new CnosDBSchema.CnosDBTable[4];
      CnosDBSchema.CnosDBTable cnosDBSchema_CnosDBTable0 = mock(CnosDBSchema.CnosDBTable.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(cnosDBSchema_CnosDBTable0).getColumns();
      cnosDBSchema_CnosDBTableArray0[0] = cnosDBSchema_CnosDBTable0;
      cnosDBSchema_CnosDBTableArray0[1] = cnosDBSchema_CnosDBTable0;
      cnosDBSchema_CnosDBTableArray0[2] = cnosDBSchema_CnosDBTable0;
      cnosDBSchema_CnosDBTableArray0[3] = cnosDBSchema_CnosDBTable0;
      List<CnosDBSchema.CnosDBTable> list0 = List.of(cnosDBSchema_CnosDBTableArray0);
      CnosDBSchema cnosDBSchema0 = new CnosDBSchema(list0, "");
      // Undeclared exception!
      try { 
        cnosDBSchema0.getRandomTableNonEmptyTables();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<CnosDBSchema.CnosDBColumn> linkedList0 = new LinkedList<CnosDBSchema.CnosDBColumn>();
      CnosDBSchema.CnosDBTable cnosDBSchema_CnosDBTable0 = new CnosDBSchema.CnosDBTable("bigint", linkedList0);
      List<CnosDBSchema.CnosDBTable> list0 = List.of(cnosDBSchema_CnosDBTable0, cnosDBSchema_CnosDBTable0, cnosDBSchema_CnosDBTable0, cnosDBSchema_CnosDBTable0, cnosDBSchema_CnosDBTable0, cnosDBSchema_CnosDBTable0, cnosDBSchema_CnosDBTable0, cnosDBSchema_CnosDBTable0, cnosDBSchema_CnosDBTable0);
      CnosDBSchema cnosDBSchema0 = new CnosDBSchema(list0, (String) null);
      String string0 = cnosDBSchema0.getDatabaseName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<CnosDBSchema.CnosDBColumn> linkedList0 = new LinkedList<CnosDBSchema.CnosDBColumn>();
      CnosDBSchema.CnosDBTable cnosDBSchema_CnosDBTable0 = new CnosDBSchema.CnosDBTable("0123456789", linkedList0);
      CnosDBGlobalState cnosDBGlobalState0 = new CnosDBGlobalState();
      long long0 = cnosDBSchema_CnosDBTable0.getNrRows(cnosDBGlobalState0);
      assertEquals(0L, long0);
  }
}
