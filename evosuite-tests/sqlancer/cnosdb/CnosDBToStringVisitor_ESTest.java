/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 10 15:12:22 GMT 2025
 */

package sqlancer.cnosdb;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;
import sqlancer.Randomly;
import sqlancer.cnosdb.CnosDBCompoundDataType;
import sqlancer.cnosdb.CnosDBGlobalState;
import sqlancer.cnosdb.CnosDBSchema;
import sqlancer.cnosdb.CnosDBToStringVisitor;
import sqlancer.cnosdb.ast.CnosDBAggregate;
import sqlancer.cnosdb.ast.CnosDBAlias;
import sqlancer.cnosdb.ast.CnosDBBetweenOperation;
import sqlancer.cnosdb.ast.CnosDBBinaryComparisonOperation;
import sqlancer.cnosdb.ast.CnosDBBinaryLogicalOperation;
import sqlancer.cnosdb.ast.CnosDBCastOperation;
import sqlancer.cnosdb.ast.CnosDBColumnValue;
import sqlancer.cnosdb.ast.CnosDBConstant;
import sqlancer.cnosdb.ast.CnosDBExpression;
import sqlancer.cnosdb.ast.CnosDBFunction;
import sqlancer.cnosdb.ast.CnosDBFunctionWithUnknownResult;
import sqlancer.cnosdb.ast.CnosDBInOperation;
import sqlancer.cnosdb.ast.CnosDBJoin;
import sqlancer.cnosdb.ast.CnosDBLikeOperation;
import sqlancer.cnosdb.ast.CnosDBOrderByTerm;
import sqlancer.cnosdb.ast.CnosDBPostfixOperation;
import sqlancer.cnosdb.ast.CnosDBPostfixText;
import sqlancer.cnosdb.ast.CnosDBPrefixOperation;
import sqlancer.cnosdb.ast.CnosDBSelect;
import sqlancer.cnosdb.ast.CnosDBSimilarTo;
import sqlancer.cnosdb.gen.CnosDBExpressionGenerator;
import sqlancer.common.visitor.BinaryOperation;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CnosDBToStringVisitor_ESTest extends CnosDBToStringVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      assertEquals("", cnosDBToStringVisitor0.get());
      
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      List<CnosDBExpression> list0 = List.of((CnosDBExpression) cnosDBConstant0, (CnosDBExpression) cnosDBConstant0);
      CnosDBJoin[] cnosDBJoinArray0 = new CnosDBJoin[7];
      CnosDBJoin.CnosDBJoinType cnosDBJoin_CnosDBJoinType0 = CnosDBJoin.CnosDBJoinType.LEFT;
      CnosDBJoin cnosDBJoin0 = new CnosDBJoin(cnosDBConstant0, cnosDBConstant0, cnosDBJoin_CnosDBJoinType0);
      cnosDBJoinArray0[0] = cnosDBJoin0;
      CnosDBJoin cnosDBJoin1 = new CnosDBJoin(cnosDBConstant0, cnosDBJoin0, cnosDBJoin_CnosDBJoinType0);
      cnosDBJoinArray0[1] = cnosDBJoin1;
      CnosDBJoin.CnosDBJoinType cnosDBJoin_CnosDBJoinType1 = CnosDBJoin.CnosDBJoinType.INNER;
      CnosDBJoin cnosDBJoin2 = new CnosDBJoin(cnosDBJoin1, cnosDBJoin0, cnosDBJoin_CnosDBJoinType1);
      cnosDBJoinArray0[2] = cnosDBJoin2;
      CnosDBJoin cnosDBJoin3 = new CnosDBJoin(cnosDBJoin0, cnosDBJoin2, cnosDBJoin_CnosDBJoinType0);
      cnosDBJoinArray0[3] = cnosDBJoin3;
      CnosDBJoin cnosDBJoin4 = new CnosDBJoin(cnosDBJoin3, cnosDBJoin0, cnosDBJoin_CnosDBJoinType0);
      cnosDBJoinArray0[4] = cnosDBJoin4;
      CnosDBJoin cnosDBJoin5 = new CnosDBJoin(cnosDBJoin3, (CnosDBExpression) null, cnosDBJoin_CnosDBJoinType0);
      cnosDBJoinArray0[5] = cnosDBJoin5;
      CnosDBJoin cnosDBJoin6 = new CnosDBJoin(cnosDBJoin2, cnosDBJoin0, cnosDBJoin_CnosDBJoinType0);
      cnosDBJoinArray0[6] = cnosDBJoin6;
      List<CnosDBJoin> list1 = Randomly.nonEmptySubset(cnosDBJoinArray0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBSelect cnosDBSelect1 = new CnosDBSelect();
      cnosDBSelect1.setJoinClauses(list1);
      cnosDBSelect1.setFetchColumns(list0);
      cnosDBSelect1.setFromList(list0);
      cnosDBToStringVisitor0.visit(cnosDBSelect1);
      assertEquals("SELECT ALL FALSE, FALSE FROM FALSE, FALSE LEFT OUTER JOIN FALSE ON FALSE", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant.DoubleConstant cnosDBConstant_DoubleConstant0 = new CnosDBConstant.DoubleConstant(696.9869);
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[4];
      cnosDBExpressionArray0[0] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      List<CnosDBExpression> list0 = Randomly.subset(1, cnosDBExpressionArray0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBSelect0.setFetchColumns(list0);
      cnosDBSelect0.setOffsetClause(cnosDBConstant_DoubleConstant0);
      cnosDBSelect0.setFromList(list0);
      cnosDBToStringVisitor0.visit(cnosDBSelect0);
      assertEquals("SELECT 696.9868999999999914507498033344745635986328125 FROM 696.9868999999999914507498033344745635986328125 OFFSET 696.9868999999999914507498033344745635986328125", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant.DoubleConstant cnosDBConstant_DoubleConstant0 = new CnosDBConstant.DoubleConstant(696.9869);
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[3];
      cnosDBExpressionArray0[0] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      List<CnosDBExpression> list0 = Randomly.subset(1, cnosDBExpressionArray0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBSelect0.setFetchColumns(list0);
      cnosDBSelect0.setFromList(list0);
      cnosDBToStringVisitor0.visit(cnosDBSelect0);
      System.setCurrentTimeMillis(1);
      Random.setNextRandom(1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant.DoubleConstant cnosDBConstant_DoubleConstant0 = new CnosDBConstant.DoubleConstant(696.9869);
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[7];
      cnosDBExpressionArray0[0] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[1] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[2] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[3] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[4] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[5] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[6] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      List<CnosDBExpression> list0 = Randomly.subset(2, cnosDBExpressionArray0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBJoin[] cnosDBJoinArray0 = new CnosDBJoin[9];
      CnosDBJoin.CnosDBJoinType cnosDBJoin_CnosDBJoinType0 = CnosDBJoin.CnosDBJoinType.FULL;
      CnosDBJoin cnosDBJoin0 = new CnosDBJoin(cnosDBConstant_DoubleConstant0, (CnosDBExpression) null, cnosDBJoin_CnosDBJoinType0);
      cnosDBJoinArray0[0] = cnosDBJoin0;
      CnosDBJoin cnosDBJoin1 = new CnosDBJoin(cnosDBExpressionArray0[3], cnosDBExpressionArray0[3], cnosDBJoin_CnosDBJoinType0);
      cnosDBJoinArray0[1] = cnosDBJoin1;
      CnosDBJoin cnosDBJoin2 = new CnosDBJoin(cnosDBExpressionArray0[1], cnosDBExpressionArray0[5], cnosDBJoin_CnosDBJoinType0);
      cnosDBJoinArray0[2] = cnosDBJoin2;
      CnosDBJoin cnosDBJoin3 = new CnosDBJoin(cnosDBExpressionArray0[6], cnosDBExpressionArray0[6], cnosDBJoin_CnosDBJoinType0);
      cnosDBJoinArray0[3] = cnosDBJoin3;
      CnosDBJoin cnosDBJoin4 = new CnosDBJoin(cnosDBJoin0, cnosDBExpressionArray0[6], cnosDBJoin_CnosDBJoinType0);
      cnosDBJoinArray0[4] = cnosDBJoin4;
      CnosDBJoin.CnosDBJoinType cnosDBJoin_CnosDBJoinType1 = CnosDBJoin.CnosDBJoinType.INNER;
      CnosDBJoin cnosDBJoin5 = new CnosDBJoin(cnosDBJoin1, cnosDBExpressionArray0[3], cnosDBJoin_CnosDBJoinType1);
      cnosDBJoinArray0[5] = cnosDBJoin5;
      CnosDBSchema.CnosDBColumn cnosDBSchema_CnosDBColumn0 = CnosDBSchema.CnosDBColumn.createDummy("Ay+m0+;&I1hU5+rX");
      CnosDBColumnValue cnosDBColumnValue0 = CnosDBColumnValue.create(cnosDBSchema_CnosDBColumn0);
      CnosDBJoin cnosDBJoin6 = new CnosDBJoin(cnosDBExpressionArray0[1], cnosDBColumnValue0, cnosDBJoin_CnosDBJoinType1);
      cnosDBJoinArray0[6] = cnosDBJoin6;
      CnosDBJoin.CnosDBJoinType cnosDBJoin_CnosDBJoinType2 = CnosDBJoin.CnosDBJoinType.INNER;
      CnosDBJoin cnosDBJoin7 = new CnosDBJoin(cnosDBExpressionArray0[2], cnosDBExpressionArray0[2], cnosDBJoin_CnosDBJoinType2);
      cnosDBJoinArray0[7] = cnosDBJoin7;
      CnosDBJoin.CnosDBJoinType cnosDBJoin_CnosDBJoinType3 = CnosDBJoin.CnosDBJoinType.INNER;
      CnosDBJoin cnosDBJoin8 = new CnosDBJoin(cnosDBJoin2, cnosDBJoin3, cnosDBJoin_CnosDBJoinType3);
      cnosDBJoinArray0[8] = cnosDBJoin8;
      List<CnosDBJoin> list1 = Randomly.nonEmptySubset(cnosDBJoinArray0);
      cnosDBSelect0.setJoinClauses(list1);
      cnosDBSelect0.setFetchColumns(list0);
      cnosDBSelect0.setFromList(list0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBSelect0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // sqlancer.cnosdb.ast.CnosDBJoin@5
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      List<CnosDBExpression> list0 = List.of((CnosDBExpression) cnosDBConstant0, (CnosDBExpression) cnosDBConstant0);
      CnosDBJoin[] cnosDBJoinArray0 = new CnosDBJoin[9];
      List<CnosDBJoin> list1 = Randomly.nonEmptySubset(cnosDBJoinArray0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBSelect0.setJoinClauses(list1);
      cnosDBSelect0.setFetchColumns(list0);
      cnosDBSelect0.setFromList(list0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBSelect0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      List<CnosDBExpression> list0 = List.of((CnosDBExpression) cnosDBConstant0, (CnosDBExpression) cnosDBConstant0);
      CnosDBSchema.CnosDBColumn.createDummy("");
      CnosDBJoin.CnosDBJoinType cnosDBJoin_CnosDBJoinType0 = CnosDBJoin.CnosDBJoinType.FULL;
      CnosDBJoin cnosDBJoin0 = new CnosDBJoin(cnosDBConstant0, cnosDBConstant0, cnosDBJoin_CnosDBJoinType0);
      CnosDBConstant cnosDBConstant1 = CnosDBConstant.createTrue();
      CnosDBJoin.CnosDBJoinType cnosDBJoin_CnosDBJoinType1 = CnosDBJoin.CnosDBJoinType.FULL;
      CnosDBJoin cnosDBJoin1 = new CnosDBJoin(cnosDBConstant0, cnosDBConstant1, cnosDBJoin_CnosDBJoinType1);
      CnosDBJoin[] cnosDBJoinArray0 = new CnosDBJoin[2];
      cnosDBJoinArray0[0] = cnosDBJoin1;
      cnosDBJoinArray0[1] = cnosDBJoin1;
      List<CnosDBJoin> list1 = Randomly.nonEmptySubset(cnosDBJoinArray0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBSelect0.setJoinClauses(list1);
      cnosDBSelect0.setFetchColumns(list0);
      cnosDBSelect0.setFromList(list0);
      cnosDBToStringVisitor0.visit(cnosDBSelect0);
      System.setCurrentTimeMillis((-1114L));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      List<CnosDBExpression> list0 = List.of((CnosDBExpression) cnosDBConstant0, (CnosDBExpression) cnosDBConstant0);
      CnosDBSchema.CnosDBColumn.createDummy("*");
      CnosDBJoin.CnosDBJoinType cnosDBJoin_CnosDBJoinType0 = CnosDBJoin.CnosDBJoinType.INNER;
      CnosDBJoin cnosDBJoin0 = new CnosDBJoin(cnosDBConstant0, cnosDBConstant0, cnosDBJoin_CnosDBJoinType0);
      CnosDBJoin[] cnosDBJoinArray0 = new CnosDBJoin[7];
      cnosDBJoinArray0[0] = cnosDBJoin0;
      CnosDBJoin.CnosDBJoinType cnosDBJoin_CnosDBJoinType1 = CnosDBJoin.CnosDBJoinType.INNER;
      CnosDBJoin cnosDBJoin1 = new CnosDBJoin(cnosDBJoin0, cnosDBConstant0, cnosDBJoin_CnosDBJoinType1);
      List<CnosDBJoin> list1 = Randomly.nonEmptySubset(cnosDBJoinArray0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBSelect0.setJoinClauses(list1);
      cnosDBSelect0.setFetchColumns(list0);
      cnosDBSelect0.setFromList(list0);
      cnosDBToStringVisitor0.visit(cnosDBSelect0);
      assertEquals("SELECT ALL FALSE, FALSE FROM FALSE, FALSE JOIN FALSE ON FALSE", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      List<CnosDBExpression> list0 = List.of((CnosDBExpression) cnosDBConstant0, (CnosDBExpression) cnosDBConstant0);
      CnosDBJoin.CnosDBJoinType cnosDBJoin_CnosDBJoinType0 = CnosDBJoin.CnosDBJoinType.LEFT;
      CnosDBJoin cnosDBJoin0 = new CnosDBJoin(cnosDBConstant0, cnosDBConstant0, cnosDBJoin_CnosDBJoinType0);
      CnosDBJoin[] cnosDBJoinArray0 = new CnosDBJoin[1];
      cnosDBJoinArray0[0] = cnosDBJoin0;
      List<CnosDBJoin> list1 = Randomly.nonEmptySubset(cnosDBJoinArray0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBSelect0.setJoinClauses(list1);
      cnosDBSelect0.setFetchColumns(list0);
      cnosDBSelect0.setFromList(list0);
      cnosDBToStringVisitor0.visit(cnosDBSelect0);
      assertEquals("SELECT ALL FALSE, FALSE FROM FALSE, FALSE LEFT OUTER JOIN FALSE ON FALSE", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      List<CnosDBExpression> list0 = List.of((CnosDBExpression) cnosDBConstant0, (CnosDBExpression) cnosDBConstant0);
      CnosDBJoin.CnosDBJoinType cnosDBJoin_CnosDBJoinType0 = CnosDBJoin.CnosDBJoinType.RIGHT;
      CnosDBJoin cnosDBJoin0 = new CnosDBJoin(cnosDBConstant0, cnosDBConstant0, cnosDBJoin_CnosDBJoinType0);
      CnosDBJoin[] cnosDBJoinArray0 = new CnosDBJoin[5];
      cnosDBJoinArray0[0] = cnosDBJoin0;
      cnosDBJoinArray0[1] = cnosDBJoin0;
      cnosDBJoinArray0[2] = cnosDBJoin0;
      cnosDBJoinArray0[3] = cnosDBJoin0;
      cnosDBJoinArray0[4] = cnosDBJoin0;
      List<CnosDBJoin> list1 = Randomly.nonEmptySubset(cnosDBJoinArray0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBSelect0.setJoinClauses(list1);
      cnosDBSelect0.setFetchColumns(list0);
      cnosDBSelect0.setFromList(list0);
      cnosDBToStringVisitor0.visit(cnosDBSelect0);
      assertEquals("SELECT ALL FALSE, FALSE FROM FALSE, FALSE RIGHT OUTER JOIN FALSE ON FALSE", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      List<CnosDBExpression> list0 = List.of((CnosDBExpression) cnosDBConstant0, (CnosDBExpression) cnosDBConstant0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBSelect0.setFetchColumns(list0);
      cnosDBSelect0.setFromList(list0);
      cnosDBSelect0.setGroupByExpressions(list0);
      cnosDBToStringVisitor0.visit(cnosDBSelect0);
      cnosDBToStringVisitor0.visit(cnosDBSelect0);
      assertEquals("SELECT ALL FALSE, FALSE FROM FALSE, FALSE GROUP BY FALSE, FALSESELECT FALSE, FALSE FROM FALSE, FALSE GROUP BY FALSE, FALSE", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      List<CnosDBExpression> list0 = List.of((CnosDBExpression) cnosDBConstant0, (CnosDBExpression) cnosDBConstant0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBSelect0.setHavingClause(cnosDBConstant0);
      cnosDBSelect0.setFetchColumns(list0);
      cnosDBSelect0.setFromList(list0);
      cnosDBToStringVisitor0.visit(cnosDBSelect0);
      assertEquals("SELECT ALL FALSE, FALSE FROM FALSE, FALSE HAVING FALSE", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant.DoubleConstant cnosDBConstant_DoubleConstant0 = new CnosDBConstant.DoubleConstant(696.9869);
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[8];
      cnosDBExpressionArray0[0] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[1] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[2] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[3] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[4] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[5] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[6] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[7] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      List<CnosDBExpression> list0 = Randomly.subset(8, cnosDBExpressionArray0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBSelect0.setFetchColumns(list0);
      cnosDBSelect0.setOffsetClause(cnosDBExpressionArray0[6]);
      cnosDBSelect0.setFromList(list0);
      CnosDBSelect.CnosDBSubquery cnosDBSelect_CnosDBSubquery0 = new CnosDBSelect.CnosDBSubquery(cnosDBSelect0, "v%B5D8Q!voU ");
      cnosDBToStringVisitor0.visit(cnosDBSelect_CnosDBSubquery0);
      CnosDBBinaryComparisonOperation.CnosDBBinaryComparisonOperator cnosDBBinaryComparisonOperation_CnosDBBinaryComparisonOperator0 = CnosDBBinaryComparisonOperation.CnosDBBinaryComparisonOperator.LESS;
      CnosDBBinaryComparisonOperation cnosDBBinaryComparisonOperation0 = new CnosDBBinaryComparisonOperation(cnosDBExpressionArray0[2], cnosDBConstant_DoubleConstant0, cnosDBBinaryComparisonOperation_CnosDBBinaryComparisonOperator0);
      CnosDBBinaryComparisonOperation.CnosDBBinaryComparisonOperator cnosDBBinaryComparisonOperation_CnosDBBinaryComparisonOperator1 = CnosDBBinaryComparisonOperation.CnosDBBinaryComparisonOperator.EQUALS;
      CnosDBBinaryComparisonOperation cnosDBBinaryComparisonOperation1 = new CnosDBBinaryComparisonOperation(cnosDBExpressionArray0[3], cnosDBExpressionArray0[6], cnosDBBinaryComparisonOperation_CnosDBBinaryComparisonOperator1);
      CnosDBToStringVisitor cnosDBToStringVisitor1 = new CnosDBToStringVisitor();
      cnosDBToStringVisitor0.visit((BinaryOperation<CnosDBExpression>) cnosDBBinaryComparisonOperation1);
      CnosDBFunctionWithUnknownResult cnosDBFunctionWithUnknownResult0 = CnosDBFunctionWithUnknownResult.SIN;
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.BOOLEAN;
      cnosDBToStringVisitor1.visit((BinaryOperation<CnosDBExpression>) cnosDBBinaryComparisonOperation0);
      CnosDBFunction cnosDBFunction0 = new CnosDBFunction(cnosDBFunctionWithUnknownResult0, cnosDBSchema_CnosDBDataType0, cnosDBExpressionArray0);
      cnosDBToStringVisitor1.visit(cnosDBFunction0);
      Random.setNextRandom(8);
      cnosDBToStringVisitor0.visit(cnosDBFunction0);
      assertEquals(CnosDBSchema.CnosDBDataType.BOOLEAN, cnosDBFunction0.getExpressionType());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      List<CnosDBExpression> list0 = List.of((CnosDBExpression) cnosDBConstant0, (CnosDBExpression) cnosDBConstant0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBSelect0.setOffsetClause(cnosDBConstant0);
      cnosDBSelect0.setFetchColumns(list0);
      cnosDBSelect0.setFromList(list0);
      cnosDBToStringVisitor0.visit(cnosDBSelect0);
      cnosDBToStringVisitor0.get();
      assertEquals("SELECT ALL FALSE, FALSE FROM FALSE, FALSE OFFSET FALSE", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant.DoubleConstant cnosDBConstant_DoubleConstant0 = new CnosDBConstant.DoubleConstant((-3683.370172));
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[3];
      cnosDBExpressionArray0[0] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      CnosDBConstant.createTrue();
      List<CnosDBExpression> list0 = Randomly.subset(1, cnosDBExpressionArray0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBSelect0.setGroupByExpressions(list0);
      cnosDBSelect0.setFetchColumns(list0);
      cnosDBSelect0.setFromList(list0);
      cnosDBToStringVisitor0.visit(cnosDBSelect0);
      cnosDBToStringVisitor0.get();
      assertEquals("SELECT -3683.3701719999999113497324287891387939453125 FROM -3683.3701719999999113497324287891387939453125 GROUP BY -3683.3701719999999113497324287891387939453125", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      List<CnosDBExpression> list0 = List.of((CnosDBExpression) cnosDBConstant0, (CnosDBExpression) cnosDBConstant0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBConstant.CnosDBNullConstant cnosDBConstant_CnosDBNullConstant0 = new CnosDBConstant.CnosDBNullConstant();
      cnosDBSelect0.setLimitClause(cnosDBConstant_CnosDBNullConstant0);
      CnosDBAggregate.CnosDBAggregateFunction cnosDBAggregate_CnosDBAggregateFunction0 = CnosDBAggregate.CnosDBAggregateFunction.MIN;
      CnosDBAggregate cnosDBAggregate0 = new CnosDBAggregate(list0, cnosDBAggregate_CnosDBAggregateFunction0);
      cnosDBToStringVisitor0.visit(cnosDBAggregate0);
      cnosDBSelect0.setFetchColumns(list0);
      cnosDBSelect0.setFromList(list0);
      cnosDBToStringVisitor0.visit(cnosDBSelect0);
      assertEquals("MIN(FALSE, FALSE)SELECT ALL FALSE, FALSE FROM FALSE, FALSE LIMIT NULL", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant.DoubleConstant cnosDBConstant_DoubleConstant0 = new CnosDBConstant.DoubleConstant(696.9869);
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[8];
      cnosDBExpressionArray0[0] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[1] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[2] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[3] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[4] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[5] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[6] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[7] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      List<CnosDBExpression> list0 = Randomly.subset(8, cnosDBExpressionArray0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBSelect0.setFetchColumns(list0);
      cnosDBSelect0.setFromList(list0);
      CnosDBSelect.CnosDBSubquery cnosDBSelect_CnosDBSubquery0 = new CnosDBSelect.CnosDBSubquery(cnosDBSelect0, "v%B5D8Q!voU ");
      cnosDBToStringVisitor0.visit(cnosDBSelect_CnosDBSubquery0);
      CnosDBBinaryComparisonOperation.CnosDBBinaryComparisonOperator cnosDBBinaryComparisonOperation_CnosDBBinaryComparisonOperator0 = CnosDBBinaryComparisonOperation.CnosDBBinaryComparisonOperator.LESS;
      CnosDBBinaryComparisonOperation cnosDBBinaryComparisonOperation0 = new CnosDBBinaryComparisonOperation(cnosDBExpressionArray0[2], cnosDBConstant_DoubleConstant0, cnosDBBinaryComparisonOperation_CnosDBBinaryComparisonOperator0);
      CnosDBToStringVisitor cnosDBToStringVisitor1 = new CnosDBToStringVisitor();
      cnosDBToStringVisitor1.visit((BinaryOperation<CnosDBExpression>) cnosDBBinaryComparisonOperation0);
      CnosDBFunctionWithUnknownResult cnosDBFunctionWithUnknownResult0 = CnosDBFunctionWithUnknownResult.DATE_PART;
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.BOOLEAN;
      CnosDBFunction cnosDBFunction0 = new CnosDBFunction(cnosDBFunctionWithUnknownResult0, cnosDBSchema_CnosDBDataType0, cnosDBExpressionArray0);
      cnosDBToStringVisitor1.visit(cnosDBFunction0);
      cnosDBToStringVisitor1.visit(cnosDBFunction0);
      System.setCurrentTimeMillis(8);
      cnosDBToStringVisitor0.visit(cnosDBSelect0);
      assertNull(cnosDBSelect0.getExpressionType());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant.DoubleConstant cnosDBConstant_DoubleConstant0 = new CnosDBConstant.DoubleConstant((-3683.370172));
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[3];
      cnosDBExpressionArray0[0] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      CnosDBConstant.createTrue();
      List<CnosDBExpression> list0 = Randomly.subset(1, cnosDBExpressionArray0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBSelect0.setFetchColumns(list0);
      cnosDBSelect0.setHavingClause(cnosDBConstant_DoubleConstant0);
      cnosDBSelect0.setFromList(list0);
      cnosDBToStringVisitor0.visit(cnosDBSelect0);
      assertEquals("SELECT -3683.3701719999999113497324287891387939453125 FROM -3683.3701719999999113497324287891387939453125 HAVING -3683.3701719999999113497324287891387939453125", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      List<CnosDBExpression> list0 = List.of((CnosDBExpression) cnosDBConstant0, (CnosDBExpression) cnosDBConstant0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBSelect0.setFetchColumns(list0);
      cnosDBSelect0.setFromList(list0);
      cnosDBToStringVisitor0.visit(cnosDBSelect0);
      assertEquals("SELECT ALL FALSE, FALSE FROM FALSE, FALSE", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[8];
      List<CnosDBExpression> list0 = Randomly.subset(8, cnosDBExpressionArray0);
      List<CnosDBExpression> list1 = Randomly.nonEmptySubset(list0, 8);
      CnosDBAggregate.CnosDBAggregateFunction cnosDBAggregate_CnosDBAggregateFunction0 = CnosDBAggregate.CnosDBAggregateFunction.COUNT;
      CnosDBAggregate cnosDBAggregate0 = new CnosDBAggregate(list1, cnosDBAggregate_CnosDBAggregateFunction0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBAggregate0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[11];
      List<CnosDBExpression> list0 = Randomly.subset(8, cnosDBExpressionArray0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBSelect0.setFetchColumns(list0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBSelect0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant.DoubleConstant cnosDBConstant_DoubleConstant0 = new CnosDBConstant.DoubleConstant(696.9869);
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[8];
      cnosDBExpressionArray0[0] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[1] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[2] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[3] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[4] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[5] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[6] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[3] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      List<CnosDBExpression> list0 = Randomly.subset(8, cnosDBExpressionArray0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBSelect0.setFetchColumns(list0);
      CnosDBSelect.CnosDBSubquery cnosDBSelect_CnosDBSubquery0 = new CnosDBSelect.CnosDBSubquery(cnosDBSelect0, (String) null);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBSelect0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[8];
      List<CnosDBExpression> list0 = Randomly.subset(8, cnosDBExpressionArray0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBSelect0.setFetchColumns(list0);
      CnosDBSelect.CnosDBSubquery cnosDBSelect_CnosDBSubquery0 = new CnosDBSelect.CnosDBSubquery(cnosDBSelect0, "QoQTN!(-i?$:");
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBSelect_CnosDBSubquery0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant.DoubleConstant cnosDBConstant_DoubleConstant0 = new CnosDBConstant.DoubleConstant(696.9869);
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[8];
      cnosDBExpressionArray0[0] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[1] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[2] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[3] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[4] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[5] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[6] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      cnosDBExpressionArray0[7] = (CnosDBExpression) cnosDBConstant_DoubleConstant0;
      List<CnosDBExpression> list0 = Randomly.subset(8, cnosDBExpressionArray0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBSelect0.setFetchColumns(list0);
      CnosDBSelect.CnosDBSubquery cnosDBSelect_CnosDBSubquery0 = new CnosDBSelect.CnosDBSubquery(cnosDBSelect0, "v%B5D8Q!voU ");
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBSelect_CnosDBSubquery0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[1];
      CnosDBFunctionWithUnknownResult cnosDBFunctionWithUnknownResult0 = CnosDBFunctionWithUnknownResult.DATE_PART;
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.DOUBLE;
      CnosDBFunction cnosDBFunction0 = new CnosDBFunction(cnosDBFunctionWithUnknownResult0, cnosDBSchema_CnosDBDataType0, cnosDBExpressionArray0);
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBFunction0, cnosDBCompoundDataType0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBCastOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CnosDBSelect.CnosDBSubquery cnosDBSelect_CnosDBSubquery0 = null;
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.BOOLEAN;
      CnosDBPostfixText cnosDBPostfixText0 = new CnosDBPostfixText((CnosDBExpression) null, "(", cnosDBSchema_CnosDBDataType0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBPostfixText0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBSelect.SelectType cnosDBSelect_SelectType0 = CnosDBSelect.SelectType.DISTINCT;
      CnosDBBetweenOperation cnosDBBetweenOperation0 = new CnosDBBetweenOperation(cnosDBSelect0, cnosDBSelect0, cnosDBSelect0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBBetweenOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBColumnValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTimeStampConstant(16L);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.UINT;
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType1 = CnosDBSchema.CnosDBDataType.TIMESTAMP;
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType1);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant0, cnosDBCompoundDataType0);
      CnosDBFunctionWithUnknownResult cnosDBFunctionWithUnknownResult0 = CnosDBFunctionWithUnknownResult.LPAD2;
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[1];
      cnosDBExpressionArray0[0] = (CnosDBExpression) cnosDBCastOperation0;
      CnosDBFunction cnosDBFunction0 = new CnosDBFunction(cnosDBFunctionWithUnknownResult0, cnosDBSchema_CnosDBDataType0, cnosDBExpressionArray0);
      cnosDBToStringVisitor0.visit(cnosDBFunction0);
      assertEquals("lpad(CAST( CAST (16 AS TIMESTAMP) AS TIMESTAMP))", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTrue();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.TIMESTAMP;
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant0, cnosDBCompoundDataType0);
      cnosDBToStringVisitor0.visit(cnosDBCastOperation0);
      assertEquals("CAST( TRUE AS TIMESTAMP)", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBSelect0.getDistinctOnClause();
      CnosDBOrderByTerm.CnosDBOrder cnosDBOrderByTerm_CnosDBOrder0 = CnosDBOrderByTerm.CnosDBOrder.DESC;
      CnosDBOrderByTerm cnosDBOrderByTerm0 = new CnosDBOrderByTerm((CnosDBExpression) null, cnosDBOrderByTerm_CnosDBOrder0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBOrderByTerm0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBLikeOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.visitor.ToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect.CnosDBSubquery cnosDBSelect_CnosDBSubquery0 = null;
      CnosDBToStringVisitor cnosDBToStringVisitor1 = new CnosDBToStringVisitor();
      List<CnosDBExpression> list0 = List.of();
      CnosDBInOperation cnosDBInOperation0 = new CnosDBInOperation((CnosDBExpression) null, list0, true);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor1.visit(cnosDBInOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBSelect cnosDBSelect1 = new CnosDBSelect();
      CnosDBOrderByTerm.CnosDBOrder cnosDBOrderByTerm_CnosDBOrder0 = CnosDBOrderByTerm.CnosDBOrder.ASC;
      CnosDBOrderByTerm cnosDBOrderByTerm0 = new CnosDBOrderByTerm(cnosDBSelect1, cnosDBOrderByTerm_CnosDBOrder0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBOrderByTerm0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBLikeOperation cnosDBLikeOperation0 = new CnosDBLikeOperation((CnosDBExpression) null, (CnosDBExpression) null);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBLikeOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBConstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      String string0 = "@Ql0E>";
      List<CnosDBExpression> list0 = List.of((CnosDBExpression) cnosDBSelect0, (CnosDBExpression) cnosDBSelect0);
      CnosDBInOperation cnosDBInOperation0 = new CnosDBInOperation(cnosDBSelect0, list0, true);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBInOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBSelect.SelectType cnosDBSelect_SelectType0 = CnosDBSelect.SelectType.ALL;
      cnosDBSelect0.setSelectOption(cnosDBSelect_SelectType0);
      List<CnosDBExpression> list0 = cnosDBSelect0.getJoinList();
      CnosDBAggregate.CnosDBAggregateFunction cnosDBAggregate_CnosDBAggregateFunction0 = CnosDBAggregate.CnosDBAggregateFunction.COVAR_SAMP;
      CnosDBAggregate cnosDBAggregate0 = new CnosDBAggregate(list0, cnosDBAggregate_CnosDBAggregateFunction0);
      cnosDBToStringVisitor0.visit(cnosDBAggregate0);
      CnosDBConstant.CnosDBNullConstant cnosDBConstant_CnosDBNullConstant0 = new CnosDBConstant.CnosDBNullConstant();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.UINT;
      cnosDBConstant_CnosDBNullConstant0.cast(cnosDBSchema_CnosDBDataType0);
      Random.setNextRandom(4924);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType1 = CnosDBSchema.CnosDBDataType.INT;
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType1);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant_CnosDBNullConstant0, cnosDBCompoundDataType0);
      CnosDBToStringVisitor cnosDBToStringVisitor1 = new CnosDBToStringVisitor();
      cnosDBToStringVisitor1.visit(cnosDBCastOperation0);
      assertEquals("CAST( NULL AS BIGINT)", cnosDBToStringVisitor1.get());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect.SelectType cnosDBSelect_SelectType0 = CnosDBSelect.SelectType.DISTINCT;
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visitSpecific((CnosDBExpression) cnosDBSelect0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBSimilarTo cnosDBSimilarTo0 = new CnosDBSimilarTo(cnosDBSelect0, cnosDBSelect0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBSimilarTo0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBSelect) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      String string0 = "@Ql0E>";
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.DOUBLE;
      CnosDBPostfixText cnosDBPostfixText0 = new CnosDBPostfixText(cnosDBSelect0, "@Ql0E>", cnosDBSchema_CnosDBDataType0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBPostfixText0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBAlias cnosDBAlias0 = new CnosDBAlias((CnosDBExpression) null, "TRIM");
      CnosDBBinaryLogicalOperation.BinaryLogicalOperator cnosDBBinaryLogicalOperation_BinaryLogicalOperator0 = CnosDBBinaryLogicalOperation.BinaryLogicalOperator.AND;
      CnosDBBinaryLogicalOperation cnosDBBinaryLogicalOperation0 = new CnosDBBinaryLogicalOperation(cnosDBAlias0, cnosDBAlias0, cnosDBBinaryLogicalOperation_BinaryLogicalOperator0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBBinaryLogicalOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBAggregate.CnosDBAggregateFunction cnosDBAggregate_CnosDBAggregateFunction0 = CnosDBAggregate.CnosDBAggregateFunction.ARRAY_AGG;
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBSelect.SelectType cnosDBSelect_SelectType0 = CnosDBSelect.SelectType.ALL;
      cnosDBSelect0.setSelectOption(cnosDBSelect_SelectType0);
      List<CnosDBExpression> list0 = cnosDBSelect0.getOrderByClauses();
      List<CnosDBExpression> list1 = Randomly.extractNrRandomColumns(list0, 0);
      CnosDBAggregate cnosDBAggregate0 = new CnosDBAggregate(list1, cnosDBAggregate_CnosDBAggregateFunction0);
      cnosDBToStringVisitor0.visit(cnosDBAggregate0);
      CnosDBConstant.CnosDBNullConstant cnosDBConstant_CnosDBNullConstant0 = new CnosDBConstant.CnosDBNullConstant();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.BOOLEAN;
      CnosDBConstant cnosDBConstant0 = cnosDBConstant_CnosDBNullConstant0.cast(cnosDBSchema_CnosDBDataType0);
      Random.setNextRandom(2146);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType1 = CnosDBSchema.CnosDBDataType.BOOLEAN;
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType1);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant0, cnosDBCompoundDataType0);
      CnosDBToStringVisitor cnosDBToStringVisitor1 = new CnosDBToStringVisitor();
      cnosDBToStringVisitor1.visit(cnosDBCastOperation0);
      assertEquals("CAST( NULL AS BOOLEAN)", cnosDBToStringVisitor1.get());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTrue();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.BOOLEAN;
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant0, cnosDBCompoundDataType0);
      cnosDBToStringVisitor0.visit(cnosDBCastOperation0);
      assertEquals("CAST( TRUE AS BOOLEAN)", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      String string0 = "BOOLEAN";
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createStringConstant("BOOLEAN");
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant0, cnosDBCompoundDataType0);
      CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator0 = CnosDBPostfixOperation.PostfixOperator.IS_NOT_NULL;
      CnosDBPostfixOperation cnosDBPostfixOperation0 = new CnosDBPostfixOperation(cnosDBCastOperation0, cnosDBPostfixOperation_PostfixOperator0);
      CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator1 = CnosDBPostfixOperation.PostfixOperator.IS_UNKNOWN;
      CnosDBPostfixOperation.create(cnosDBSelect0, cnosDBPostfixOperation_PostfixOperator1);
      cnosDBToStringVisitor0.visit(cnosDBPostfixOperation0);
      CnosDBSelect cnosDBSelect1 = new CnosDBSelect();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBSelect1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBSelect.SelectType cnosDBSelect_SelectType0 = CnosDBSelect.SelectType.DISTINCT;
      CnosDBLikeOperation cnosDBLikeOperation0 = new CnosDBLikeOperation(cnosDBSelect0, cnosDBSelect0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBLikeOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBSelect0.getGroupByClause();
      CnosDBSelect.SelectType cnosDBSelect_SelectType0 = CnosDBSelect.SelectType.DISTINCT;
      cnosDBSelect0.setSelectOption(cnosDBSelect_SelectType0);
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createStringConstant((String) null);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.TIMESTAMP;
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBSelect0, cnosDBCompoundDataType0);
      CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator0 = CnosDBPostfixOperation.PostfixOperator.IS_UNKNOWN;
      CnosDBPostfixOperation cnosDBPostfixOperation0 = new CnosDBPostfixOperation(cnosDBConstant0, cnosDBPostfixOperation_PostfixOperator0);
      CnosDBPostfixOperation.create(cnosDBConstant0, cnosDBPostfixOperation_PostfixOperator0);
      CnosDBSelect cnosDBSelect1 = new CnosDBSelect();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBSelect0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTrue();
      CnosDBFunctionWithUnknownResult cnosDBFunctionWithUnknownResult0 = CnosDBFunctionWithUnknownResult.EXP;
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[2];
      cnosDBExpressionArray0[0] = (CnosDBExpression) cnosDBConstant0;
      cnosDBExpressionArray0[1] = (CnosDBExpression) cnosDBConstant0;
      CnosDBFunction cnosDBFunction0 = new CnosDBFunction(cnosDBFunctionWithUnknownResult0, cnosDBSchema_CnosDBDataType0, cnosDBExpressionArray0);
      cnosDBToStringVisitor0.visit(cnosDBFunction0);
      assertEquals("exp(TRUE, TRUE)", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBFunctionWithUnknownResult cnosDBFunctionWithUnknownResult0 = CnosDBFunctionWithUnknownResult.INITCAP;
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.DOUBLE;
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[0];
      CnosDBFunction cnosDBFunction0 = new CnosDBFunction(cnosDBFunctionWithUnknownResult0, cnosDBSchema_CnosDBDataType0, cnosDBExpressionArray0);
      cnosDBToStringVisitor0.visit(cnosDBFunction0);
      assertEquals("initcap()", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBSelect.SelectType cnosDBSelect_SelectType0 = CnosDBSelect.SelectType.ALL;
      CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator0 = CnosDBPostfixOperation.PostfixOperator.IS_TRUE;
      CnosDBPostfixOperation cnosDBPostfixOperation0 = new CnosDBPostfixOperation(cnosDBSelect0, cnosDBPostfixOperation_PostfixOperator0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBPostfixOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBSelect0, (CnosDBCompoundDataType) null);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBCastOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTimeStampConstant(0L);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.UINT;
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBConstant.createStringConstant("BOOLEAN");
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant0, cnosDBCompoundDataType0);
      CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator0 = CnosDBPostfixOperation.PostfixOperator.IS_UNKNOWN;
      CnosDBPostfixOperation cnosDBPostfixOperation0 = new CnosDBPostfixOperation(cnosDBCastOperation0, cnosDBPostfixOperation_PostfixOperator0);
      CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator1 = CnosDBPostfixOperation.PostfixOperator.IS_TRUE;
      CnosDBPostfixOperation.create(cnosDBCastOperation0, cnosDBPostfixOperation_PostfixOperator1);
      cnosDBToStringVisitor0.visit(cnosDBPostfixOperation0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBCompoundDataType0.getDataType();
      CnosDBCastOperation cnosDBCastOperation1 = new CnosDBCastOperation(cnosDBPostfixOperation0, cnosDBCompoundDataType0);
      cnosDBToStringVisitor0.visit(cnosDBCastOperation1);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBSelect0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBInOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect.CnosDBFromTable cnosDBSelect_CnosDBFromTable0 = new CnosDBSelect.CnosDBFromTable((CnosDBSchema.CnosDBTable) null);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBSelect_CnosDBFromTable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      List<CnosDBExpression> list0 = cnosDBSelect0.getGroupByClause();
      CnosDBAggregate.CnosDBAggregateFunction cnosDBAggregate_CnosDBAggregateFunction0 = CnosDBAggregate.CnosDBAggregateFunction.ARRAY_AGG;
      CnosDBSelect.SelectType cnosDBSelect_SelectType0 = CnosDBSelect.SelectType.DISTINCT;
      cnosDBSelect0.setSelectOption(cnosDBSelect_SelectType0);
      CnosDBAggregate cnosDBAggregate0 = new CnosDBAggregate(list0, cnosDBAggregate_CnosDBAggregateFunction0);
      cnosDBToStringVisitor0.visit(cnosDBAggregate0);
      CnosDBSchema.CnosDBColumn[] cnosDBSchema_CnosDBColumnArray0 = new CnosDBSchema.CnosDBColumn[7];
      CnosDBSchema.CnosDBColumn cnosDBSchema_CnosDBColumn0 = CnosDBSchema.CnosDBColumn.createDummy("iJ8Ha48");
      cnosDBSchema_CnosDBColumnArray0[0] = cnosDBSchema_CnosDBColumn0;
      CnosDBSchema.CnosDBColumn cnosDBSchema_CnosDBColumn1 = CnosDBSchema.CnosDBColumn.createDummy("SIMILAR");
      cnosDBSchema_CnosDBColumnArray0[1] = cnosDBSchema_CnosDBColumn1;
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
      CnosDBSchema.CnosDBColumn cnosDBSchema_CnosDBColumn2 = new CnosDBSchema.CnosDBColumn("SIMILAR", cnosDBSchema_CnosDBDataType0);
      cnosDBSchema_CnosDBColumnArray0[2] = cnosDBSchema_CnosDBColumn2;
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType1 = CnosDBSchema.CnosDBDataType.DOUBLE;
      CnosDBSchema.CnosDBColumn cnosDBSchema_CnosDBColumn3 = new CnosDBSchema.CnosDBColumn("sqlancer.mysql.ast.MySQLCastOperation$CastType", cnosDBSchema_CnosDBDataType1);
      cnosDBSchema_CnosDBColumnArray0[3] = cnosDBSchema_CnosDBColumn3;
      CnosDBSchema.CnosDBColumn cnosDBSchema_CnosDBColumn4 = CnosDBSchema.CnosDBColumn.createDummy("SIMILAR");
      cnosDBSchema_CnosDBColumnArray0[4] = cnosDBSchema_CnosDBColumn4;
      CnosDBSchema.CnosDBColumn cnosDBSchema_CnosDBColumn5 = CnosDBSchema.CnosDBColumn.createDummy("");
      cnosDBSchema_CnosDBColumnArray0[5] = cnosDBSchema_CnosDBColumn5;
      CnosDBSchema.CnosDBColumn cnosDBSchema_CnosDBColumn6 = CnosDBSchema.CnosDBColumn.createDummy("sqlancer.mysql.ast.MySQLCastOperation$CastType");
      cnosDBSchema_CnosDBColumnArray0[6] = cnosDBSchema_CnosDBColumn6;
      List<CnosDBSchema.CnosDBColumn> list1 = Randomly.subset(cnosDBSchema_CnosDBColumnArray0);
      CnosDBSchema.CnosDBTable cnosDBSchema_CnosDBTable0 = new CnosDBSchema.CnosDBTable("", list1);
      CnosDBSelect.CnosDBFromTable cnosDBSelect_CnosDBFromTable0 = new CnosDBSelect.CnosDBFromTable(cnosDBSchema_CnosDBTable0);
      cnosDBToStringVisitor0.visit(cnosDBSelect_CnosDBFromTable0);
      assertEquals("ARRAY_AGG()", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBFunctionWithUnknownResult cnosDBFunctionWithUnknownResult0 = CnosDBFunctionWithUnknownResult.LOG2;
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.BOOLEAN;
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[1];
      cnosDBExpressionArray0[0] = (CnosDBExpression) cnosDBSelect0;
      CnosDBFunction cnosDBFunction0 = new CnosDBFunction(cnosDBFunctionWithUnknownResult0, cnosDBSchema_CnosDBDataType0, cnosDBExpressionArray0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTimeStampConstant(0L);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.DOUBLE;
      CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[2];
      cnosDBExpressionArray0[0] = (CnosDBExpression) cnosDBConstant0;
      cnosDBExpressionArray0[1] = (CnosDBExpression) cnosDBConstant0;
      List<CnosDBExpression> list0 = Randomly.nonEmptySubset(cnosDBExpressionArray0);
      CnosDBInOperation cnosDBInOperation0 = new CnosDBInOperation(cnosDBConstant0, list0, false);
      CnosDBFunctionWithUnknownResult cnosDBFunctionWithUnknownResult0 = CnosDBFunctionWithUnknownResult.ASCII;
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType1 = CnosDBSchema.CnosDBDataType.UINT;
      CnosDBFunction cnosDBFunction0 = new CnosDBFunction(cnosDBFunctionWithUnknownResult0, cnosDBSchema_CnosDBDataType1, cnosDBExpressionArray0);
      cnosDBToStringVisitor0.visit(cnosDBFunction0);
      CnosDBAggregate.CnosDBAggregateFunction cnosDBAggregate_CnosDBAggregateFunction0 = CnosDBAggregate.CnosDBAggregateFunction.COVAR_POP;
      CnosDBAggregate cnosDBAggregate0 = new CnosDBAggregate(list0, cnosDBAggregate_CnosDBAggregateFunction0);
      CnosDBToStringVisitor cnosDBToStringVisitor1 = new CnosDBToStringVisitor();
      cnosDBToStringVisitor1.visit(cnosDBAggregate0);
      CnosDBBinaryLogicalOperation.BinaryLogicalOperator cnosDBBinaryLogicalOperation_BinaryLogicalOperator0 = CnosDBBinaryLogicalOperation.BinaryLogicalOperator.OR;
      CnosDBSchema.CnosDBColumn cnosDBSchema_CnosDBColumn0 = CnosDBSchema.CnosDBColumn.createDummy((String) null);
      CnosDBColumnValue cnosDBColumnValue0 = new CnosDBColumnValue(cnosDBSchema_CnosDBColumn0);
      CnosDBBinaryLogicalOperation cnosDBBinaryLogicalOperation0 = new CnosDBBinaryLogicalOperation(cnosDBColumnValue0, cnosDBConstant0, cnosDBBinaryLogicalOperation_BinaryLogicalOperator0);
      cnosDBToStringVisitor0.visit(cnosDBBinaryLogicalOperation0);
      Random.setNextRandom((-650));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBSelect0.getGroupByClause();
      CnosDBFunctionWithUnknownResult cnosDBFunctionWithUnknownResult0 = CnosDBFunctionWithUnknownResult.CHARACTER_LENGTH;
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.TIMESTAMP;
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[8];
      cnosDBExpressionArray0[0] = (CnosDBExpression) cnosDBSelect0;
      cnosDBExpressionArray0[1] = (CnosDBExpression) cnosDBSelect0;
      cnosDBExpressionArray0[2] = (CnosDBExpression) cnosDBSelect0;
      cnosDBExpressionArray0[3] = (CnosDBExpression) cnosDBSelect0;
      cnosDBExpressionArray0[4] = (CnosDBExpression) cnosDBSelect0;
      cnosDBExpressionArray0[5] = (CnosDBExpression) cnosDBSelect0;
      cnosDBExpressionArray0[6] = (CnosDBExpression) cnosDBSelect0;
      cnosDBExpressionArray0[7] = (CnosDBExpression) cnosDBSelect0;
      CnosDBFunction cnosDBFunction0 = new CnosDBFunction(cnosDBFunctionWithUnknownResult0, cnosDBSchema_CnosDBDataType0, cnosDBExpressionArray0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBFunctionWithUnknownResult cnosDBFunctionWithUnknownResult0 = CnosDBFunctionWithUnknownResult.ATAN2;
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.BOOLEAN;
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[7];
      CnosDBFunction cnosDBFunction0 = new CnosDBFunction(cnosDBFunctionWithUnknownResult0, cnosDBSchema_CnosDBDataType0, cnosDBExpressionArray0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBFunction0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createNullConstant();
      CnosDBInOperation cnosDBInOperation0 = new CnosDBInOperation(cnosDBConstant0, (List<CnosDBExpression>) null, false);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBInOperation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createUintConstant(0L);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      List<CnosDBExpression> list0 = cnosDBSelect0.getGroupByExpressions();
      CnosDBInOperation cnosDBInOperation0 = new CnosDBInOperation(cnosDBConstant0, list0, false);
      cnosDBToStringVisitor0.visit(cnosDBInOperation0);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
      CnosDBSchema.CnosDBColumn cnosDBSchema_CnosDBColumn0 = new CnosDBSchema.CnosDBColumn("$fxK+d47<&T8", cnosDBSchema_CnosDBDataType0);
      CnosDBColumnValue cnosDBColumnValue0 = CnosDBColumnValue.create(cnosDBSchema_CnosDBColumn0);
      CnosDBOrderByTerm.CnosDBOrder cnosDBOrderByTerm_CnosDBOrder0 = CnosDBOrderByTerm.CnosDBOrder.DESC;
      CnosDBOrderByTerm cnosDBOrderByTerm0 = new CnosDBOrderByTerm(cnosDBColumnValue0, cnosDBOrderByTerm_CnosDBOrder0);
      cnosDBToStringVisitor0.visit(cnosDBOrderByTerm0);
      assertEquals("(0) NOT IN ()$fxK+d47<&T8 DESC", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant.CnosDBNullConstant cnosDBConstant_CnosDBNullConstant0 = new CnosDBConstant.CnosDBNullConstant();
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant_CnosDBNullConstant0, (CnosDBCompoundDataType) null);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBCastOperation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTimeStampConstant(0L);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.UINT;
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant0, cnosDBCompoundDataType0);
      CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator0 = CnosDBPostfixOperation.PostfixOperator.IS_UNKNOWN;
      CnosDBPostfixOperation cnosDBPostfixOperation0 = new CnosDBPostfixOperation(cnosDBCastOperation0, cnosDBPostfixOperation_PostfixOperator0);
      CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator1 = CnosDBPostfixOperation.PostfixOperator.IS_TRUE;
      CnosDBPostfixOperation.create(cnosDBCastOperation0, cnosDBPostfixOperation_PostfixOperator1);
      cnosDBToStringVisitor0.visit(cnosDBPostfixOperation0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBSelect0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTrue();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.UINT;
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant0, cnosDBCompoundDataType0);
      cnosDBToStringVisitor0.visit(cnosDBCastOperation0);
      assertEquals("CAST( TRUE AS BIGINT UNSIGNED)", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      List<CnosDBExpression> list0 = cnosDBSelect0.getGroupByClause();
      CnosDBAggregate.CnosDBAggregateFunction cnosDBAggregate_CnosDBAggregateFunction0 = CnosDBAggregate.CnosDBAggregateFunction.ARRAY_AGG;
      CnosDBSelect.SelectType cnosDBSelect_SelectType0 = CnosDBSelect.SelectType.DISTINCT;
      cnosDBSelect0.setSelectOption(cnosDBSelect_SelectType0);
      CnosDBAggregate cnosDBAggregate0 = new CnosDBAggregate(list0, cnosDBAggregate_CnosDBAggregateFunction0);
      cnosDBToStringVisitor0.visit(cnosDBAggregate0);
      CnosDBBinaryLogicalOperation.BinaryLogicalOperator cnosDBBinaryLogicalOperation_BinaryLogicalOperator0 = CnosDBBinaryLogicalOperation.BinaryLogicalOperator.AND;
      CnosDBBinaryLogicalOperation cnosDBBinaryLogicalOperation0 = new CnosDBBinaryLogicalOperation(cnosDBSelect0, cnosDBAggregate0, cnosDBBinaryLogicalOperation_BinaryLogicalOperator0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBBinaryLogicalOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBSelect.SelectType cnosDBSelect_SelectType0 = CnosDBSelect.SelectType.DISTINCT;
      cnosDBSelect0.setSelectOption(cnosDBSelect_SelectType0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBSelect0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      Randomly randomly0 = new Randomly();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.TIMESTAMP;
      CnosDBExpression cnosDBExpression0 = CnosDBExpressionGenerator.generateConstant(randomly0, cnosDBSchema_CnosDBDataType0);
      CnosDBBinaryLogicalOperation.BinaryLogicalOperator cnosDBBinaryLogicalOperation_BinaryLogicalOperator0 = CnosDBBinaryLogicalOperation.BinaryLogicalOperator.AND;
      CnosDBBinaryLogicalOperation cnosDBBinaryLogicalOperation0 = new CnosDBBinaryLogicalOperation(cnosDBExpression0, cnosDBExpression0, cnosDBBinaryLogicalOperation_BinaryLogicalOperator0);
      cnosDBToStringVisitor0.visit(cnosDBBinaryLogicalOperation0);
      assertEquals(CnosDBSchema.CnosDBDataType.BOOLEAN, cnosDBBinaryLogicalOperation0.getExpressionType());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBPostfixText) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant.BooleanConstant cnosDBConstant_BooleanConstant0 = new CnosDBConstant.BooleanConstant(false);
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTrue();
      CnosDBConstant.createBooleanConstant(false);
      CnosDBConstant cnosDBConstant1 = cnosDBConstant_BooleanConstant0.isEquals(cnosDBConstant0);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
      CnosDBPostfixText cnosDBPostfixText0 = new CnosDBPostfixText(cnosDBConstant1, "", cnosDBSchema_CnosDBDataType0);
      cnosDBToStringVisitor0.visit(cnosDBPostfixText0);
      assertEquals(CnosDBSchema.CnosDBDataType.STRING, cnosDBPostfixText0.getExpressionType());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBPrefixOperation.PrefixOperator cnosDBPrefixOperation_PrefixOperator0 = CnosDBPrefixOperation.PrefixOperator.UNARY_PLUS;
      CnosDBPrefixOperation cnosDBPrefixOperation0 = new CnosDBPrefixOperation(cnosDBSelect0, cnosDBPrefixOperation_PrefixOperator0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBPrefixOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      String string0 = cnosDBToStringVisitor0.get();
      assertEquals("", string0);
      
      Random.setNextRandom(5);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTrue();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant0, cnosDBCompoundDataType0);
      cnosDBToStringVisitor0.visit(cnosDBCastOperation0);
      assertEquals("CAST( TRUE AS STRING)", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBCastOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant.CnosDBNullConstant cnosDBConstant_CnosDBNullConstant0 = new CnosDBConstant.CnosDBNullConstant();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.DOUBLE;
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant_CnosDBNullConstant0, cnosDBCompoundDataType0);
      cnosDBToStringVisitor0.visit(cnosDBCastOperation0);
      assertEquals("CAST( NULL AS DOUBLE)", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.INT;
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTrue();
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant0, cnosDBCompoundDataType0);
      cnosDBToStringVisitor0.visit(cnosDBCastOperation0);
      assertEquals("CAST( TRUE AS BIGINT)", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTimeStampConstant(0L);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.DOUBLE;
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant0, cnosDBCompoundDataType0);
      CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator0 = CnosDBPostfixOperation.PostfixOperator.IS_UNKNOWN;
      CnosDBPostfixOperation cnosDBPostfixOperation0 = new CnosDBPostfixOperation(cnosDBCastOperation0, cnosDBPostfixOperation_PostfixOperator0);
      CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator1 = CnosDBPostfixOperation.PostfixOperator.IS_TRUE;
      CnosDBPostfixOperation.create(cnosDBCastOperation0, cnosDBPostfixOperation_PostfixOperator1);
      cnosDBToStringVisitor0.visit(cnosDBPostfixOperation0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBSelect0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBFunction cnosDBFunction0 = null;
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBGlobalState cnosDBGlobalState0 = new CnosDBGlobalState();
      LinkedList<CnosDBSchema.CnosDBColumn> linkedList0 = new LinkedList<CnosDBSchema.CnosDBColumn>();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      CnosDBBetweenOperation cnosDBBetweenOperation0 = new CnosDBBetweenOperation(cnosDBConstant0, cnosDBConstant0, cnosDBConstant0);
      CnosDBPrefixOperation.PrefixOperator cnosDBPrefixOperation_PrefixOperator0 = CnosDBPrefixOperation.PrefixOperator.UNARY_MINUS;
      cnosDBConstant0.asBoolean();
      cnosDBConstant0.toString();
      CnosDBPrefixOperation cnosDBPrefixOperation0 = new CnosDBPrefixOperation(cnosDBBetweenOperation0, cnosDBPrefixOperation_PrefixOperator0);
      cnosDBPrefixOperation0.getExpressionType();
      cnosDBToStringVisitor0.visit(cnosDBPrefixOperation0);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.DOUBLE;
      // Undeclared exception!
      try { 
        CnosDBExpressionGenerator.generateExpression(cnosDBGlobalState0, (List<CnosDBSchema.CnosDBColumn>) linkedList0, cnosDBSchema_CnosDBDataType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.gen.CnosDBExpressionGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBOrderByTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTrue();
      CnosDBOrderByTerm.CnosDBOrder cnosDBOrderByTerm_CnosDBOrder0 = CnosDBOrderByTerm.CnosDBOrder.ASC;
      CnosDBOrderByTerm cnosDBOrderByTerm0 = new CnosDBOrderByTerm(cnosDBConstant0, cnosDBOrderByTerm_CnosDBOrder0);
      CnosDBLikeOperation cnosDBLikeOperation0 = new CnosDBLikeOperation(cnosDBOrderByTerm0, cnosDBConstant0);
      cnosDBToStringVisitor0.visit(cnosDBLikeOperation0);
      // Undeclared exception!
      try { 
        cnosDBOrderByTerm0.getExpectedValue();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Not impl
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBPrefixOperation.PrefixOperator cnosDBPrefixOperation_PrefixOperator0 = CnosDBPrefixOperation.PrefixOperator.NOT;
      CnosDBPrefixOperation cnosDBPrefixOperation0 = new CnosDBPrefixOperation((CnosDBExpression) null, cnosDBPrefixOperation_PrefixOperator0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBPrefixOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBExpression cnosDBExpression0 = null;
      CnosDBPrefixOperation.PrefixOperator cnosDBPrefixOperation_PrefixOperator0 = CnosDBPrefixOperation.PrefixOperator.UNARY_PLUS;
      CnosDBPrefixOperation cnosDBPrefixOperation0 = new CnosDBPrefixOperation((CnosDBExpression) null, cnosDBPrefixOperation_PrefixOperator0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBPrefixOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBPrefixOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CnosDBSelect.CnosDBSubquery cnosDBSelect_CnosDBSubquery0 = null;
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator0 = CnosDBPostfixOperation.PostfixOperator.IS_NOT_UNKNOWN;
      CnosDBPostfixOperation cnosDBPostfixOperation0 = new CnosDBPostfixOperation((CnosDBExpression) null, cnosDBPostfixOperation_PostfixOperator0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBPostfixOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBSelect0.getDistinctOnClause();
      CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator0 = CnosDBPostfixOperation.PostfixOperator.IS_TRUE;
      CnosDBPostfixOperation cnosDBPostfixOperation0 = new CnosDBPostfixOperation((CnosDBExpression) null, cnosDBPostfixOperation_PostfixOperator0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBPostfixOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBPostfixOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("COALESCE");
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.UINT;
      CnosDBConstant cnosDBConstant0 = cnosDBConstant_StringConstant0.cast(cnosDBSchema_CnosDBDataType0);
      CnosDBBetweenOperation cnosDBBetweenOperation0 = new CnosDBBetweenOperation(cnosDBConstant0, cnosDBConstant_StringConstant0, cnosDBConstant0);
      cnosDBToStringVisitor0.visit(cnosDBBetweenOperation0);
      assertEquals("(0) BETWEEN ('COALESCE') AND (0)", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = new CnosDBConstant.IntConstant(0L, true);
      CnosDBLikeOperation cnosDBLikeOperation0 = new CnosDBLikeOperation(cnosDBConstant_IntConstant0, cnosDBConstant_IntConstant0);
      cnosDBToStringVisitor0.visit(cnosDBLikeOperation0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBSelect0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      CnosDBLikeOperation cnosDBLikeOperation0 = new CnosDBLikeOperation(cnosDBConstant0, cnosDBConstant0);
      cnosDBToStringVisitor0.visit(cnosDBLikeOperation0);
      assertEquals("LIKE", cnosDBLikeOperation0.getOperatorRepresentation());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBBinaryLogicalOperation.BinaryLogicalOperator cnosDBBinaryLogicalOperation_BinaryLogicalOperator0 = CnosDBBinaryLogicalOperation.BinaryLogicalOperator.OR;
      CnosDBBinaryLogicalOperation cnosDBBinaryLogicalOperation0 = new CnosDBBinaryLogicalOperation(cnosDBSelect0, cnosDBSelect0, cnosDBBinaryLogicalOperation_BinaryLogicalOperator0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBBinaryLogicalOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBBinaryLogicalOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.visitor.ToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      List<CnosDBExpression> list0 = cnosDBSelect0.getGroupByClause();
      CnosDBAggregate.CnosDBAggregateFunction cnosDBAggregate_CnosDBAggregateFunction0 = CnosDBAggregate.CnosDBAggregateFunction.ARRAY_AGG;
      CnosDBAggregate cnosDBAggregate0 = new CnosDBAggregate(list0, cnosDBAggregate_CnosDBAggregateFunction0);
      cnosDBToStringVisitor0.visit(cnosDBAggregate0);
      CnosDBBinaryLogicalOperation.BinaryLogicalOperator cnosDBBinaryLogicalOperation_BinaryLogicalOperator0 = CnosDBBinaryLogicalOperation.BinaryLogicalOperator.AND;
      CnosDBBinaryLogicalOperation cnosDBBinaryLogicalOperation0 = new CnosDBBinaryLogicalOperation(cnosDBSelect0, cnosDBAggregate0, cnosDBBinaryLogicalOperation_BinaryLogicalOperator0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBBinaryLogicalOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBAggregate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createDoubleConstant((-2245.218));
      LinkedList<CnosDBExpression> linkedList0 = new LinkedList<CnosDBExpression>();
      CnosDBInOperation cnosDBInOperation0 = new CnosDBInOperation(cnosDBConstant0, linkedList0, true);
      cnosDBToStringVisitor0.visit(cnosDBInOperation0);
      assertEquals("(-2245.2179999999998472048901021480560302734375) IN ()", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBSimilarTo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSimilarTo cnosDBSimilarTo0 = new CnosDBSimilarTo((CnosDBExpression) null, (CnosDBExpression) null);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBSimilarTo0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = new CnosDBConstant.IntConstant(618L, true);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.DOUBLE;
      CnosDBConstant cnosDBConstant0 = cnosDBConstant_IntConstant0.cast(cnosDBSchema_CnosDBDataType0);
      CnosDBSimilarTo cnosDBSimilarTo0 = new CnosDBSimilarTo(cnosDBConstant0, cnosDBConstant0);
      cnosDBToStringVisitor0.visit(cnosDBSimilarTo0);
      assertEquals("(618 SIMILAR TO 618)", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("{y");
      cnosDBToStringVisitor0.visit((CnosDBConstant) cnosDBConstant_StringConstant0);
      cnosDBToStringVisitor0.get();
      CnosDBOrderByTerm.CnosDBOrder cnosDBOrderByTerm_CnosDBOrder0 = CnosDBOrderByTerm.CnosDBOrder.DESC;
      CnosDBOrderByTerm cnosDBOrderByTerm0 = new CnosDBOrderByTerm(cnosDBConstant_StringConstant0, cnosDBOrderByTerm_CnosDBOrder0);
      // Undeclared exception!
      try { 
        cnosDBOrderByTerm0.getExpectedValue();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Not impl
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBSelect.CnosDBSubquery cnosDBSelect_CnosDBSubquery0 = new CnosDBSelect.CnosDBSubquery(cnosDBSelect0, "@Ql0E>");
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBSelect_CnosDBSubquery0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBSelect.CnosDBSubquery) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      String string0 = "{~wEs=wW9X";
      CnosDBSelect.CnosDBSubquery cnosDBSelect_CnosDBSubquery0 = new CnosDBSelect.CnosDBSubquery(cnosDBSelect0, "{~wEs=wW9X");
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBSelect_CnosDBSubquery0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      boolean boolean0 = false;
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createBooleanConstant(false);
      cnosDBToStringVisitor0.visitSpecific((CnosDBExpression) cnosDBConstant0);
      CnosDBGlobalState cnosDBGlobalState0 = new CnosDBGlobalState();
      CnosDBExpressionGenerator cnosDBExpressionGenerator0 = null;
      try {
        cnosDBExpressionGenerator0 = new CnosDBExpressionGenerator(cnosDBGlobalState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.gen.CnosDBExpressionGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CnosDBSelect.CnosDBSubquery cnosDBSelect_CnosDBSubquery0 = null;
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBBetweenOperation cnosDBBetweenOperation0 = new CnosDBBetweenOperation((CnosDBExpression) null, (CnosDBExpression) null, (CnosDBExpression) null);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBBetweenOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTrue();
      cnosDBToStringVisitor0.visit(cnosDBConstant0);
      String string0 = cnosDBToStringVisitor0.get();
      assertEquals("TRUE", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBBetweenOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSchema.CnosDBColumn cnosDBSchema_CnosDBColumn0 = CnosDBSchema.CnosDBColumn.createDummy("");
      CnosDBColumnValue cnosDBColumnValue0 = new CnosDBColumnValue(cnosDBSchema_CnosDBColumn0);
      cnosDBToStringVisitor0.visit(cnosDBColumnValue0);
      assertEquals(CnosDBSchema.CnosDBDataType.INT, cnosDBColumnValue0.getExpressionType());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createDoubleConstant(0.0);
      CnosDBSchema.CnosDBColumn cnosDBSchema_CnosDBColumn0 = CnosDBSchema.CnosDBColumn.createDummy("&gS)XG?G7)");
      CnosDBColumnValue cnosDBColumnValue0 = CnosDBColumnValue.create(cnosDBSchema_CnosDBColumn0);
      CnosDBBetweenOperation cnosDBBetweenOperation0 = new CnosDBBetweenOperation(cnosDBConstant0, cnosDBColumnValue0, (CnosDBExpression) null);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBBetweenOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect.SelectType cnosDBSelect_SelectType0 = CnosDBSelect.SelectType.DISTINCT;
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBSelect0.setSelectOption(cnosDBSelect_SelectType0);
      CnosDBConstant.IntConstant cnosDBConstant_IntConstant0 = new CnosDBConstant.IntConstant((-911L), false);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.UINT;
      CnosDBConstant cnosDBConstant0 = cnosDBConstant_IntConstant0.cast(cnosDBSchema_CnosDBDataType0);
      cnosDBSelect0.setDistinctOnClause(cnosDBConstant0);
      CnosDBToStringVisitor cnosDBToStringVisitor1 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor1.visit(cnosDBSelect0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBSelect0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBExpression cnosDBExpression0 = null;
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visitSpecific((CnosDBExpression) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CnosDBSelect.CnosDBSubquery cnosDBSelect_CnosDBSubquery0 = null;
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visitSpecific((CnosDBExpression) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBFunctionWithUnknownResult cnosDBFunctionWithUnknownResult0 = CnosDBFunctionWithUnknownResult.LTRIM;
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.BOOLEAN;
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[2];
      CnosDBGlobalState cnosDBGlobalState0 = new CnosDBGlobalState();
      // Undeclared exception!
      try { 
        CnosDBExpressionGenerator.generateExpression(cnosDBGlobalState0, cnosDBSchema_CnosDBDataType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.gen.CnosDBExpressionGenerator", e);
      }
  }
}
