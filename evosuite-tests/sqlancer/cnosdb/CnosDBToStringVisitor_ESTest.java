/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 04:03:52 GMT 2025
 */

package sqlancer.cnosdb;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.Randomly;
import sqlancer.cnosdb.CnosDBCompoundDataType;
import sqlancer.cnosdb.CnosDBSchema;
import sqlancer.cnosdb.CnosDBToStringVisitor;
import sqlancer.cnosdb.ast.CnosDBAggregate;
import sqlancer.cnosdb.ast.CnosDBBetweenOperation;
import sqlancer.cnosdb.ast.CnosDBBinaryComparisonOperation;
import sqlancer.cnosdb.ast.CnosDBBinaryLogicalOperation;
import sqlancer.cnosdb.ast.CnosDBCastOperation;
import sqlancer.cnosdb.ast.CnosDBColumnValue;
import sqlancer.cnosdb.ast.CnosDBConcatOperation;
import sqlancer.cnosdb.ast.CnosDBConstant;
import sqlancer.cnosdb.ast.CnosDBExpression;
import sqlancer.cnosdb.ast.CnosDBFunction;
import sqlancer.cnosdb.ast.CnosDBFunctionWithUnknownResult;
import sqlancer.cnosdb.ast.CnosDBInOperation;
import sqlancer.cnosdb.ast.CnosDBJoin;
import sqlancer.cnosdb.ast.CnosDBLikeOperation;
import sqlancer.cnosdb.ast.CnosDBOrderByTerm;
import sqlancer.cnosdb.ast.CnosDBPostfixOperation;
import sqlancer.cnosdb.ast.CnosDBPostfixText;
import sqlancer.cnosdb.ast.CnosDBPrefixOperation;
import sqlancer.cnosdb.ast.CnosDBSelect;
import sqlancer.cnosdb.ast.CnosDBSimilarTo;
import sqlancer.cnosdb.gen.CnosDBExpressionGenerator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CnosDBToStringVisitor_ESTest extends CnosDBToStringVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBFunctionWithUnknownResult cnosDBFunctionWithUnknownResult0 = CnosDBFunctionWithUnknownResult.LOG10;
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.TIMESTAMP;
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[0];
      CnosDBFunction cnosDBFunction0 = new CnosDBFunction(cnosDBFunctionWithUnknownResult0, cnosDBSchema_CnosDBDataType0, cnosDBExpressionArray0);
      Randomly randomly0 = new Randomly();
      CnosDBExpression cnosDBExpression0 = CnosDBExpressionGenerator.generateConstant(randomly0, cnosDBSchema_CnosDBDataType0);
      CnosDBBinaryLogicalOperation.BinaryLogicalOperator cnosDBBinaryLogicalOperation_BinaryLogicalOperator0 = CnosDBBinaryLogicalOperation.BinaryLogicalOperator.AND;
      CnosDBBinaryLogicalOperation cnosDBBinaryLogicalOperation0 = new CnosDBBinaryLogicalOperation(cnosDBFunction0, cnosDBExpression0, cnosDBBinaryLogicalOperation_BinaryLogicalOperator0);
      CnosDBBetweenOperation cnosDBBetweenOperation0 = new CnosDBBetweenOperation(cnosDBBinaryLogicalOperation0, cnosDBExpression0, cnosDBBinaryLogicalOperation0);
      CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator0 = CnosDBPostfixOperation.PostfixOperator.IS_NULL;
      CnosDBPostfixOperation cnosDBPostfixOperation0 = new CnosDBPostfixOperation(cnosDBBetweenOperation0, cnosDBPostfixOperation_PostfixOperator0);
      cnosDBToStringVisitor0.visitSpecific((CnosDBExpression) cnosDBPostfixOperation0);
      assertEquals("((((log10())AND(CAST (2 AS TIMESTAMP)))) BETWEEN (CAST (2 AS TIMESTAMP)) AND (((log10())AND(CAST (2 AS TIMESTAMP))))) IS NULL", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      List<CnosDBExpression> list0 = List.of((CnosDBExpression) cnosDBSelect0, (CnosDBExpression) cnosDBSelect0);
      cnosDBSelect0.setFetchColumns(list0);
      CnosDBSelect.CnosDBSubquery cnosDBSelect_CnosDBSubquery0 = new CnosDBSelect.CnosDBSubquery(cnosDBSelect0, "(p");
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBSelect_CnosDBSubquery0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBFunctionWithUnknownResult cnosDBFunctionWithUnknownResult0 = CnosDBFunctionWithUnknownResult.LOG10;
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.TIMESTAMP;
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[0];
      CnosDBFunction cnosDBFunction0 = new CnosDBFunction(cnosDBFunctionWithUnknownResult0, cnosDBSchema_CnosDBDataType0, cnosDBExpressionArray0);
      Randomly randomly0 = new Randomly();
      CnosDBExpression cnosDBExpression0 = CnosDBExpressionGenerator.generateConstant(randomly0, cnosDBSchema_CnosDBDataType0);
      CnosDBBinaryLogicalOperation.BinaryLogicalOperator cnosDBBinaryLogicalOperation_BinaryLogicalOperator0 = CnosDBBinaryLogicalOperation.BinaryLogicalOperator.AND;
      CnosDBBinaryLogicalOperation cnosDBBinaryLogicalOperation0 = new CnosDBBinaryLogicalOperation(cnosDBFunction0, cnosDBExpression0, cnosDBBinaryLogicalOperation_BinaryLogicalOperator0);
      CnosDBBetweenOperation cnosDBBetweenOperation0 = new CnosDBBetweenOperation(cnosDBBinaryLogicalOperation0, cnosDBExpression0, cnosDBBinaryLogicalOperation0);
      CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator0 = CnosDBPostfixOperation.PostfixOperator.IS_NULL;
      CnosDBPostfixOperation cnosDBPostfixOperation0 = new CnosDBPostfixOperation(cnosDBBetweenOperation0, cnosDBPostfixOperation_PostfixOperator0);
      CnosDBPrefixOperation.PrefixOperator cnosDBPrefixOperation_PrefixOperator0 = CnosDBPrefixOperation.PrefixOperator.NOT;
      CnosDBPrefixOperation cnosDBPrefixOperation0 = new CnosDBPrefixOperation(cnosDBPostfixOperation0, cnosDBPrefixOperation_PrefixOperator0);
      cnosDBToStringVisitor0.visit(cnosDBPrefixOperation0);
      assertEquals("NOT (((((log10())AND(CAST (2 AS TIMESTAMP)))) BETWEEN (CAST (2 AS TIMESTAMP)) AND (((log10())AND(CAST (2 AS TIMESTAMP))))) IS NULL)", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.DOUBLE;
      CnosDBSchema.CnosDBColumn cnosDBSchema_CnosDBColumn0 = new CnosDBSchema.CnosDBColumn("sED[[%.DF>$Zj~", cnosDBSchema_CnosDBDataType0);
      CnosDBColumnValue cnosDBColumnValue0 = CnosDBColumnValue.create(cnosDBSchema_CnosDBColumn0);
      CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator0 = CnosDBPostfixOperation.PostfixOperator.IS_UNKNOWN;
      CnosDBPostfixOperation cnosDBPostfixOperation0 = new CnosDBPostfixOperation(cnosDBColumnValue0, cnosDBPostfixOperation_PostfixOperator0);
      cnosDBToStringVisitor0.visit(cnosDBPostfixOperation0);
      assertEquals("(sED[[%.DF>$Zj~) IS UNKNOWN", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createDoubleConstant(2329.871717);
      cnosDBToStringVisitor0.visit(cnosDBConstant0);
      assertFalse(cnosDBConstant0.isNull());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.DOUBLE;
      CnosDBSchema.CnosDBColumn cnosDBSchema_CnosDBColumn0 = new CnosDBSchema.CnosDBColumn("sED[[%.DF>$Zj~", cnosDBSchema_CnosDBDataType0);
      CnosDBColumnValue cnosDBColumnValue0 = CnosDBColumnValue.create(cnosDBSchema_CnosDBColumn0);
      cnosDBToStringVisitor0.visit(cnosDBColumnValue0);
      assertEquals("sED[[%.DF>$Zj~", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSchema.CnosDBColumn[] cnosDBSchema_CnosDBColumnArray0 = new CnosDBSchema.CnosDBColumn[6];
      List<CnosDBSchema.CnosDBColumn> list0 = Randomly.subset(cnosDBSchema_CnosDBColumnArray0);
      CnosDBSchema.CnosDBTable cnosDBSchema_CnosDBTable0 = new CnosDBSchema.CnosDBTable((String) null, list0);
      CnosDBSelect.CnosDBFromTable cnosDBSelect_CnosDBFromTable0 = new CnosDBSelect.CnosDBFromTable(cnosDBSchema_CnosDBTable0);
      cnosDBToStringVisitor0.visit(cnosDBSelect_CnosDBFromTable0);
      assertNull(cnosDBSelect_CnosDBFromTable0.getExpressionType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createFalse();
      CnosDBPrefixOperation.PrefixOperator cnosDBPrefixOperation_PrefixOperator0 = CnosDBPrefixOperation.PrefixOperator.UNARY_PLUS;
      CnosDBPrefixOperation cnosDBPrefixOperation0 = new CnosDBPrefixOperation(cnosDBConstant0, cnosDBPrefixOperation_PrefixOperator0);
      CnosDBOrderByTerm.CnosDBOrder cnosDBOrderByTerm_CnosDBOrder0 = CnosDBOrderByTerm.CnosDBOrder.ASC;
      CnosDBOrderByTerm cnosDBOrderByTerm0 = new CnosDBOrderByTerm(cnosDBPrefixOperation0, cnosDBOrderByTerm_CnosDBOrder0);
      cnosDBToStringVisitor0.visit(cnosDBOrderByTerm0);
      assertEquals("+ (FALSE) ASC", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createBooleanConstant(false);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant0, cnosDBCompoundDataType0);
      CnosDBPostfixText cnosDBPostfixText0 = new CnosDBPostfixText(cnosDBCastOperation0, "I8", cnosDBSchema_CnosDBDataType0);
      cnosDBToStringVisitor0.visit(cnosDBPostfixText0);
      assertEquals("CAST( FALSE AS STRING)I8", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createBooleanConstant(true);
      CnosDBLikeOperation cnosDBLikeOperation0 = new CnosDBLikeOperation(cnosDBConstant0, cnosDBConstant0);
      cnosDBToStringVisitor0.visit(cnosDBLikeOperation0);
      assertEquals("LIKE", cnosDBLikeOperation0.getOperatorRepresentation());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTrue();
      CnosDBBinaryComparisonOperation.CnosDBBinaryComparisonOperator cnosDBBinaryComparisonOperation_CnosDBBinaryComparisonOperator0 = CnosDBBinaryComparisonOperation.CnosDBBinaryComparisonOperator.GREATER_EQUALS;
      CnosDBBinaryComparisonOperation cnosDBBinaryComparisonOperation0 = new CnosDBBinaryComparisonOperation(cnosDBConstant0, cnosDBConstant0, cnosDBBinaryComparisonOperation_CnosDBBinaryComparisonOperator0);
      CnosDBOrderByTerm.CnosDBOrder cnosDBOrderByTerm_CnosDBOrder0 = CnosDBOrderByTerm.CnosDBOrder.ASC;
      CnosDBOrderByTerm cnosDBOrderByTerm0 = new CnosDBOrderByTerm(cnosDBBinaryComparisonOperation0, cnosDBOrderByTerm_CnosDBOrder0);
      CnosDBBinaryLogicalOperation.BinaryLogicalOperator cnosDBBinaryLogicalOperation_BinaryLogicalOperator0 = CnosDBBinaryLogicalOperation.BinaryLogicalOperator.OR;
      CnosDBBinaryLogicalOperation cnosDBBinaryLogicalOperation0 = new CnosDBBinaryLogicalOperation(cnosDBOrderByTerm0, cnosDBOrderByTerm0, cnosDBBinaryLogicalOperation_BinaryLogicalOperator0);
      cnosDBToStringVisitor0.visit(cnosDBBinaryLogicalOperation0);
      assertEquals("((((TRUE)>=(TRUE)) ASC)OR(((TRUE)>=(TRUE)) ASC))", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createStringConstant("jfn8Y[te");
      CnosDBBetweenOperation cnosDBBetweenOperation0 = new CnosDBBetweenOperation(cnosDBConstant0, cnosDBConstant0, cnosDBConstant0);
      cnosDBToStringVisitor0.visit(cnosDBBetweenOperation0);
      assertEquals("('jfn8Y[te') BETWEEN ('jfn8Y[te') AND ('jfn8Y[te')", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      List<CnosDBExpression> list0 = cnosDBSelect0.getOrderByClauses();
      CnosDBAggregate.CnosDBAggregateFunction cnosDBAggregate_CnosDBAggregateFunction0 = CnosDBAggregate.CnosDBAggregateFunction.MIN;
      CnosDBAggregate cnosDBAggregate0 = new CnosDBAggregate(list0, cnosDBAggregate_CnosDBAggregateFunction0);
      cnosDBToStringVisitor0.visit(cnosDBAggregate0);
      assertEquals("MIN()", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createTrue();
      CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator0 = CnosDBPostfixOperation.PostfixOperator.IS_NOT_UNKNOWN;
      CnosDBPostfixOperation cnosDBPostfixOperation0 = new CnosDBPostfixOperation(cnosDBConstant0, cnosDBPostfixOperation_PostfixOperator0);
      CnosDBSimilarTo cnosDBSimilarTo0 = new CnosDBSimilarTo(cnosDBPostfixOperation0, cnosDBPostfixOperation0);
      cnosDBToStringVisitor0.visit(cnosDBSimilarTo0);
      String string0 = cnosDBToStringVisitor0.get();
      assertEquals("((TRUE) IS NOT UNKNOWN SIMILAR TO (TRUE) IS NOT UNKNOWN)", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visitSpecific((CnosDBExpression) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBSimilarTo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSimilarTo cnosDBSimilarTo0 = new CnosDBSimilarTo((CnosDBExpression) null, (CnosDBExpression) null);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBSimilarTo0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBSelect) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBSelect.CnosDBSubquery cnosDBSelect_CnosDBSubquery0 = new CnosDBSelect.CnosDBSubquery(cnosDBSelect0, "Gpd(?8q:CCT8\"uP");
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBSelect_CnosDBSubquery0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("TO_CHAR");
      CnosDBConcatOperation cnosDBConcatOperation0 = new CnosDBConcatOperation(cnosDBConstant_StringConstant0, cnosDBConstant_StringConstant0);
      CnosDBJoin.CnosDBJoinType cnosDBJoin_CnosDBJoinType0 = CnosDBJoin.CnosDBJoinType.LEFT;
      CnosDBJoin cnosDBJoin0 = new CnosDBJoin(cnosDBConcatOperation0, cnosDBConstant_StringConstant0, cnosDBJoin_CnosDBJoinType0);
      List<CnosDBExpression> list0 = List.of((CnosDBExpression) cnosDBJoin0, (CnosDBExpression) cnosDBConstant_StringConstant0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      cnosDBSelect0.setFetchColumns(list0);
      CnosDBSelect.CnosDBSubquery cnosDBSelect_CnosDBSubquery0 = new CnosDBSelect.CnosDBSubquery(cnosDBSelect0, "18i6k0rax(Sx9Iq3");
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBSelect_CnosDBSubquery0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // sqlancer.cnosdb.ast.CnosDBJoin@4
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBPrefixOperation.PrefixOperator cnosDBPrefixOperation_PrefixOperator0 = CnosDBPrefixOperation.PrefixOperator.UNARY_MINUS;
      CnosDBPrefixOperation cnosDBPrefixOperation0 = new CnosDBPrefixOperation((CnosDBExpression) null, cnosDBPrefixOperation_PrefixOperator0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBPrefixOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBPostfixText) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.INT;
      CnosDBPostfixText cnosDBPostfixText0 = new CnosDBPostfixText((CnosDBExpression) null, "qu{", cnosDBSchema_CnosDBDataType0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBPostfixText0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBBetweenOperation cnosDBBetweenOperation0 = new CnosDBBetweenOperation((CnosDBExpression) null, (CnosDBExpression) null, (CnosDBExpression) null);
      CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator0 = CnosDBPostfixOperation.PostfixOperator.IS_UNKNOWN;
      CnosDBPostfixOperation cnosDBPostfixOperation0 = new CnosDBPostfixOperation(cnosDBBetweenOperation0, cnosDBPostfixOperation_PostfixOperator0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBPostfixOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBOrderByTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBOrderByTerm.CnosDBOrder cnosDBOrderByTerm_CnosDBOrder0 = CnosDBOrderByTerm.CnosDBOrder.ASC;
      CnosDBOrderByTerm cnosDBOrderByTerm0 = new CnosDBOrderByTerm((CnosDBExpression) null, cnosDBOrderByTerm_CnosDBOrder0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBOrderByTerm0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBLikeOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.visitor.ToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBLikeOperation cnosDBLikeOperation0 = new CnosDBLikeOperation((CnosDBExpression) null, (CnosDBExpression) null);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBLikeOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[2];
      List<CnosDBExpression> list0 = Randomly.nonEmptySubset(cnosDBExpressionArray0);
      CnosDBInOperation cnosDBInOperation0 = new CnosDBInOperation(cnosDBSelect0, list0, false);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBInOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant.StringConstant cnosDBConstant_StringConstant0 = new CnosDBConstant.StringConstant("IwH1s@nW]G");
      CnosDBJoin.CnosDBJoinType cnosDBJoin_CnosDBJoinType0 = CnosDBJoin.CnosDBJoinType.INNER;
      CnosDBJoin cnosDBJoin0 = new CnosDBJoin(cnosDBConstant_StringConstant0, cnosDBConstant_StringConstant0, cnosDBJoin_CnosDBJoinType0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      List<CnosDBExpression> list0 = cnosDBSelect0.getJoinList();
      CnosDBInOperation cnosDBInOperation0 = new CnosDBInOperation(cnosDBJoin0, list0, true);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBInOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // sqlancer.cnosdb.ast.CnosDBJoin@3
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBFunctionWithUnknownResult cnosDBFunctionWithUnknownResult0 = CnosDBFunctionWithUnknownResult.SUBSTR;
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.INT;
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[1];
      cnosDBExpressionArray0[0] = (CnosDBExpression) cnosDBSelect0;
      CnosDBFunction cnosDBFunction0 = new CnosDBFunction(cnosDBFunctionWithUnknownResult0, cnosDBSchema_CnosDBDataType0, cnosDBExpressionArray0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBSelect0, (CnosDBCompoundDataType) null);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBCastOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[8];
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.TIMESTAMP;
      CnosDBFunctionWithUnknownResult cnosDBFunctionWithUnknownResult0 = CnosDBFunctionWithUnknownResult.POWER;
      CnosDBFunction cnosDBFunction0 = new CnosDBFunction(cnosDBFunctionWithUnknownResult0, cnosDBSchema_CnosDBDataType0, cnosDBExpressionArray0);
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBFunction0, cnosDBCompoundDataType0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBCastOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBOrderByTerm.CnosDBOrder cnosDBOrderByTerm_CnosDBOrder0 = CnosDBOrderByTerm.CnosDBOrder.ASC;
      CnosDBOrderByTerm cnosDBOrderByTerm0 = new CnosDBOrderByTerm(cnosDBSelect0, cnosDBOrderByTerm_CnosDBOrder0);
      CnosDBBinaryLogicalOperation.BinaryLogicalOperator cnosDBBinaryLogicalOperation_BinaryLogicalOperator0 = CnosDBBinaryLogicalOperation.BinaryLogicalOperator.OR;
      CnosDBBinaryLogicalOperation cnosDBBinaryLogicalOperation0 = new CnosDBBinaryLogicalOperation(cnosDBOrderByTerm0, cnosDBOrderByTerm0, cnosDBBinaryLogicalOperation_BinaryLogicalOperator0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBBinaryLogicalOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBBinaryLogicalOperation.BinaryLogicalOperator cnosDBBinaryLogicalOperation_BinaryLogicalOperator0 = CnosDBBinaryLogicalOperation.BinaryLogicalOperator.AND;
      CnosDBBinaryLogicalOperation cnosDBBinaryLogicalOperation0 = new CnosDBBinaryLogicalOperation((CnosDBExpression) null, (CnosDBExpression) null, cnosDBBinaryLogicalOperation_BinaryLogicalOperator0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBBinaryLogicalOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBBetweenOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator0 = CnosDBPostfixOperation.PostfixOperator.IS_NOT_NULL;
      CnosDBPostfixOperation cnosDBPostfixOperation0 = new CnosDBPostfixOperation((CnosDBExpression) null, cnosDBPostfixOperation_PostfixOperator0);
      CnosDBBetweenOperation cnosDBBetweenOperation0 = new CnosDBBetweenOperation(cnosDBPostfixOperation0, (CnosDBExpression) null, cnosDBPostfixOperation0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBBetweenOperation0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBSelect0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBSelect.CnosDBSubquery) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBConstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBColumnValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBSelect.CnosDBFromTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createBooleanConstant(true);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.TIMESTAMP;
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant0, cnosDBCompoundDataType0);
      cnosDBToStringVisitor0.visit(cnosDBCastOperation0);
      assertEquals("CAST( TRUE AS TIMESTAMP)", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createBooleanConstant(true);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.UINT;
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant0, cnosDBCompoundDataType0);
      cnosDBToStringVisitor0.visit(cnosDBCastOperation0);
      assertEquals("CAST( TRUE AS BIGINT UNSIGNED)", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant.BooleanConstant cnosDBConstant_BooleanConstant0 = new CnosDBConstant.BooleanConstant(true);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.DOUBLE;
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant_BooleanConstant0, cnosDBCompoundDataType0);
      cnosDBToStringVisitor0.visit(cnosDBCastOperation0);
      assertEquals("CAST( TRUE AS DOUBLE)", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createBooleanConstant(false);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.BOOLEAN;
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant0, cnosDBCompoundDataType0);
      cnosDBToStringVisitor0.visit(cnosDBCastOperation0);
      assertEquals("CAST( FALSE AS BOOLEAN)", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createBooleanConstant(false);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.INT;
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBConstant0, cnosDBCompoundDataType0);
      cnosDBToStringVisitor0.visit(cnosDBCastOperation0);
      assertEquals("CAST( FALSE AS BIGINT)", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createUintConstant(255L);
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.UINT;
      CnosDBFunctionWithUnknownResult cnosDBFunctionWithUnknownResult0 = CnosDBFunctionWithUnknownResult.LEFT;
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[2];
      cnosDBExpressionArray0[0] = (CnosDBExpression) cnosDBConstant0;
      cnosDBExpressionArray0[1] = (CnosDBExpression) cnosDBConstant0;
      CnosDBFunction cnosDBFunction0 = new CnosDBFunction(cnosDBFunctionWithUnknownResult0, cnosDBSchema_CnosDBDataType0, cnosDBExpressionArray0);
      cnosDBToStringVisitor0.visit(cnosDBFunction0);
      assertEquals("left(255, 255)", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.UINT;
      CnosDBFunctionWithUnknownResult cnosDBFunctionWithUnknownResult0 = CnosDBFunctionWithUnknownResult.LEFT;
      CnosDBExpression[] cnosDBExpressionArray0 = new CnosDBExpression[2];
      CnosDBFunction cnosDBFunction0 = new CnosDBFunction(cnosDBFunctionWithUnknownResult0, cnosDBSchema_CnosDBDataType0, cnosDBExpressionArray0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBFunction0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBSelect.SelectType cnosDBSelect_SelectType0 = CnosDBSelect.SelectType.DISTINCT;
      cnosDBSelect0.setSelectType(cnosDBSelect_SelectType0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBSelect0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBBinaryLogicalOperation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.visitor.ToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBPostfixOperation.PostfixOperator cnosDBPostfixOperation_PostfixOperator0 = CnosDBPostfixOperation.PostfixOperator.IS_TRUE;
      CnosDBPostfixOperation cnosDBPostfixOperation0 = new CnosDBPostfixOperation(cnosDBSelect0, cnosDBPostfixOperation_PostfixOperator0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBPostfixOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBConstant cnosDBConstant0 = CnosDBConstant.createDoubleConstant(0.0);
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      List<CnosDBExpression> list0 = cnosDBSelect0.getJoinList();
      CnosDBInOperation cnosDBInOperation0 = new CnosDBInOperation(cnosDBConstant0, list0, true);
      cnosDBToStringVisitor0.visit(cnosDBInOperation0);
      assertEquals("(0) IN ()", cnosDBToStringVisitor0.get());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBAggregate.CnosDBAggregateFunction cnosDBAggregate_CnosDBAggregateFunction0 = CnosDBAggregate.CnosDBAggregateFunction.CORR;
      CnosDBAggregate cnosDBAggregate0 = new CnosDBAggregate((List<CnosDBExpression>) null, cnosDBAggregate_CnosDBAggregateFunction0);
      CnosDBLikeOperation cnosDBLikeOperation0 = new CnosDBLikeOperation(cnosDBSelect0, cnosDBAggregate0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBLikeOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBPrefixOperation.PrefixOperator cnosDBPrefixOperation_PrefixOperator0 = CnosDBPrefixOperation.PrefixOperator.UNARY_MINUS;
      CnosDBPrefixOperation cnosDBPrefixOperation0 = new CnosDBPrefixOperation(cnosDBSelect0, cnosDBPrefixOperation_PrefixOperator0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBPrefixOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBSelect.CnosDBSubquery cnosDBSelect_CnosDBSubquery0 = new CnosDBSelect.CnosDBSubquery(cnosDBSelect0, "]X,Z#62~kQ]sS^|9Zr ");
      CnosDBBetweenOperation cnosDBBetweenOperation0 = new CnosDBBetweenOperation(cnosDBSelect_CnosDBSubquery0, cnosDBSelect0, cnosDBSelect_CnosDBSubquery0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBBetweenOperation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
      CnosDBPostfixText cnosDBPostfixText0 = new CnosDBPostfixText(cnosDBSelect0, "pk", cnosDBSchema_CnosDBDataType0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBPostfixText0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBSelect.CnosDBSubquery cnosDBSelect_CnosDBSubquery0 = new CnosDBSelect.CnosDBSubquery(cnosDBSelect0, "Gvu{!dct@c*dAwU");
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visitSpecific((CnosDBExpression) cnosDBSelect_CnosDBSubquery0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSchema.CnosDBColumn cnosDBSchema_CnosDBColumn0 = CnosDBSchema.CnosDBColumn.createDummy((String) null);
      CnosDBColumnValue cnosDBColumnValue0 = new CnosDBColumnValue(cnosDBSchema_CnosDBColumn0);
      CnosDBInOperation cnosDBInOperation0 = new CnosDBInOperation(cnosDBColumnValue0, (List<CnosDBExpression>) null, false);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBInOperation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.visitor.ToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBSimilarTo cnosDBSimilarTo0 = new CnosDBSimilarTo(cnosDBSelect0, cnosDBSelect0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBSimilarTo0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSelect cnosDBSelect0 = new CnosDBSelect();
      CnosDBOrderByTerm.CnosDBOrder cnosDBOrderByTerm_CnosDBOrder0 = CnosDBOrderByTerm.CnosDBOrder.ASC;
      CnosDBOrderByTerm cnosDBOrderByTerm0 = new CnosDBOrderByTerm(cnosDBSelect0, cnosDBOrderByTerm_CnosDBOrder0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBOrderByTerm0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.common.ast.SelectBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit((CnosDBAggregate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.INT;
      CnosDBCompoundDataType cnosDBCompoundDataType0 = CnosDBCompoundDataType.create(cnosDBSchema_CnosDBDataType0);
      CnosDBSelect.CnosDBFromTable cnosDBSelect_CnosDBFromTable0 = new CnosDBSelect.CnosDBFromTable((CnosDBSchema.CnosDBTable) null);
      CnosDBCastOperation cnosDBCastOperation0 = new CnosDBCastOperation(cnosDBSelect_CnosDBFromTable0, cnosDBCompoundDataType0);
      // Undeclared exception!
      try { 
        cnosDBToStringVisitor0.visit(cnosDBCastOperation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.CnosDBToStringVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CnosDBToStringVisitor cnosDBToStringVisitor0 = new CnosDBToStringVisitor();
      String string0 = cnosDBToStringVisitor0.get();
      assertEquals("", string0);
  }
}
