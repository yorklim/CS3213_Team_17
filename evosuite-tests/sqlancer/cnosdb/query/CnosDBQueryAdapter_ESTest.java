/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 14 03:51:46 GMT 2025
 */

package sqlancer.cnosdb.query;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.cnosdb.query.CnosDBOtherQuery;
import sqlancer.cnosdb.query.CnosDBSelectQuery;
import sqlancer.common.query.ExpectedErrors;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CnosDBQueryAdapter_ESTest extends CnosDBQueryAdapter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ExpectedErrors expectedErrors0 = ExpectedErrors.from(stringArray0);
      CnosDBOtherQuery cnosDBOtherQuery0 = new CnosDBOtherQuery(stringArray0[0], expectedErrors0);
      String string0 = cnosDBOtherQuery0.getQueryString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExpectedErrors expectedErrors0 = new ExpectedErrors();
      CnosDBSelectQuery cnosDBSelectQuery0 = new CnosDBSelectQuery("m;{-9|f*4R(^]JX", expectedErrors0);
      String string0 = cnosDBSelectQuery0.getQueryString();
      assertEquals("m;{-9|f*4R(^]JX", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ExpectedErrors expectedErrors0 = ExpectedErrors.from(stringArray0);
      CnosDBSelectQuery cnosDBSelectQuery0 = new CnosDBSelectQuery((String) null, expectedErrors0);
      String string0 = cnosDBSelectQuery0.getLogString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExpectedErrors expectedErrors0 = new ExpectedErrors();
      CnosDBOtherQuery cnosDBOtherQuery0 = new CnosDBOtherQuery("", expectedErrors0);
      String string0 = cnosDBOtherQuery0.getLogString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ExpectedErrors expectedErrors0 = ExpectedErrors.from(stringArray0);
      CnosDBOtherQuery cnosDBOtherQuery0 = new CnosDBOtherQuery(stringArray0[0], expectedErrors0);
      ExpectedErrors expectedErrors1 = cnosDBOtherQuery0.getExpectedErrors();
      assertSame(expectedErrors1, expectedErrors0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ExpectedErrors expectedErrors0 = ExpectedErrors.from(stringArray0);
      CnosDBOtherQuery cnosDBOtherQuery0 = new CnosDBOtherQuery((String) null, expectedErrors0);
      boolean boolean0 = cnosDBOtherQuery0.couldAffectSchema();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[4];
      ExpectedErrors expectedErrors0 = ExpectedErrors.from(stringArray0);
      CnosDBSelectQuery cnosDBSelectQuery0 = new CnosDBSelectQuery("", expectedErrors0);
      boolean boolean0 = cnosDBSelectQuery0.couldAffectSchema();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExpectedErrors expectedErrors0 = new ExpectedErrors();
      CnosDBOtherQuery cnosDBOtherQuery0 = new CnosDBOtherQuery("", expectedErrors0);
      String string0 = cnosDBOtherQuery0.getUnterminatedQueryString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CnosDBSelectQuery cnosDBSelectQuery0 = new CnosDBSelectQuery("", (ExpectedErrors) null);
      String string0 = cnosDBSelectQuery0.getQueryString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CnosDBSelectQuery cnosDBSelectQuery0 = new CnosDBSelectQuery("", (ExpectedErrors) null);
      ExpectedErrors expectedErrors0 = cnosDBSelectQuery0.getExpectedErrors();
      assertNull(expectedErrors0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExpectedErrors expectedErrors0 = new ExpectedErrors();
      CnosDBOtherQuery cnosDBOtherQuery0 = new CnosDBOtherQuery("sqlancer.clickhouse.ClickHouseSchema", expectedErrors0);
      String string0 = cnosDBOtherQuery0.getLogString();
      assertEquals("sqlancer.clickhouse.ClickHouseSchema", string0);
  }
}
