/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 13 14:16:06 GMT 2025
 */

package sqlancer.cnosdb.gen;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sqlancer.cnosdb.CnosDBSchema;
import sqlancer.cnosdb.gen.CnosDBCommon;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CnosDBCommon_ESTest extends CnosDBCommon_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.UINT;
      StringBuilder stringBuilder0 = new StringBuilder(0);
      CnosDBCommon.appendDataType(cnosDBSchema_CnosDBDataType0, stringBuilder0);
      assertEquals("BIGINT UNSIGNED", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.DOUBLE;
      StringBuilder stringBuilder0 = new StringBuilder(0);
      CnosDBCommon.appendDataType(cnosDBSchema_CnosDBDataType0, stringBuilder0);
      assertEquals("DOUBLE", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.STRING;
      StringBuilder stringBuilder0 = new StringBuilder("3C3");
      CnosDBCommon.appendDataType(cnosDBSchema_CnosDBDataType0, stringBuilder0);
      assertEquals("3C3STRING", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("3C3");
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.INT;
      CnosDBCommon.appendDataType(cnosDBSchema_CnosDBDataType0, stringBuilder0);
      assertEquals("3C3BIGINT", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.UINT;
      // Undeclared exception!
      try { 
        CnosDBCommon.appendDataType(cnosDBSchema_CnosDBDataType0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sqlancer.cnosdb.gen.CnosDBCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.BOOLEAN;
      CnosDBCommon.appendDataType(cnosDBSchema_CnosDBDataType0, stringBuilder0);
      assertEquals("BOOLEAN", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("q)B");
      CnosDBSchema.CnosDBDataType cnosDBSchema_CnosDBDataType0 = CnosDBSchema.CnosDBDataType.TIMESTAMP;
      try { 
        CnosDBCommon.appendDataType(cnosDBSchema_CnosDBDataType0, stringBuilder0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // TIMESTAMP
         //
      }
  }
}
